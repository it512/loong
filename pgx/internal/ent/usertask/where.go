// Code generated by ent, DO NOT EDIT.

package usertask

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/it512/loong/pgx/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.UserTask {
	return predicate.UserTask(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.UserTask {
	return predicate.UserTask(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.UserTask {
	return predicate.UserTask(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.UserTask {
	return predicate.UserTask(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.UserTask {
	return predicate.UserTask(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.UserTask {
	return predicate.UserTask(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.UserTask {
	return predicate.UserTask(sql.FieldLTE(FieldID, id))
}

// TaskID applies equality check predicate on the "task_id" field. It's identical to TaskIDEQ.
func TaskID(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldTaskID, v))
}

// InstID applies equality check predicate on the "inst_id" field. It's identical to InstIDEQ.
func InstID(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldInstID, v))
}

// ExecID applies equality check predicate on the "exec_id" field. It's identical to ExecIDEQ.
func ExecID(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldExecID, v))
}

// BusiKey applies equality check predicate on the "busi_key" field. It's identical to BusiKeyEQ.
func BusiKey(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldBusiKey, v))
}

// BusiType applies equality check predicate on the "busi_type" field. It's identical to BusiTypeEQ.
func BusiType(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldBusiType, v))
}

// FormKey applies equality check predicate on the "form_key" field. It's identical to FormKeyEQ.
func FormKey(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldFormKey, v))
}

// ActID applies equality check predicate on the "act_id" field. It's identical to ActIDEQ.
func ActID(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldActID, v))
}

// ActName applies equality check predicate on the "act_name" field. It's identical to ActNameEQ.
func ActName(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldActName, v))
}

// Owner applies equality check predicate on the "owner" field. It's identical to OwnerEQ.
func Owner(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldOwner, v))
}

// Assignee applies equality check predicate on the "assignee" field. It's identical to AssigneeEQ.
func Assignee(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldAssignee, v))
}

// CandidateUsers applies equality check predicate on the "candidate_users" field. It's identical to CandidateUsersEQ.
func CandidateUsers(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldCandidateUsers, v))
}

// CandidateGroups applies equality check predicate on the "candidate_groups" field. It's identical to CandidateGroupsEQ.
func CandidateGroups(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldCandidateGroups, v))
}

// Operator applies equality check predicate on the "operator" field. It's identical to OperatorEQ.
func Operator(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldOperator, v))
}

// BatchNo applies equality check predicate on the "batch_no" field. It's identical to BatchNoEQ.
func BatchNo(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldBatchNo, v))
}

// Result applies equality check predicate on the "result" field. It's identical to ResultEQ.
func Result(v int) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldResult, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldEndTime, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldStatus, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldVersion, v))
}

// TaskIDEQ applies the EQ predicate on the "task_id" field.
func TaskIDEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldTaskID, v))
}

// TaskIDNEQ applies the NEQ predicate on the "task_id" field.
func TaskIDNEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNEQ(FieldTaskID, v))
}

// TaskIDIn applies the In predicate on the "task_id" field.
func TaskIDIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldIn(FieldTaskID, vs...))
}

// TaskIDNotIn applies the NotIn predicate on the "task_id" field.
func TaskIDNotIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNotIn(FieldTaskID, vs...))
}

// TaskIDGT applies the GT predicate on the "task_id" field.
func TaskIDGT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGT(FieldTaskID, v))
}

// TaskIDGTE applies the GTE predicate on the "task_id" field.
func TaskIDGTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGTE(FieldTaskID, v))
}

// TaskIDLT applies the LT predicate on the "task_id" field.
func TaskIDLT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLT(FieldTaskID, v))
}

// TaskIDLTE applies the LTE predicate on the "task_id" field.
func TaskIDLTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLTE(FieldTaskID, v))
}

// TaskIDContains applies the Contains predicate on the "task_id" field.
func TaskIDContains(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContains(FieldTaskID, v))
}

// TaskIDHasPrefix applies the HasPrefix predicate on the "task_id" field.
func TaskIDHasPrefix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasPrefix(FieldTaskID, v))
}

// TaskIDHasSuffix applies the HasSuffix predicate on the "task_id" field.
func TaskIDHasSuffix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasSuffix(FieldTaskID, v))
}

// TaskIDEqualFold applies the EqualFold predicate on the "task_id" field.
func TaskIDEqualFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEqualFold(FieldTaskID, v))
}

// TaskIDContainsFold applies the ContainsFold predicate on the "task_id" field.
func TaskIDContainsFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContainsFold(FieldTaskID, v))
}

// InstIDEQ applies the EQ predicate on the "inst_id" field.
func InstIDEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldInstID, v))
}

// InstIDNEQ applies the NEQ predicate on the "inst_id" field.
func InstIDNEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNEQ(FieldInstID, v))
}

// InstIDIn applies the In predicate on the "inst_id" field.
func InstIDIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldIn(FieldInstID, vs...))
}

// InstIDNotIn applies the NotIn predicate on the "inst_id" field.
func InstIDNotIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNotIn(FieldInstID, vs...))
}

// InstIDGT applies the GT predicate on the "inst_id" field.
func InstIDGT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGT(FieldInstID, v))
}

// InstIDGTE applies the GTE predicate on the "inst_id" field.
func InstIDGTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGTE(FieldInstID, v))
}

// InstIDLT applies the LT predicate on the "inst_id" field.
func InstIDLT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLT(FieldInstID, v))
}

// InstIDLTE applies the LTE predicate on the "inst_id" field.
func InstIDLTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLTE(FieldInstID, v))
}

// InstIDContains applies the Contains predicate on the "inst_id" field.
func InstIDContains(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContains(FieldInstID, v))
}

// InstIDHasPrefix applies the HasPrefix predicate on the "inst_id" field.
func InstIDHasPrefix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasPrefix(FieldInstID, v))
}

// InstIDHasSuffix applies the HasSuffix predicate on the "inst_id" field.
func InstIDHasSuffix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasSuffix(FieldInstID, v))
}

// InstIDEqualFold applies the EqualFold predicate on the "inst_id" field.
func InstIDEqualFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEqualFold(FieldInstID, v))
}

// InstIDContainsFold applies the ContainsFold predicate on the "inst_id" field.
func InstIDContainsFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContainsFold(FieldInstID, v))
}

// ExecIDEQ applies the EQ predicate on the "exec_id" field.
func ExecIDEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldExecID, v))
}

// ExecIDNEQ applies the NEQ predicate on the "exec_id" field.
func ExecIDNEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNEQ(FieldExecID, v))
}

// ExecIDIn applies the In predicate on the "exec_id" field.
func ExecIDIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldIn(FieldExecID, vs...))
}

// ExecIDNotIn applies the NotIn predicate on the "exec_id" field.
func ExecIDNotIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNotIn(FieldExecID, vs...))
}

// ExecIDGT applies the GT predicate on the "exec_id" field.
func ExecIDGT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGT(FieldExecID, v))
}

// ExecIDGTE applies the GTE predicate on the "exec_id" field.
func ExecIDGTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGTE(FieldExecID, v))
}

// ExecIDLT applies the LT predicate on the "exec_id" field.
func ExecIDLT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLT(FieldExecID, v))
}

// ExecIDLTE applies the LTE predicate on the "exec_id" field.
func ExecIDLTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLTE(FieldExecID, v))
}

// ExecIDContains applies the Contains predicate on the "exec_id" field.
func ExecIDContains(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContains(FieldExecID, v))
}

// ExecIDHasPrefix applies the HasPrefix predicate on the "exec_id" field.
func ExecIDHasPrefix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasPrefix(FieldExecID, v))
}

// ExecIDHasSuffix applies the HasSuffix predicate on the "exec_id" field.
func ExecIDHasSuffix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasSuffix(FieldExecID, v))
}

// ExecIDIsNil applies the IsNil predicate on the "exec_id" field.
func ExecIDIsNil() predicate.UserTask {
	return predicate.UserTask(sql.FieldIsNull(FieldExecID))
}

// ExecIDNotNil applies the NotNil predicate on the "exec_id" field.
func ExecIDNotNil() predicate.UserTask {
	return predicate.UserTask(sql.FieldNotNull(FieldExecID))
}

// ExecIDEqualFold applies the EqualFold predicate on the "exec_id" field.
func ExecIDEqualFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEqualFold(FieldExecID, v))
}

// ExecIDContainsFold applies the ContainsFold predicate on the "exec_id" field.
func ExecIDContainsFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContainsFold(FieldExecID, v))
}

// BusiKeyEQ applies the EQ predicate on the "busi_key" field.
func BusiKeyEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldBusiKey, v))
}

// BusiKeyNEQ applies the NEQ predicate on the "busi_key" field.
func BusiKeyNEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNEQ(FieldBusiKey, v))
}

// BusiKeyIn applies the In predicate on the "busi_key" field.
func BusiKeyIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldIn(FieldBusiKey, vs...))
}

// BusiKeyNotIn applies the NotIn predicate on the "busi_key" field.
func BusiKeyNotIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNotIn(FieldBusiKey, vs...))
}

// BusiKeyGT applies the GT predicate on the "busi_key" field.
func BusiKeyGT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGT(FieldBusiKey, v))
}

// BusiKeyGTE applies the GTE predicate on the "busi_key" field.
func BusiKeyGTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGTE(FieldBusiKey, v))
}

// BusiKeyLT applies the LT predicate on the "busi_key" field.
func BusiKeyLT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLT(FieldBusiKey, v))
}

// BusiKeyLTE applies the LTE predicate on the "busi_key" field.
func BusiKeyLTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLTE(FieldBusiKey, v))
}

// BusiKeyContains applies the Contains predicate on the "busi_key" field.
func BusiKeyContains(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContains(FieldBusiKey, v))
}

// BusiKeyHasPrefix applies the HasPrefix predicate on the "busi_key" field.
func BusiKeyHasPrefix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasPrefix(FieldBusiKey, v))
}

// BusiKeyHasSuffix applies the HasSuffix predicate on the "busi_key" field.
func BusiKeyHasSuffix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasSuffix(FieldBusiKey, v))
}

// BusiKeyEqualFold applies the EqualFold predicate on the "busi_key" field.
func BusiKeyEqualFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEqualFold(FieldBusiKey, v))
}

// BusiKeyContainsFold applies the ContainsFold predicate on the "busi_key" field.
func BusiKeyContainsFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContainsFold(FieldBusiKey, v))
}

// BusiTypeEQ applies the EQ predicate on the "busi_type" field.
func BusiTypeEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldBusiType, v))
}

// BusiTypeNEQ applies the NEQ predicate on the "busi_type" field.
func BusiTypeNEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNEQ(FieldBusiType, v))
}

// BusiTypeIn applies the In predicate on the "busi_type" field.
func BusiTypeIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldIn(FieldBusiType, vs...))
}

// BusiTypeNotIn applies the NotIn predicate on the "busi_type" field.
func BusiTypeNotIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNotIn(FieldBusiType, vs...))
}

// BusiTypeGT applies the GT predicate on the "busi_type" field.
func BusiTypeGT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGT(FieldBusiType, v))
}

// BusiTypeGTE applies the GTE predicate on the "busi_type" field.
func BusiTypeGTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGTE(FieldBusiType, v))
}

// BusiTypeLT applies the LT predicate on the "busi_type" field.
func BusiTypeLT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLT(FieldBusiType, v))
}

// BusiTypeLTE applies the LTE predicate on the "busi_type" field.
func BusiTypeLTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLTE(FieldBusiType, v))
}

// BusiTypeContains applies the Contains predicate on the "busi_type" field.
func BusiTypeContains(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContains(FieldBusiType, v))
}

// BusiTypeHasPrefix applies the HasPrefix predicate on the "busi_type" field.
func BusiTypeHasPrefix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasPrefix(FieldBusiType, v))
}

// BusiTypeHasSuffix applies the HasSuffix predicate on the "busi_type" field.
func BusiTypeHasSuffix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasSuffix(FieldBusiType, v))
}

// BusiTypeEqualFold applies the EqualFold predicate on the "busi_type" field.
func BusiTypeEqualFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEqualFold(FieldBusiType, v))
}

// BusiTypeContainsFold applies the ContainsFold predicate on the "busi_type" field.
func BusiTypeContainsFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContainsFold(FieldBusiType, v))
}

// FormKeyEQ applies the EQ predicate on the "form_key" field.
func FormKeyEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldFormKey, v))
}

// FormKeyNEQ applies the NEQ predicate on the "form_key" field.
func FormKeyNEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNEQ(FieldFormKey, v))
}

// FormKeyIn applies the In predicate on the "form_key" field.
func FormKeyIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldIn(FieldFormKey, vs...))
}

// FormKeyNotIn applies the NotIn predicate on the "form_key" field.
func FormKeyNotIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNotIn(FieldFormKey, vs...))
}

// FormKeyGT applies the GT predicate on the "form_key" field.
func FormKeyGT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGT(FieldFormKey, v))
}

// FormKeyGTE applies the GTE predicate on the "form_key" field.
func FormKeyGTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGTE(FieldFormKey, v))
}

// FormKeyLT applies the LT predicate on the "form_key" field.
func FormKeyLT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLT(FieldFormKey, v))
}

// FormKeyLTE applies the LTE predicate on the "form_key" field.
func FormKeyLTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLTE(FieldFormKey, v))
}

// FormKeyContains applies the Contains predicate on the "form_key" field.
func FormKeyContains(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContains(FieldFormKey, v))
}

// FormKeyHasPrefix applies the HasPrefix predicate on the "form_key" field.
func FormKeyHasPrefix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasPrefix(FieldFormKey, v))
}

// FormKeyHasSuffix applies the HasSuffix predicate on the "form_key" field.
func FormKeyHasSuffix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasSuffix(FieldFormKey, v))
}

// FormKeyIsNil applies the IsNil predicate on the "form_key" field.
func FormKeyIsNil() predicate.UserTask {
	return predicate.UserTask(sql.FieldIsNull(FieldFormKey))
}

// FormKeyNotNil applies the NotNil predicate on the "form_key" field.
func FormKeyNotNil() predicate.UserTask {
	return predicate.UserTask(sql.FieldNotNull(FieldFormKey))
}

// FormKeyEqualFold applies the EqualFold predicate on the "form_key" field.
func FormKeyEqualFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEqualFold(FieldFormKey, v))
}

// FormKeyContainsFold applies the ContainsFold predicate on the "form_key" field.
func FormKeyContainsFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContainsFold(FieldFormKey, v))
}

// ActIDEQ applies the EQ predicate on the "act_id" field.
func ActIDEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldActID, v))
}

// ActIDNEQ applies the NEQ predicate on the "act_id" field.
func ActIDNEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNEQ(FieldActID, v))
}

// ActIDIn applies the In predicate on the "act_id" field.
func ActIDIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldIn(FieldActID, vs...))
}

// ActIDNotIn applies the NotIn predicate on the "act_id" field.
func ActIDNotIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNotIn(FieldActID, vs...))
}

// ActIDGT applies the GT predicate on the "act_id" field.
func ActIDGT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGT(FieldActID, v))
}

// ActIDGTE applies the GTE predicate on the "act_id" field.
func ActIDGTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGTE(FieldActID, v))
}

// ActIDLT applies the LT predicate on the "act_id" field.
func ActIDLT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLT(FieldActID, v))
}

// ActIDLTE applies the LTE predicate on the "act_id" field.
func ActIDLTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLTE(FieldActID, v))
}

// ActIDContains applies the Contains predicate on the "act_id" field.
func ActIDContains(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContains(FieldActID, v))
}

// ActIDHasPrefix applies the HasPrefix predicate on the "act_id" field.
func ActIDHasPrefix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasPrefix(FieldActID, v))
}

// ActIDHasSuffix applies the HasSuffix predicate on the "act_id" field.
func ActIDHasSuffix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasSuffix(FieldActID, v))
}

// ActIDEqualFold applies the EqualFold predicate on the "act_id" field.
func ActIDEqualFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEqualFold(FieldActID, v))
}

// ActIDContainsFold applies the ContainsFold predicate on the "act_id" field.
func ActIDContainsFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContainsFold(FieldActID, v))
}

// ActNameEQ applies the EQ predicate on the "act_name" field.
func ActNameEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldActName, v))
}

// ActNameNEQ applies the NEQ predicate on the "act_name" field.
func ActNameNEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNEQ(FieldActName, v))
}

// ActNameIn applies the In predicate on the "act_name" field.
func ActNameIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldIn(FieldActName, vs...))
}

// ActNameNotIn applies the NotIn predicate on the "act_name" field.
func ActNameNotIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNotIn(FieldActName, vs...))
}

// ActNameGT applies the GT predicate on the "act_name" field.
func ActNameGT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGT(FieldActName, v))
}

// ActNameGTE applies the GTE predicate on the "act_name" field.
func ActNameGTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGTE(FieldActName, v))
}

// ActNameLT applies the LT predicate on the "act_name" field.
func ActNameLT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLT(FieldActName, v))
}

// ActNameLTE applies the LTE predicate on the "act_name" field.
func ActNameLTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLTE(FieldActName, v))
}

// ActNameContains applies the Contains predicate on the "act_name" field.
func ActNameContains(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContains(FieldActName, v))
}

// ActNameHasPrefix applies the HasPrefix predicate on the "act_name" field.
func ActNameHasPrefix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasPrefix(FieldActName, v))
}

// ActNameHasSuffix applies the HasSuffix predicate on the "act_name" field.
func ActNameHasSuffix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasSuffix(FieldActName, v))
}

// ActNameIsNil applies the IsNil predicate on the "act_name" field.
func ActNameIsNil() predicate.UserTask {
	return predicate.UserTask(sql.FieldIsNull(FieldActName))
}

// ActNameNotNil applies the NotNil predicate on the "act_name" field.
func ActNameNotNil() predicate.UserTask {
	return predicate.UserTask(sql.FieldNotNull(FieldActName))
}

// ActNameEqualFold applies the EqualFold predicate on the "act_name" field.
func ActNameEqualFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEqualFold(FieldActName, v))
}

// ActNameContainsFold applies the ContainsFold predicate on the "act_name" field.
func ActNameContainsFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContainsFold(FieldActName, v))
}

// OwnerEQ applies the EQ predicate on the "owner" field.
func OwnerEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldOwner, v))
}

// OwnerNEQ applies the NEQ predicate on the "owner" field.
func OwnerNEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNEQ(FieldOwner, v))
}

// OwnerIn applies the In predicate on the "owner" field.
func OwnerIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldIn(FieldOwner, vs...))
}

// OwnerNotIn applies the NotIn predicate on the "owner" field.
func OwnerNotIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNotIn(FieldOwner, vs...))
}

// OwnerGT applies the GT predicate on the "owner" field.
func OwnerGT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGT(FieldOwner, v))
}

// OwnerGTE applies the GTE predicate on the "owner" field.
func OwnerGTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGTE(FieldOwner, v))
}

// OwnerLT applies the LT predicate on the "owner" field.
func OwnerLT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLT(FieldOwner, v))
}

// OwnerLTE applies the LTE predicate on the "owner" field.
func OwnerLTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLTE(FieldOwner, v))
}

// OwnerContains applies the Contains predicate on the "owner" field.
func OwnerContains(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContains(FieldOwner, v))
}

// OwnerHasPrefix applies the HasPrefix predicate on the "owner" field.
func OwnerHasPrefix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasPrefix(FieldOwner, v))
}

// OwnerHasSuffix applies the HasSuffix predicate on the "owner" field.
func OwnerHasSuffix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasSuffix(FieldOwner, v))
}

// OwnerIsNil applies the IsNil predicate on the "owner" field.
func OwnerIsNil() predicate.UserTask {
	return predicate.UserTask(sql.FieldIsNull(FieldOwner))
}

// OwnerNotNil applies the NotNil predicate on the "owner" field.
func OwnerNotNil() predicate.UserTask {
	return predicate.UserTask(sql.FieldNotNull(FieldOwner))
}

// OwnerEqualFold applies the EqualFold predicate on the "owner" field.
func OwnerEqualFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEqualFold(FieldOwner, v))
}

// OwnerContainsFold applies the ContainsFold predicate on the "owner" field.
func OwnerContainsFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContainsFold(FieldOwner, v))
}

// AssigneeEQ applies the EQ predicate on the "assignee" field.
func AssigneeEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldAssignee, v))
}

// AssigneeNEQ applies the NEQ predicate on the "assignee" field.
func AssigneeNEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNEQ(FieldAssignee, v))
}

// AssigneeIn applies the In predicate on the "assignee" field.
func AssigneeIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldIn(FieldAssignee, vs...))
}

// AssigneeNotIn applies the NotIn predicate on the "assignee" field.
func AssigneeNotIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNotIn(FieldAssignee, vs...))
}

// AssigneeGT applies the GT predicate on the "assignee" field.
func AssigneeGT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGT(FieldAssignee, v))
}

// AssigneeGTE applies the GTE predicate on the "assignee" field.
func AssigneeGTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGTE(FieldAssignee, v))
}

// AssigneeLT applies the LT predicate on the "assignee" field.
func AssigneeLT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLT(FieldAssignee, v))
}

// AssigneeLTE applies the LTE predicate on the "assignee" field.
func AssigneeLTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLTE(FieldAssignee, v))
}

// AssigneeContains applies the Contains predicate on the "assignee" field.
func AssigneeContains(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContains(FieldAssignee, v))
}

// AssigneeHasPrefix applies the HasPrefix predicate on the "assignee" field.
func AssigneeHasPrefix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasPrefix(FieldAssignee, v))
}

// AssigneeHasSuffix applies the HasSuffix predicate on the "assignee" field.
func AssigneeHasSuffix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasSuffix(FieldAssignee, v))
}

// AssigneeIsNil applies the IsNil predicate on the "assignee" field.
func AssigneeIsNil() predicate.UserTask {
	return predicate.UserTask(sql.FieldIsNull(FieldAssignee))
}

// AssigneeNotNil applies the NotNil predicate on the "assignee" field.
func AssigneeNotNil() predicate.UserTask {
	return predicate.UserTask(sql.FieldNotNull(FieldAssignee))
}

// AssigneeEqualFold applies the EqualFold predicate on the "assignee" field.
func AssigneeEqualFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEqualFold(FieldAssignee, v))
}

// AssigneeContainsFold applies the ContainsFold predicate on the "assignee" field.
func AssigneeContainsFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContainsFold(FieldAssignee, v))
}

// CandidateUsersEQ applies the EQ predicate on the "candidate_users" field.
func CandidateUsersEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldCandidateUsers, v))
}

// CandidateUsersNEQ applies the NEQ predicate on the "candidate_users" field.
func CandidateUsersNEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNEQ(FieldCandidateUsers, v))
}

// CandidateUsersIn applies the In predicate on the "candidate_users" field.
func CandidateUsersIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldIn(FieldCandidateUsers, vs...))
}

// CandidateUsersNotIn applies the NotIn predicate on the "candidate_users" field.
func CandidateUsersNotIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNotIn(FieldCandidateUsers, vs...))
}

// CandidateUsersGT applies the GT predicate on the "candidate_users" field.
func CandidateUsersGT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGT(FieldCandidateUsers, v))
}

// CandidateUsersGTE applies the GTE predicate on the "candidate_users" field.
func CandidateUsersGTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGTE(FieldCandidateUsers, v))
}

// CandidateUsersLT applies the LT predicate on the "candidate_users" field.
func CandidateUsersLT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLT(FieldCandidateUsers, v))
}

// CandidateUsersLTE applies the LTE predicate on the "candidate_users" field.
func CandidateUsersLTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLTE(FieldCandidateUsers, v))
}

// CandidateUsersContains applies the Contains predicate on the "candidate_users" field.
func CandidateUsersContains(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContains(FieldCandidateUsers, v))
}

// CandidateUsersHasPrefix applies the HasPrefix predicate on the "candidate_users" field.
func CandidateUsersHasPrefix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasPrefix(FieldCandidateUsers, v))
}

// CandidateUsersHasSuffix applies the HasSuffix predicate on the "candidate_users" field.
func CandidateUsersHasSuffix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasSuffix(FieldCandidateUsers, v))
}

// CandidateUsersIsNil applies the IsNil predicate on the "candidate_users" field.
func CandidateUsersIsNil() predicate.UserTask {
	return predicate.UserTask(sql.FieldIsNull(FieldCandidateUsers))
}

// CandidateUsersNotNil applies the NotNil predicate on the "candidate_users" field.
func CandidateUsersNotNil() predicate.UserTask {
	return predicate.UserTask(sql.FieldNotNull(FieldCandidateUsers))
}

// CandidateUsersEqualFold applies the EqualFold predicate on the "candidate_users" field.
func CandidateUsersEqualFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEqualFold(FieldCandidateUsers, v))
}

// CandidateUsersContainsFold applies the ContainsFold predicate on the "candidate_users" field.
func CandidateUsersContainsFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContainsFold(FieldCandidateUsers, v))
}

// CandidateGroupsEQ applies the EQ predicate on the "candidate_groups" field.
func CandidateGroupsEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldCandidateGroups, v))
}

// CandidateGroupsNEQ applies the NEQ predicate on the "candidate_groups" field.
func CandidateGroupsNEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNEQ(FieldCandidateGroups, v))
}

// CandidateGroupsIn applies the In predicate on the "candidate_groups" field.
func CandidateGroupsIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldIn(FieldCandidateGroups, vs...))
}

// CandidateGroupsNotIn applies the NotIn predicate on the "candidate_groups" field.
func CandidateGroupsNotIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNotIn(FieldCandidateGroups, vs...))
}

// CandidateGroupsGT applies the GT predicate on the "candidate_groups" field.
func CandidateGroupsGT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGT(FieldCandidateGroups, v))
}

// CandidateGroupsGTE applies the GTE predicate on the "candidate_groups" field.
func CandidateGroupsGTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGTE(FieldCandidateGroups, v))
}

// CandidateGroupsLT applies the LT predicate on the "candidate_groups" field.
func CandidateGroupsLT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLT(FieldCandidateGroups, v))
}

// CandidateGroupsLTE applies the LTE predicate on the "candidate_groups" field.
func CandidateGroupsLTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLTE(FieldCandidateGroups, v))
}

// CandidateGroupsContains applies the Contains predicate on the "candidate_groups" field.
func CandidateGroupsContains(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContains(FieldCandidateGroups, v))
}

// CandidateGroupsHasPrefix applies the HasPrefix predicate on the "candidate_groups" field.
func CandidateGroupsHasPrefix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasPrefix(FieldCandidateGroups, v))
}

// CandidateGroupsHasSuffix applies the HasSuffix predicate on the "candidate_groups" field.
func CandidateGroupsHasSuffix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasSuffix(FieldCandidateGroups, v))
}

// CandidateGroupsIsNil applies the IsNil predicate on the "candidate_groups" field.
func CandidateGroupsIsNil() predicate.UserTask {
	return predicate.UserTask(sql.FieldIsNull(FieldCandidateGroups))
}

// CandidateGroupsNotNil applies the NotNil predicate on the "candidate_groups" field.
func CandidateGroupsNotNil() predicate.UserTask {
	return predicate.UserTask(sql.FieldNotNull(FieldCandidateGroups))
}

// CandidateGroupsEqualFold applies the EqualFold predicate on the "candidate_groups" field.
func CandidateGroupsEqualFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEqualFold(FieldCandidateGroups, v))
}

// CandidateGroupsContainsFold applies the ContainsFold predicate on the "candidate_groups" field.
func CandidateGroupsContainsFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContainsFold(FieldCandidateGroups, v))
}

// OperatorEQ applies the EQ predicate on the "operator" field.
func OperatorEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldOperator, v))
}

// OperatorNEQ applies the NEQ predicate on the "operator" field.
func OperatorNEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNEQ(FieldOperator, v))
}

// OperatorIn applies the In predicate on the "operator" field.
func OperatorIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldIn(FieldOperator, vs...))
}

// OperatorNotIn applies the NotIn predicate on the "operator" field.
func OperatorNotIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNotIn(FieldOperator, vs...))
}

// OperatorGT applies the GT predicate on the "operator" field.
func OperatorGT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGT(FieldOperator, v))
}

// OperatorGTE applies the GTE predicate on the "operator" field.
func OperatorGTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGTE(FieldOperator, v))
}

// OperatorLT applies the LT predicate on the "operator" field.
func OperatorLT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLT(FieldOperator, v))
}

// OperatorLTE applies the LTE predicate on the "operator" field.
func OperatorLTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLTE(FieldOperator, v))
}

// OperatorContains applies the Contains predicate on the "operator" field.
func OperatorContains(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContains(FieldOperator, v))
}

// OperatorHasPrefix applies the HasPrefix predicate on the "operator" field.
func OperatorHasPrefix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasPrefix(FieldOperator, v))
}

// OperatorHasSuffix applies the HasSuffix predicate on the "operator" field.
func OperatorHasSuffix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasSuffix(FieldOperator, v))
}

// OperatorIsNil applies the IsNil predicate on the "operator" field.
func OperatorIsNil() predicate.UserTask {
	return predicate.UserTask(sql.FieldIsNull(FieldOperator))
}

// OperatorNotNil applies the NotNil predicate on the "operator" field.
func OperatorNotNil() predicate.UserTask {
	return predicate.UserTask(sql.FieldNotNull(FieldOperator))
}

// OperatorEqualFold applies the EqualFold predicate on the "operator" field.
func OperatorEqualFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEqualFold(FieldOperator, v))
}

// OperatorContainsFold applies the ContainsFold predicate on the "operator" field.
func OperatorContainsFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContainsFold(FieldOperator, v))
}

// BatchNoEQ applies the EQ predicate on the "batch_no" field.
func BatchNoEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldBatchNo, v))
}

// BatchNoNEQ applies the NEQ predicate on the "batch_no" field.
func BatchNoNEQ(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNEQ(FieldBatchNo, v))
}

// BatchNoIn applies the In predicate on the "batch_no" field.
func BatchNoIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldIn(FieldBatchNo, vs...))
}

// BatchNoNotIn applies the NotIn predicate on the "batch_no" field.
func BatchNoNotIn(vs ...string) predicate.UserTask {
	return predicate.UserTask(sql.FieldNotIn(FieldBatchNo, vs...))
}

// BatchNoGT applies the GT predicate on the "batch_no" field.
func BatchNoGT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGT(FieldBatchNo, v))
}

// BatchNoGTE applies the GTE predicate on the "batch_no" field.
func BatchNoGTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldGTE(FieldBatchNo, v))
}

// BatchNoLT applies the LT predicate on the "batch_no" field.
func BatchNoLT(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLT(FieldBatchNo, v))
}

// BatchNoLTE applies the LTE predicate on the "batch_no" field.
func BatchNoLTE(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldLTE(FieldBatchNo, v))
}

// BatchNoContains applies the Contains predicate on the "batch_no" field.
func BatchNoContains(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContains(FieldBatchNo, v))
}

// BatchNoHasPrefix applies the HasPrefix predicate on the "batch_no" field.
func BatchNoHasPrefix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasPrefix(FieldBatchNo, v))
}

// BatchNoHasSuffix applies the HasSuffix predicate on the "batch_no" field.
func BatchNoHasSuffix(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldHasSuffix(FieldBatchNo, v))
}

// BatchNoEqualFold applies the EqualFold predicate on the "batch_no" field.
func BatchNoEqualFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldEqualFold(FieldBatchNo, v))
}

// BatchNoContainsFold applies the ContainsFold predicate on the "batch_no" field.
func BatchNoContainsFold(v string) predicate.UserTask {
	return predicate.UserTask(sql.FieldContainsFold(FieldBatchNo, v))
}

// ResultEQ applies the EQ predicate on the "result" field.
func ResultEQ(v int) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldResult, v))
}

// ResultNEQ applies the NEQ predicate on the "result" field.
func ResultNEQ(v int) predicate.UserTask {
	return predicate.UserTask(sql.FieldNEQ(FieldResult, v))
}

// ResultIn applies the In predicate on the "result" field.
func ResultIn(vs ...int) predicate.UserTask {
	return predicate.UserTask(sql.FieldIn(FieldResult, vs...))
}

// ResultNotIn applies the NotIn predicate on the "result" field.
func ResultNotIn(vs ...int) predicate.UserTask {
	return predicate.UserTask(sql.FieldNotIn(FieldResult, vs...))
}

// ResultGT applies the GT predicate on the "result" field.
func ResultGT(v int) predicate.UserTask {
	return predicate.UserTask(sql.FieldGT(FieldResult, v))
}

// ResultGTE applies the GTE predicate on the "result" field.
func ResultGTE(v int) predicate.UserTask {
	return predicate.UserTask(sql.FieldGTE(FieldResult, v))
}

// ResultLT applies the LT predicate on the "result" field.
func ResultLT(v int) predicate.UserTask {
	return predicate.UserTask(sql.FieldLT(FieldResult, v))
}

// ResultLTE applies the LTE predicate on the "result" field.
func ResultLTE(v int) predicate.UserTask {
	return predicate.UserTask(sql.FieldLTE(FieldResult, v))
}

// ResultIsNil applies the IsNil predicate on the "result" field.
func ResultIsNil() predicate.UserTask {
	return predicate.UserTask(sql.FieldIsNull(FieldResult))
}

// ResultNotNil applies the NotNil predicate on the "result" field.
func ResultNotNil() predicate.UserTask {
	return predicate.UserTask(sql.FieldNotNull(FieldResult))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.UserTask {
	return predicate.UserTask(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.UserTask {
	return predicate.UserTask(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.UserTask {
	return predicate.UserTask(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.UserTask {
	return predicate.UserTask(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.UserTask {
	return predicate.UserTask(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.UserTask {
	return predicate.UserTask(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.UserTask {
	return predicate.UserTask(sql.FieldLTE(FieldStartTime, v))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.UserTask {
	return predicate.UserTask(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.UserTask {
	return predicate.UserTask(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.UserTask {
	return predicate.UserTask(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.UserTask {
	return predicate.UserTask(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.UserTask {
	return predicate.UserTask(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.UserTask {
	return predicate.UserTask(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.UserTask {
	return predicate.UserTask(sql.FieldLTE(FieldEndTime, v))
}

// EndTimeIsNil applies the IsNil predicate on the "end_time" field.
func EndTimeIsNil() predicate.UserTask {
	return predicate.UserTask(sql.FieldIsNull(FieldEndTime))
}

// EndTimeNotNil applies the NotNil predicate on the "end_time" field.
func EndTimeNotNil() predicate.UserTask {
	return predicate.UserTask(sql.FieldNotNull(FieldEndTime))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.UserTask {
	return predicate.UserTask(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.UserTask {
	return predicate.UserTask(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.UserTask {
	return predicate.UserTask(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.UserTask {
	return predicate.UserTask(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.UserTask {
	return predicate.UserTask(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.UserTask {
	return predicate.UserTask(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.UserTask {
	return predicate.UserTask(sql.FieldLTE(FieldStatus, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.UserTask {
	return predicate.UserTask(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.UserTask {
	return predicate.UserTask(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.UserTask {
	return predicate.UserTask(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.UserTask {
	return predicate.UserTask(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.UserTask {
	return predicate.UserTask(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.UserTask {
	return predicate.UserTask(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.UserTask {
	return predicate.UserTask(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.UserTask {
	return predicate.UserTask(sql.FieldLTE(FieldVersion, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserTask) predicate.UserTask {
	return predicate.UserTask(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserTask) predicate.UserTask {
	return predicate.UserTask(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserTask) predicate.UserTask {
	return predicate.UserTask(sql.NotPredicates(p))
}
