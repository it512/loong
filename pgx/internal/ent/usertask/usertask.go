// Code generated by ent, DO NOT EDIT.

package usertask

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/it512/loong"
)

const (
	// Label holds the string label denoting the usertask type in the database.
	Label = "user_task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTaskID holds the string denoting the task_id field in the database.
	FieldTaskID = "task_id"
	// FieldInstID holds the string denoting the inst_id field in the database.
	FieldInstID = "inst_id"
	// FieldExecID holds the string denoting the exec_id field in the database.
	FieldExecID = "exec_id"
	// FieldBusiKey holds the string denoting the busi_key field in the database.
	FieldBusiKey = "busi_key"
	// FieldBusiType holds the string denoting the busi_type field in the database.
	FieldBusiType = "busi_type"
	// FieldFormKey holds the string denoting the form_key field in the database.
	FieldFormKey = "form_key"
	// FieldActID holds the string denoting the act_id field in the database.
	FieldActID = "act_id"
	// FieldActName holds the string denoting the act_name field in the database.
	FieldActName = "act_name"
	// FieldOwner holds the string denoting the owner field in the database.
	FieldOwner = "owner"
	// FieldAssignee holds the string denoting the assignee field in the database.
	FieldAssignee = "assignee"
	// FieldCandidateUsers holds the string denoting the candidate_users field in the database.
	FieldCandidateUsers = "candidate_users"
	// FieldCandidateGroups holds the string denoting the candidate_groups field in the database.
	FieldCandidateGroups = "candidate_groups"
	// FieldOperator holds the string denoting the operator field in the database.
	FieldOperator = "operator"
	// FieldInput holds the string denoting the input field in the database.
	FieldInput = "input"
	// FieldBatchNo holds the string denoting the batch_no field in the database.
	FieldBatchNo = "batch_no"
	// FieldResult holds the string denoting the result field in the database.
	FieldResult = "result"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// Table holds the table name of the usertask in the database.
	Table = "loong_user_task"
)

// Columns holds all SQL columns for usertask fields.
var Columns = []string{
	FieldID,
	FieldTaskID,
	FieldInstID,
	FieldExecID,
	FieldBusiKey,
	FieldBusiType,
	FieldFormKey,
	FieldActID,
	FieldActName,
	FieldOwner,
	FieldAssignee,
	FieldCandidateUsers,
	FieldCandidateGroups,
	FieldOperator,
	FieldInput,
	FieldBatchNo,
	FieldResult,
	FieldStartTime,
	FieldEndTime,
	FieldStatus,
	FieldVersion,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTaskID holds the default value on creation for the "task_id" field.
	DefaultTaskID func() string
	// TaskIDValidator is a validator for the "task_id" field. It is called by the builders before save.
	TaskIDValidator func(string) error
	// InstIDValidator is a validator for the "inst_id" field. It is called by the builders before save.
	InstIDValidator func(string) error
	// ExecIDValidator is a validator for the "exec_id" field. It is called by the builders before save.
	ExecIDValidator func(string) error
	// BusiKeyValidator is a validator for the "busi_key" field. It is called by the builders before save.
	BusiKeyValidator func(string) error
	// BusiTypeValidator is a validator for the "busi_type" field. It is called by the builders before save.
	BusiTypeValidator func(string) error
	// FormKeyValidator is a validator for the "form_key" field. It is called by the builders before save.
	FormKeyValidator func(string) error
	// ActIDValidator is a validator for the "act_id" field. It is called by the builders before save.
	ActIDValidator func(string) error
	// ActNameValidator is a validator for the "act_name" field. It is called by the builders before save.
	ActNameValidator func(string) error
	// OwnerValidator is a validator for the "owner" field. It is called by the builders before save.
	OwnerValidator func(string) error
	// AssigneeValidator is a validator for the "assignee" field. It is called by the builders before save.
	AssigneeValidator func(string) error
	// CandidateUsersValidator is a validator for the "candidate_users" field. It is called by the builders before save.
	CandidateUsersValidator func(string) error
	// CandidateGroupsValidator is a validator for the "candidate_groups" field. It is called by the builders before save.
	CandidateGroupsValidator func(string) error
	// OperatorValidator is a validator for the "operator" field. It is called by the builders before save.
	OperatorValidator func(string) error
	// DefaultInput holds the default value on creation for the "input" field.
	DefaultInput loong.Var
	// BatchNoValidator is a validator for the "batch_no" field. It is called by the builders before save.
	BatchNoValidator func(string) error
	// DefaultResult holds the default value on creation for the "result" field.
	DefaultResult int
	// DefaultStartTime holds the default value on creation for the "start_time" field.
	DefaultStartTime func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the UserTask queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTaskID orders the results by the task_id field.
func ByTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskID, opts...).ToFunc()
}

// ByInstID orders the results by the inst_id field.
func ByInstID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstID, opts...).ToFunc()
}

// ByExecID orders the results by the exec_id field.
func ByExecID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExecID, opts...).ToFunc()
}

// ByBusiKey orders the results by the busi_key field.
func ByBusiKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusiKey, opts...).ToFunc()
}

// ByBusiType orders the results by the busi_type field.
func ByBusiType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusiType, opts...).ToFunc()
}

// ByFormKey orders the results by the form_key field.
func ByFormKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormKey, opts...).ToFunc()
}

// ByActID orders the results by the act_id field.
func ByActID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActID, opts...).ToFunc()
}

// ByActName orders the results by the act_name field.
func ByActName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActName, opts...).ToFunc()
}

// ByOwner orders the results by the owner field.
func ByOwner(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwner, opts...).ToFunc()
}

// ByAssignee orders the results by the assignee field.
func ByAssignee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssignee, opts...).ToFunc()
}

// ByCandidateUsers orders the results by the candidate_users field.
func ByCandidateUsers(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCandidateUsers, opts...).ToFunc()
}

// ByCandidateGroups orders the results by the candidate_groups field.
func ByCandidateGroups(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCandidateGroups, opts...).ToFunc()
}

// ByOperator orders the results by the operator field.
func ByOperator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperator, opts...).ToFunc()
}

// ByBatchNo orders the results by the batch_no field.
func ByBatchNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBatchNo, opts...).ToFunc()
}

// ByResult orders the results by the result field.
func ByResult(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResult, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}
