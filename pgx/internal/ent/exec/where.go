// Code generated by ent, DO NOT EDIT.

package exec

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/it512/loong/pgx/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Exec {
	return predicate.Exec(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Exec {
	return predicate.Exec(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Exec {
	return predicate.Exec(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Exec {
	return predicate.Exec(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Exec {
	return predicate.Exec(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Exec {
	return predicate.Exec(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Exec {
	return predicate.Exec(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Exec {
	return predicate.Exec(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Exec {
	return predicate.Exec(sql.FieldLTE(FieldID, id))
}

// ExecID applies equality check predicate on the "exec_id" field. It's identical to ExecIDEQ.
func ExecID(v string) predicate.Exec {
	return predicate.Exec(sql.FieldEQ(FieldExecID, v))
}

// InstID applies equality check predicate on the "inst_id" field. It's identical to InstIDEQ.
func InstID(v string) predicate.Exec {
	return predicate.Exec(sql.FieldEQ(FieldInstID, v))
}

// ParentForkID applies equality check predicate on the "parent_fork_id" field. It's identical to ParentForkIDEQ.
func ParentForkID(v string) predicate.Exec {
	return predicate.Exec(sql.FieldEQ(FieldParentForkID, v))
}

// ForkID applies equality check predicate on the "fork_id" field. It's identical to ForkIDEQ.
func ForkID(v string) predicate.Exec {
	return predicate.Exec(sql.FieldEQ(FieldForkID, v))
}

// ForkTag applies equality check predicate on the "fork_tag" field. It's identical to ForkTagEQ.
func ForkTag(v string) predicate.Exec {
	return predicate.Exec(sql.FieldEQ(FieldForkTag, v))
}

// OutTag applies equality check predicate on the "out_tag" field. It's identical to OutTagEQ.
func OutTag(v string) predicate.Exec {
	return predicate.Exec(sql.FieldEQ(FieldOutTag, v))
}

// JoinTag applies equality check predicate on the "join_tag" field. It's identical to JoinTagEQ.
func JoinTag(v string) predicate.Exec {
	return predicate.Exec(sql.FieldEQ(FieldJoinTag, v))
}

// GwType applies equality check predicate on the "gw_type" field. It's identical to GwTypeEQ.
func GwType(v int) predicate.Exec {
	return predicate.Exec(sql.FieldEQ(FieldGwType, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.Exec {
	return predicate.Exec(sql.FieldEQ(FieldStatus, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.Exec {
	return predicate.Exec(sql.FieldEQ(FieldVersion, v))
}

// ExecIDEQ applies the EQ predicate on the "exec_id" field.
func ExecIDEQ(v string) predicate.Exec {
	return predicate.Exec(sql.FieldEQ(FieldExecID, v))
}

// ExecIDNEQ applies the NEQ predicate on the "exec_id" field.
func ExecIDNEQ(v string) predicate.Exec {
	return predicate.Exec(sql.FieldNEQ(FieldExecID, v))
}

// ExecIDIn applies the In predicate on the "exec_id" field.
func ExecIDIn(vs ...string) predicate.Exec {
	return predicate.Exec(sql.FieldIn(FieldExecID, vs...))
}

// ExecIDNotIn applies the NotIn predicate on the "exec_id" field.
func ExecIDNotIn(vs ...string) predicate.Exec {
	return predicate.Exec(sql.FieldNotIn(FieldExecID, vs...))
}

// ExecIDGT applies the GT predicate on the "exec_id" field.
func ExecIDGT(v string) predicate.Exec {
	return predicate.Exec(sql.FieldGT(FieldExecID, v))
}

// ExecIDGTE applies the GTE predicate on the "exec_id" field.
func ExecIDGTE(v string) predicate.Exec {
	return predicate.Exec(sql.FieldGTE(FieldExecID, v))
}

// ExecIDLT applies the LT predicate on the "exec_id" field.
func ExecIDLT(v string) predicate.Exec {
	return predicate.Exec(sql.FieldLT(FieldExecID, v))
}

// ExecIDLTE applies the LTE predicate on the "exec_id" field.
func ExecIDLTE(v string) predicate.Exec {
	return predicate.Exec(sql.FieldLTE(FieldExecID, v))
}

// ExecIDContains applies the Contains predicate on the "exec_id" field.
func ExecIDContains(v string) predicate.Exec {
	return predicate.Exec(sql.FieldContains(FieldExecID, v))
}

// ExecIDHasPrefix applies the HasPrefix predicate on the "exec_id" field.
func ExecIDHasPrefix(v string) predicate.Exec {
	return predicate.Exec(sql.FieldHasPrefix(FieldExecID, v))
}

// ExecIDHasSuffix applies the HasSuffix predicate on the "exec_id" field.
func ExecIDHasSuffix(v string) predicate.Exec {
	return predicate.Exec(sql.FieldHasSuffix(FieldExecID, v))
}

// ExecIDEqualFold applies the EqualFold predicate on the "exec_id" field.
func ExecIDEqualFold(v string) predicate.Exec {
	return predicate.Exec(sql.FieldEqualFold(FieldExecID, v))
}

// ExecIDContainsFold applies the ContainsFold predicate on the "exec_id" field.
func ExecIDContainsFold(v string) predicate.Exec {
	return predicate.Exec(sql.FieldContainsFold(FieldExecID, v))
}

// InstIDEQ applies the EQ predicate on the "inst_id" field.
func InstIDEQ(v string) predicate.Exec {
	return predicate.Exec(sql.FieldEQ(FieldInstID, v))
}

// InstIDNEQ applies the NEQ predicate on the "inst_id" field.
func InstIDNEQ(v string) predicate.Exec {
	return predicate.Exec(sql.FieldNEQ(FieldInstID, v))
}

// InstIDIn applies the In predicate on the "inst_id" field.
func InstIDIn(vs ...string) predicate.Exec {
	return predicate.Exec(sql.FieldIn(FieldInstID, vs...))
}

// InstIDNotIn applies the NotIn predicate on the "inst_id" field.
func InstIDNotIn(vs ...string) predicate.Exec {
	return predicate.Exec(sql.FieldNotIn(FieldInstID, vs...))
}

// InstIDGT applies the GT predicate on the "inst_id" field.
func InstIDGT(v string) predicate.Exec {
	return predicate.Exec(sql.FieldGT(FieldInstID, v))
}

// InstIDGTE applies the GTE predicate on the "inst_id" field.
func InstIDGTE(v string) predicate.Exec {
	return predicate.Exec(sql.FieldGTE(FieldInstID, v))
}

// InstIDLT applies the LT predicate on the "inst_id" field.
func InstIDLT(v string) predicate.Exec {
	return predicate.Exec(sql.FieldLT(FieldInstID, v))
}

// InstIDLTE applies the LTE predicate on the "inst_id" field.
func InstIDLTE(v string) predicate.Exec {
	return predicate.Exec(sql.FieldLTE(FieldInstID, v))
}

// InstIDContains applies the Contains predicate on the "inst_id" field.
func InstIDContains(v string) predicate.Exec {
	return predicate.Exec(sql.FieldContains(FieldInstID, v))
}

// InstIDHasPrefix applies the HasPrefix predicate on the "inst_id" field.
func InstIDHasPrefix(v string) predicate.Exec {
	return predicate.Exec(sql.FieldHasPrefix(FieldInstID, v))
}

// InstIDHasSuffix applies the HasSuffix predicate on the "inst_id" field.
func InstIDHasSuffix(v string) predicate.Exec {
	return predicate.Exec(sql.FieldHasSuffix(FieldInstID, v))
}

// InstIDEqualFold applies the EqualFold predicate on the "inst_id" field.
func InstIDEqualFold(v string) predicate.Exec {
	return predicate.Exec(sql.FieldEqualFold(FieldInstID, v))
}

// InstIDContainsFold applies the ContainsFold predicate on the "inst_id" field.
func InstIDContainsFold(v string) predicate.Exec {
	return predicate.Exec(sql.FieldContainsFold(FieldInstID, v))
}

// ParentForkIDEQ applies the EQ predicate on the "parent_fork_id" field.
func ParentForkIDEQ(v string) predicate.Exec {
	return predicate.Exec(sql.FieldEQ(FieldParentForkID, v))
}

// ParentForkIDNEQ applies the NEQ predicate on the "parent_fork_id" field.
func ParentForkIDNEQ(v string) predicate.Exec {
	return predicate.Exec(sql.FieldNEQ(FieldParentForkID, v))
}

// ParentForkIDIn applies the In predicate on the "parent_fork_id" field.
func ParentForkIDIn(vs ...string) predicate.Exec {
	return predicate.Exec(sql.FieldIn(FieldParentForkID, vs...))
}

// ParentForkIDNotIn applies the NotIn predicate on the "parent_fork_id" field.
func ParentForkIDNotIn(vs ...string) predicate.Exec {
	return predicate.Exec(sql.FieldNotIn(FieldParentForkID, vs...))
}

// ParentForkIDGT applies the GT predicate on the "parent_fork_id" field.
func ParentForkIDGT(v string) predicate.Exec {
	return predicate.Exec(sql.FieldGT(FieldParentForkID, v))
}

// ParentForkIDGTE applies the GTE predicate on the "parent_fork_id" field.
func ParentForkIDGTE(v string) predicate.Exec {
	return predicate.Exec(sql.FieldGTE(FieldParentForkID, v))
}

// ParentForkIDLT applies the LT predicate on the "parent_fork_id" field.
func ParentForkIDLT(v string) predicate.Exec {
	return predicate.Exec(sql.FieldLT(FieldParentForkID, v))
}

// ParentForkIDLTE applies the LTE predicate on the "parent_fork_id" field.
func ParentForkIDLTE(v string) predicate.Exec {
	return predicate.Exec(sql.FieldLTE(FieldParentForkID, v))
}

// ParentForkIDContains applies the Contains predicate on the "parent_fork_id" field.
func ParentForkIDContains(v string) predicate.Exec {
	return predicate.Exec(sql.FieldContains(FieldParentForkID, v))
}

// ParentForkIDHasPrefix applies the HasPrefix predicate on the "parent_fork_id" field.
func ParentForkIDHasPrefix(v string) predicate.Exec {
	return predicate.Exec(sql.FieldHasPrefix(FieldParentForkID, v))
}

// ParentForkIDHasSuffix applies the HasSuffix predicate on the "parent_fork_id" field.
func ParentForkIDHasSuffix(v string) predicate.Exec {
	return predicate.Exec(sql.FieldHasSuffix(FieldParentForkID, v))
}

// ParentForkIDEqualFold applies the EqualFold predicate on the "parent_fork_id" field.
func ParentForkIDEqualFold(v string) predicate.Exec {
	return predicate.Exec(sql.FieldEqualFold(FieldParentForkID, v))
}

// ParentForkIDContainsFold applies the ContainsFold predicate on the "parent_fork_id" field.
func ParentForkIDContainsFold(v string) predicate.Exec {
	return predicate.Exec(sql.FieldContainsFold(FieldParentForkID, v))
}

// ForkIDEQ applies the EQ predicate on the "fork_id" field.
func ForkIDEQ(v string) predicate.Exec {
	return predicate.Exec(sql.FieldEQ(FieldForkID, v))
}

// ForkIDNEQ applies the NEQ predicate on the "fork_id" field.
func ForkIDNEQ(v string) predicate.Exec {
	return predicate.Exec(sql.FieldNEQ(FieldForkID, v))
}

// ForkIDIn applies the In predicate on the "fork_id" field.
func ForkIDIn(vs ...string) predicate.Exec {
	return predicate.Exec(sql.FieldIn(FieldForkID, vs...))
}

// ForkIDNotIn applies the NotIn predicate on the "fork_id" field.
func ForkIDNotIn(vs ...string) predicate.Exec {
	return predicate.Exec(sql.FieldNotIn(FieldForkID, vs...))
}

// ForkIDGT applies the GT predicate on the "fork_id" field.
func ForkIDGT(v string) predicate.Exec {
	return predicate.Exec(sql.FieldGT(FieldForkID, v))
}

// ForkIDGTE applies the GTE predicate on the "fork_id" field.
func ForkIDGTE(v string) predicate.Exec {
	return predicate.Exec(sql.FieldGTE(FieldForkID, v))
}

// ForkIDLT applies the LT predicate on the "fork_id" field.
func ForkIDLT(v string) predicate.Exec {
	return predicate.Exec(sql.FieldLT(FieldForkID, v))
}

// ForkIDLTE applies the LTE predicate on the "fork_id" field.
func ForkIDLTE(v string) predicate.Exec {
	return predicate.Exec(sql.FieldLTE(FieldForkID, v))
}

// ForkIDContains applies the Contains predicate on the "fork_id" field.
func ForkIDContains(v string) predicate.Exec {
	return predicate.Exec(sql.FieldContains(FieldForkID, v))
}

// ForkIDHasPrefix applies the HasPrefix predicate on the "fork_id" field.
func ForkIDHasPrefix(v string) predicate.Exec {
	return predicate.Exec(sql.FieldHasPrefix(FieldForkID, v))
}

// ForkIDHasSuffix applies the HasSuffix predicate on the "fork_id" field.
func ForkIDHasSuffix(v string) predicate.Exec {
	return predicate.Exec(sql.FieldHasSuffix(FieldForkID, v))
}

// ForkIDEqualFold applies the EqualFold predicate on the "fork_id" field.
func ForkIDEqualFold(v string) predicate.Exec {
	return predicate.Exec(sql.FieldEqualFold(FieldForkID, v))
}

// ForkIDContainsFold applies the ContainsFold predicate on the "fork_id" field.
func ForkIDContainsFold(v string) predicate.Exec {
	return predicate.Exec(sql.FieldContainsFold(FieldForkID, v))
}

// ForkTagEQ applies the EQ predicate on the "fork_tag" field.
func ForkTagEQ(v string) predicate.Exec {
	return predicate.Exec(sql.FieldEQ(FieldForkTag, v))
}

// ForkTagNEQ applies the NEQ predicate on the "fork_tag" field.
func ForkTagNEQ(v string) predicate.Exec {
	return predicate.Exec(sql.FieldNEQ(FieldForkTag, v))
}

// ForkTagIn applies the In predicate on the "fork_tag" field.
func ForkTagIn(vs ...string) predicate.Exec {
	return predicate.Exec(sql.FieldIn(FieldForkTag, vs...))
}

// ForkTagNotIn applies the NotIn predicate on the "fork_tag" field.
func ForkTagNotIn(vs ...string) predicate.Exec {
	return predicate.Exec(sql.FieldNotIn(FieldForkTag, vs...))
}

// ForkTagGT applies the GT predicate on the "fork_tag" field.
func ForkTagGT(v string) predicate.Exec {
	return predicate.Exec(sql.FieldGT(FieldForkTag, v))
}

// ForkTagGTE applies the GTE predicate on the "fork_tag" field.
func ForkTagGTE(v string) predicate.Exec {
	return predicate.Exec(sql.FieldGTE(FieldForkTag, v))
}

// ForkTagLT applies the LT predicate on the "fork_tag" field.
func ForkTagLT(v string) predicate.Exec {
	return predicate.Exec(sql.FieldLT(FieldForkTag, v))
}

// ForkTagLTE applies the LTE predicate on the "fork_tag" field.
func ForkTagLTE(v string) predicate.Exec {
	return predicate.Exec(sql.FieldLTE(FieldForkTag, v))
}

// ForkTagContains applies the Contains predicate on the "fork_tag" field.
func ForkTagContains(v string) predicate.Exec {
	return predicate.Exec(sql.FieldContains(FieldForkTag, v))
}

// ForkTagHasPrefix applies the HasPrefix predicate on the "fork_tag" field.
func ForkTagHasPrefix(v string) predicate.Exec {
	return predicate.Exec(sql.FieldHasPrefix(FieldForkTag, v))
}

// ForkTagHasSuffix applies the HasSuffix predicate on the "fork_tag" field.
func ForkTagHasSuffix(v string) predicate.Exec {
	return predicate.Exec(sql.FieldHasSuffix(FieldForkTag, v))
}

// ForkTagEqualFold applies the EqualFold predicate on the "fork_tag" field.
func ForkTagEqualFold(v string) predicate.Exec {
	return predicate.Exec(sql.FieldEqualFold(FieldForkTag, v))
}

// ForkTagContainsFold applies the ContainsFold predicate on the "fork_tag" field.
func ForkTagContainsFold(v string) predicate.Exec {
	return predicate.Exec(sql.FieldContainsFold(FieldForkTag, v))
}

// OutTagEQ applies the EQ predicate on the "out_tag" field.
func OutTagEQ(v string) predicate.Exec {
	return predicate.Exec(sql.FieldEQ(FieldOutTag, v))
}

// OutTagNEQ applies the NEQ predicate on the "out_tag" field.
func OutTagNEQ(v string) predicate.Exec {
	return predicate.Exec(sql.FieldNEQ(FieldOutTag, v))
}

// OutTagIn applies the In predicate on the "out_tag" field.
func OutTagIn(vs ...string) predicate.Exec {
	return predicate.Exec(sql.FieldIn(FieldOutTag, vs...))
}

// OutTagNotIn applies the NotIn predicate on the "out_tag" field.
func OutTagNotIn(vs ...string) predicate.Exec {
	return predicate.Exec(sql.FieldNotIn(FieldOutTag, vs...))
}

// OutTagGT applies the GT predicate on the "out_tag" field.
func OutTagGT(v string) predicate.Exec {
	return predicate.Exec(sql.FieldGT(FieldOutTag, v))
}

// OutTagGTE applies the GTE predicate on the "out_tag" field.
func OutTagGTE(v string) predicate.Exec {
	return predicate.Exec(sql.FieldGTE(FieldOutTag, v))
}

// OutTagLT applies the LT predicate on the "out_tag" field.
func OutTagLT(v string) predicate.Exec {
	return predicate.Exec(sql.FieldLT(FieldOutTag, v))
}

// OutTagLTE applies the LTE predicate on the "out_tag" field.
func OutTagLTE(v string) predicate.Exec {
	return predicate.Exec(sql.FieldLTE(FieldOutTag, v))
}

// OutTagContains applies the Contains predicate on the "out_tag" field.
func OutTagContains(v string) predicate.Exec {
	return predicate.Exec(sql.FieldContains(FieldOutTag, v))
}

// OutTagHasPrefix applies the HasPrefix predicate on the "out_tag" field.
func OutTagHasPrefix(v string) predicate.Exec {
	return predicate.Exec(sql.FieldHasPrefix(FieldOutTag, v))
}

// OutTagHasSuffix applies the HasSuffix predicate on the "out_tag" field.
func OutTagHasSuffix(v string) predicate.Exec {
	return predicate.Exec(sql.FieldHasSuffix(FieldOutTag, v))
}

// OutTagEqualFold applies the EqualFold predicate on the "out_tag" field.
func OutTagEqualFold(v string) predicate.Exec {
	return predicate.Exec(sql.FieldEqualFold(FieldOutTag, v))
}

// OutTagContainsFold applies the ContainsFold predicate on the "out_tag" field.
func OutTagContainsFold(v string) predicate.Exec {
	return predicate.Exec(sql.FieldContainsFold(FieldOutTag, v))
}

// JoinTagEQ applies the EQ predicate on the "join_tag" field.
func JoinTagEQ(v string) predicate.Exec {
	return predicate.Exec(sql.FieldEQ(FieldJoinTag, v))
}

// JoinTagNEQ applies the NEQ predicate on the "join_tag" field.
func JoinTagNEQ(v string) predicate.Exec {
	return predicate.Exec(sql.FieldNEQ(FieldJoinTag, v))
}

// JoinTagIn applies the In predicate on the "join_tag" field.
func JoinTagIn(vs ...string) predicate.Exec {
	return predicate.Exec(sql.FieldIn(FieldJoinTag, vs...))
}

// JoinTagNotIn applies the NotIn predicate on the "join_tag" field.
func JoinTagNotIn(vs ...string) predicate.Exec {
	return predicate.Exec(sql.FieldNotIn(FieldJoinTag, vs...))
}

// JoinTagGT applies the GT predicate on the "join_tag" field.
func JoinTagGT(v string) predicate.Exec {
	return predicate.Exec(sql.FieldGT(FieldJoinTag, v))
}

// JoinTagGTE applies the GTE predicate on the "join_tag" field.
func JoinTagGTE(v string) predicate.Exec {
	return predicate.Exec(sql.FieldGTE(FieldJoinTag, v))
}

// JoinTagLT applies the LT predicate on the "join_tag" field.
func JoinTagLT(v string) predicate.Exec {
	return predicate.Exec(sql.FieldLT(FieldJoinTag, v))
}

// JoinTagLTE applies the LTE predicate on the "join_tag" field.
func JoinTagLTE(v string) predicate.Exec {
	return predicate.Exec(sql.FieldLTE(FieldJoinTag, v))
}

// JoinTagContains applies the Contains predicate on the "join_tag" field.
func JoinTagContains(v string) predicate.Exec {
	return predicate.Exec(sql.FieldContains(FieldJoinTag, v))
}

// JoinTagHasPrefix applies the HasPrefix predicate on the "join_tag" field.
func JoinTagHasPrefix(v string) predicate.Exec {
	return predicate.Exec(sql.FieldHasPrefix(FieldJoinTag, v))
}

// JoinTagHasSuffix applies the HasSuffix predicate on the "join_tag" field.
func JoinTagHasSuffix(v string) predicate.Exec {
	return predicate.Exec(sql.FieldHasSuffix(FieldJoinTag, v))
}

// JoinTagIsNil applies the IsNil predicate on the "join_tag" field.
func JoinTagIsNil() predicate.Exec {
	return predicate.Exec(sql.FieldIsNull(FieldJoinTag))
}

// JoinTagNotNil applies the NotNil predicate on the "join_tag" field.
func JoinTagNotNil() predicate.Exec {
	return predicate.Exec(sql.FieldNotNull(FieldJoinTag))
}

// JoinTagEqualFold applies the EqualFold predicate on the "join_tag" field.
func JoinTagEqualFold(v string) predicate.Exec {
	return predicate.Exec(sql.FieldEqualFold(FieldJoinTag, v))
}

// JoinTagContainsFold applies the ContainsFold predicate on the "join_tag" field.
func JoinTagContainsFold(v string) predicate.Exec {
	return predicate.Exec(sql.FieldContainsFold(FieldJoinTag, v))
}

// GwTypeEQ applies the EQ predicate on the "gw_type" field.
func GwTypeEQ(v int) predicate.Exec {
	return predicate.Exec(sql.FieldEQ(FieldGwType, v))
}

// GwTypeNEQ applies the NEQ predicate on the "gw_type" field.
func GwTypeNEQ(v int) predicate.Exec {
	return predicate.Exec(sql.FieldNEQ(FieldGwType, v))
}

// GwTypeIn applies the In predicate on the "gw_type" field.
func GwTypeIn(vs ...int) predicate.Exec {
	return predicate.Exec(sql.FieldIn(FieldGwType, vs...))
}

// GwTypeNotIn applies the NotIn predicate on the "gw_type" field.
func GwTypeNotIn(vs ...int) predicate.Exec {
	return predicate.Exec(sql.FieldNotIn(FieldGwType, vs...))
}

// GwTypeGT applies the GT predicate on the "gw_type" field.
func GwTypeGT(v int) predicate.Exec {
	return predicate.Exec(sql.FieldGT(FieldGwType, v))
}

// GwTypeGTE applies the GTE predicate on the "gw_type" field.
func GwTypeGTE(v int) predicate.Exec {
	return predicate.Exec(sql.FieldGTE(FieldGwType, v))
}

// GwTypeLT applies the LT predicate on the "gw_type" field.
func GwTypeLT(v int) predicate.Exec {
	return predicate.Exec(sql.FieldLT(FieldGwType, v))
}

// GwTypeLTE applies the LTE predicate on the "gw_type" field.
func GwTypeLTE(v int) predicate.Exec {
	return predicate.Exec(sql.FieldLTE(FieldGwType, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.Exec {
	return predicate.Exec(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.Exec {
	return predicate.Exec(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.Exec {
	return predicate.Exec(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.Exec {
	return predicate.Exec(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.Exec {
	return predicate.Exec(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.Exec {
	return predicate.Exec(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.Exec {
	return predicate.Exec(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.Exec {
	return predicate.Exec(sql.FieldLTE(FieldStatus, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.Exec {
	return predicate.Exec(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.Exec {
	return predicate.Exec(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.Exec {
	return predicate.Exec(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.Exec {
	return predicate.Exec(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.Exec {
	return predicate.Exec(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.Exec {
	return predicate.Exec(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.Exec {
	return predicate.Exec(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.Exec {
	return predicate.Exec(sql.FieldLTE(FieldVersion, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Exec) predicate.Exec {
	return predicate.Exec(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Exec) predicate.Exec {
	return predicate.Exec(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Exec) predicate.Exec {
	return predicate.Exec(sql.NotPredicates(p))
}
