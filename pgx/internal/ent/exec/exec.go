// Code generated by ent, DO NOT EDIT.

package exec

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the exec type in the database.
	Label = "exec"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldExecID holds the string denoting the exec_id field in the database.
	FieldExecID = "exec_id"
	// FieldInstID holds the string denoting the inst_id field in the database.
	FieldInstID = "inst_id"
	// FieldParentForkID holds the string denoting the parent_fork_id field in the database.
	FieldParentForkID = "parent_fork_id"
	// FieldForkID holds the string denoting the fork_id field in the database.
	FieldForkID = "fork_id"
	// FieldForkTag holds the string denoting the fork_tag field in the database.
	FieldForkTag = "fork_tag"
	// FieldOutTag holds the string denoting the out_tag field in the database.
	FieldOutTag = "out_tag"
	// FieldJoinTag holds the string denoting the join_tag field in the database.
	FieldJoinTag = "join_tag"
	// FieldGwType holds the string denoting the gw_type field in the database.
	FieldGwType = "gw_type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// Table holds the table name of the exec in the database.
	Table = "loong_exec"
)

// Columns holds all SQL columns for exec fields.
var Columns = []string{
	FieldID,
	FieldExecID,
	FieldInstID,
	FieldParentForkID,
	FieldForkID,
	FieldForkTag,
	FieldOutTag,
	FieldJoinTag,
	FieldGwType,
	FieldStatus,
	FieldVersion,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ExecIDValidator is a validator for the "exec_id" field. It is called by the builders before save.
	ExecIDValidator func(string) error
	// InstIDValidator is a validator for the "inst_id" field. It is called by the builders before save.
	InstIDValidator func(string) error
	// ParentForkIDValidator is a validator for the "parent_fork_id" field. It is called by the builders before save.
	ParentForkIDValidator func(string) error
	// ForkIDValidator is a validator for the "fork_id" field. It is called by the builders before save.
	ForkIDValidator func(string) error
	// ForkTagValidator is a validator for the "fork_tag" field. It is called by the builders before save.
	ForkTagValidator func(string) error
	// OutTagValidator is a validator for the "out_tag" field. It is called by the builders before save.
	OutTagValidator func(string) error
	// JoinTagValidator is a validator for the "join_tag" field. It is called by the builders before save.
	JoinTagValidator func(string) error
	// DefaultGwType holds the default value on creation for the "gw_type" field.
	DefaultGwType int
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Exec queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByExecID orders the results by the exec_id field.
func ByExecID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExecID, opts...).ToFunc()
}

// ByInstID orders the results by the inst_id field.
func ByInstID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstID, opts...).ToFunc()
}

// ByParentForkID orders the results by the parent_fork_id field.
func ByParentForkID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentForkID, opts...).ToFunc()
}

// ByForkID orders the results by the fork_id field.
func ByForkID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldForkID, opts...).ToFunc()
}

// ByForkTag orders the results by the fork_tag field.
func ByForkTag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldForkTag, opts...).ToFunc()
}

// ByOutTag orders the results by the out_tag field.
func ByOutTag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutTag, opts...).ToFunc()
}

// ByJoinTag orders the results by the join_tag field.
func ByJoinTag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJoinTag, opts...).ToFunc()
}

// ByGwType orders the results by the gw_type field.
func ByGwType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGwType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}
