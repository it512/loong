// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/it512/loong"
	"github.com/it512/loong/pgx/internal/ent/inst"
)

// InstCreate is the builder for creating a Inst entity.
type InstCreate struct {
	config
	mutation *InstMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetInstID sets the "inst_id" field.
func (ic *InstCreate) SetInstID(s string) *InstCreate {
	ic.mutation.SetInstID(s)
	return ic
}

// SetProcID sets the "proc_id" field.
func (ic *InstCreate) SetProcID(s string) *InstCreate {
	ic.mutation.SetProcID(s)
	return ic
}

// SetBusiKey sets the "busi_key" field.
func (ic *InstCreate) SetBusiKey(s string) *InstCreate {
	ic.mutation.SetBusiKey(s)
	return ic
}

// SetBusiType sets the "busi_type" field.
func (ic *InstCreate) SetBusiType(s string) *InstCreate {
	ic.mutation.SetBusiType(s)
	return ic
}

// SetStarter sets the "starter" field.
func (ic *InstCreate) SetStarter(s string) *InstCreate {
	ic.mutation.SetStarter(s)
	return ic
}

// SetStartTime sets the "start_time" field.
func (ic *InstCreate) SetStartTime(t time.Time) *InstCreate {
	ic.mutation.SetStartTime(t)
	return ic
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (ic *InstCreate) SetNillableStartTime(t *time.Time) *InstCreate {
	if t != nil {
		ic.SetStartTime(*t)
	}
	return ic
}

// SetEndTime sets the "end_time" field.
func (ic *InstCreate) SetEndTime(t time.Time) *InstCreate {
	ic.mutation.SetEndTime(t)
	return ic
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (ic *InstCreate) SetNillableEndTime(t *time.Time) *InstCreate {
	if t != nil {
		ic.SetEndTime(*t)
	}
	return ic
}

// SetInit sets the "init" field.
func (ic *InstCreate) SetInit(l loong.Var) *InstCreate {
	ic.mutation.SetInit(l)
	return ic
}

// SetStatus sets the "status" field.
func (ic *InstCreate) SetStatus(i int) *InstCreate {
	ic.mutation.SetStatus(i)
	return ic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ic *InstCreate) SetNillableStatus(i *int) *InstCreate {
	if i != nil {
		ic.SetStatus(*i)
	}
	return ic
}

// SetVersion sets the "version" field.
func (ic *InstCreate) SetVersion(i int) *InstCreate {
	ic.mutation.SetVersion(i)
	return ic
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ic *InstCreate) SetNillableVersion(i *int) *InstCreate {
	if i != nil {
		ic.SetVersion(*i)
	}
	return ic
}

// SetID sets the "id" field.
func (ic *InstCreate) SetID(u uuid.UUID) *InstCreate {
	ic.mutation.SetID(u)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *InstCreate) SetNillableID(u *uuid.UUID) *InstCreate {
	if u != nil {
		ic.SetID(*u)
	}
	return ic
}

// Mutation returns the InstMutation object of the builder.
func (ic *InstCreate) Mutation() *InstMutation {
	return ic.mutation
}

// Save creates the Inst in the database.
func (ic *InstCreate) Save(ctx context.Context) (*Inst, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InstCreate) SaveX(ctx context.Context) *Inst {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InstCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InstCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *InstCreate) defaults() {
	if _, ok := ic.mutation.StartTime(); !ok {
		v := inst.DefaultStartTime()
		ic.mutation.SetStartTime(v)
	}
	if _, ok := ic.mutation.Init(); !ok {
		v := inst.DefaultInit
		ic.mutation.SetInit(v)
	}
	if _, ok := ic.mutation.Status(); !ok {
		v := inst.DefaultStatus
		ic.mutation.SetStatus(v)
	}
	if _, ok := ic.mutation.Version(); !ok {
		v := inst.DefaultVersion
		ic.mutation.SetVersion(v)
	}
	if _, ok := ic.mutation.ID(); !ok {
		v := inst.DefaultID()
		ic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InstCreate) check() error {
	if _, ok := ic.mutation.InstID(); !ok {
		return &ValidationError{Name: "inst_id", err: errors.New(`ent: missing required field "Inst.inst_id"`)}
	}
	if v, ok := ic.mutation.InstID(); ok {
		if err := inst.InstIDValidator(v); err != nil {
			return &ValidationError{Name: "inst_id", err: fmt.Errorf(`ent: validator failed for field "Inst.inst_id": %w`, err)}
		}
	}
	if _, ok := ic.mutation.ProcID(); !ok {
		return &ValidationError{Name: "proc_id", err: errors.New(`ent: missing required field "Inst.proc_id"`)}
	}
	if v, ok := ic.mutation.ProcID(); ok {
		if err := inst.ProcIDValidator(v); err != nil {
			return &ValidationError{Name: "proc_id", err: fmt.Errorf(`ent: validator failed for field "Inst.proc_id": %w`, err)}
		}
	}
	if _, ok := ic.mutation.BusiKey(); !ok {
		return &ValidationError{Name: "busi_key", err: errors.New(`ent: missing required field "Inst.busi_key"`)}
	}
	if v, ok := ic.mutation.BusiKey(); ok {
		if err := inst.BusiKeyValidator(v); err != nil {
			return &ValidationError{Name: "busi_key", err: fmt.Errorf(`ent: validator failed for field "Inst.busi_key": %w`, err)}
		}
	}
	if _, ok := ic.mutation.BusiType(); !ok {
		return &ValidationError{Name: "busi_type", err: errors.New(`ent: missing required field "Inst.busi_type"`)}
	}
	if v, ok := ic.mutation.BusiType(); ok {
		if err := inst.BusiTypeValidator(v); err != nil {
			return &ValidationError{Name: "busi_type", err: fmt.Errorf(`ent: validator failed for field "Inst.busi_type": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Starter(); !ok {
		return &ValidationError{Name: "starter", err: errors.New(`ent: missing required field "Inst.starter"`)}
	}
	if v, ok := ic.mutation.Starter(); ok {
		if err := inst.StarterValidator(v); err != nil {
			return &ValidationError{Name: "starter", err: fmt.Errorf(`ent: validator failed for field "Inst.starter": %w`, err)}
		}
	}
	if _, ok := ic.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "Inst.start_time"`)}
	}
	if _, ok := ic.mutation.Init(); !ok {
		return &ValidationError{Name: "init", err: errors.New(`ent: missing required field "Inst.init"`)}
	}
	if _, ok := ic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Inst.status"`)}
	}
	if _, ok := ic.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Inst.version"`)}
	}
	return nil
}

func (ic *InstCreate) sqlSave(ctx context.Context) (*Inst, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *InstCreate) createSpec() (*Inst, *sqlgraph.CreateSpec) {
	var (
		_node = &Inst{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(inst.Table, sqlgraph.NewFieldSpec(inst.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = ic.conflict
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ic.mutation.InstID(); ok {
		_spec.SetField(inst.FieldInstID, field.TypeString, value)
		_node.InstID = value
	}
	if value, ok := ic.mutation.ProcID(); ok {
		_spec.SetField(inst.FieldProcID, field.TypeString, value)
		_node.ProcID = value
	}
	if value, ok := ic.mutation.BusiKey(); ok {
		_spec.SetField(inst.FieldBusiKey, field.TypeString, value)
		_node.BusiKey = value
	}
	if value, ok := ic.mutation.BusiType(); ok {
		_spec.SetField(inst.FieldBusiType, field.TypeString, value)
		_node.BusiType = value
	}
	if value, ok := ic.mutation.Starter(); ok {
		_spec.SetField(inst.FieldStarter, field.TypeString, value)
		_node.Starter = value
	}
	if value, ok := ic.mutation.StartTime(); ok {
		_spec.SetField(inst.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := ic.mutation.EndTime(); ok {
		_spec.SetField(inst.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := ic.mutation.Init(); ok {
		_spec.SetField(inst.FieldInit, field.TypeJSON, value)
		_node.Init = value
	}
	if value, ok := ic.mutation.Status(); ok {
		_spec.SetField(inst.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := ic.mutation.Version(); ok {
		_spec.SetField(inst.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Inst.Create().
//		SetInstID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InstUpsert) {
//			SetInstID(v+v).
//		}).
//		Exec(ctx)
func (ic *InstCreate) OnConflict(opts ...sql.ConflictOption) *InstUpsertOne {
	ic.conflict = opts
	return &InstUpsertOne{
		create: ic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Inst.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ic *InstCreate) OnConflictColumns(columns ...string) *InstUpsertOne {
	ic.conflict = append(ic.conflict, sql.ConflictColumns(columns...))
	return &InstUpsertOne{
		create: ic,
	}
}

type (
	// InstUpsertOne is the builder for "upsert"-ing
	//  one Inst node.
	InstUpsertOne struct {
		create *InstCreate
	}

	// InstUpsert is the "OnConflict" setter.
	InstUpsert struct {
		*sql.UpdateSet
	}
)

// SetEndTime sets the "end_time" field.
func (u *InstUpsert) SetEndTime(v time.Time) *InstUpsert {
	u.Set(inst.FieldEndTime, v)
	return u
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *InstUpsert) UpdateEndTime() *InstUpsert {
	u.SetExcluded(inst.FieldEndTime)
	return u
}

// ClearEndTime clears the value of the "end_time" field.
func (u *InstUpsert) ClearEndTime() *InstUpsert {
	u.SetNull(inst.FieldEndTime)
	return u
}

// SetInit sets the "init" field.
func (u *InstUpsert) SetInit(v loong.Var) *InstUpsert {
	u.Set(inst.FieldInit, v)
	return u
}

// UpdateInit sets the "init" field to the value that was provided on create.
func (u *InstUpsert) UpdateInit() *InstUpsert {
	u.SetExcluded(inst.FieldInit)
	return u
}

// SetStatus sets the "status" field.
func (u *InstUpsert) SetStatus(v int) *InstUpsert {
	u.Set(inst.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *InstUpsert) UpdateStatus() *InstUpsert {
	u.SetExcluded(inst.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *InstUpsert) AddStatus(v int) *InstUpsert {
	u.Add(inst.FieldStatus, v)
	return u
}

// SetVersion sets the "version" field.
func (u *InstUpsert) SetVersion(v int) *InstUpsert {
	u.Set(inst.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *InstUpsert) UpdateVersion() *InstUpsert {
	u.SetExcluded(inst.FieldVersion)
	return u
}

// AddVersion adds v to the "version" field.
func (u *InstUpsert) AddVersion(v int) *InstUpsert {
	u.Add(inst.FieldVersion, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Inst.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(inst.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InstUpsertOne) UpdateNewValues() *InstUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(inst.FieldID)
		}
		if _, exists := u.create.mutation.InstID(); exists {
			s.SetIgnore(inst.FieldInstID)
		}
		if _, exists := u.create.mutation.ProcID(); exists {
			s.SetIgnore(inst.FieldProcID)
		}
		if _, exists := u.create.mutation.BusiKey(); exists {
			s.SetIgnore(inst.FieldBusiKey)
		}
		if _, exists := u.create.mutation.BusiType(); exists {
			s.SetIgnore(inst.FieldBusiType)
		}
		if _, exists := u.create.mutation.Starter(); exists {
			s.SetIgnore(inst.FieldStarter)
		}
		if _, exists := u.create.mutation.StartTime(); exists {
			s.SetIgnore(inst.FieldStartTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Inst.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *InstUpsertOne) Ignore() *InstUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InstUpsertOne) DoNothing() *InstUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InstCreate.OnConflict
// documentation for more info.
func (u *InstUpsertOne) Update(set func(*InstUpsert)) *InstUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InstUpsert{UpdateSet: update})
	}))
	return u
}

// SetEndTime sets the "end_time" field.
func (u *InstUpsertOne) SetEndTime(v time.Time) *InstUpsertOne {
	return u.Update(func(s *InstUpsert) {
		s.SetEndTime(v)
	})
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *InstUpsertOne) UpdateEndTime() *InstUpsertOne {
	return u.Update(func(s *InstUpsert) {
		s.UpdateEndTime()
	})
}

// ClearEndTime clears the value of the "end_time" field.
func (u *InstUpsertOne) ClearEndTime() *InstUpsertOne {
	return u.Update(func(s *InstUpsert) {
		s.ClearEndTime()
	})
}

// SetInit sets the "init" field.
func (u *InstUpsertOne) SetInit(v loong.Var) *InstUpsertOne {
	return u.Update(func(s *InstUpsert) {
		s.SetInit(v)
	})
}

// UpdateInit sets the "init" field to the value that was provided on create.
func (u *InstUpsertOne) UpdateInit() *InstUpsertOne {
	return u.Update(func(s *InstUpsert) {
		s.UpdateInit()
	})
}

// SetStatus sets the "status" field.
func (u *InstUpsertOne) SetStatus(v int) *InstUpsertOne {
	return u.Update(func(s *InstUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *InstUpsertOne) AddStatus(v int) *InstUpsertOne {
	return u.Update(func(s *InstUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *InstUpsertOne) UpdateStatus() *InstUpsertOne {
	return u.Update(func(s *InstUpsert) {
		s.UpdateStatus()
	})
}

// SetVersion sets the "version" field.
func (u *InstUpsertOne) SetVersion(v int) *InstUpsertOne {
	return u.Update(func(s *InstUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *InstUpsertOne) AddVersion(v int) *InstUpsertOne {
	return u.Update(func(s *InstUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *InstUpsertOne) UpdateVersion() *InstUpsertOne {
	return u.Update(func(s *InstUpsert) {
		s.UpdateVersion()
	})
}

// Exec executes the query.
func (u *InstUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InstCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InstUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InstUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: InstUpsertOne.ID is not supported by MySQL driver. Use InstUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InstUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InstCreateBulk is the builder for creating many Inst entities in bulk.
type InstCreateBulk struct {
	config
	err      error
	builders []*InstCreate
	conflict []sql.ConflictOption
}

// Save creates the Inst entities in the database.
func (icb *InstCreateBulk) Save(ctx context.Context) ([]*Inst, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Inst, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InstMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = icb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InstCreateBulk) SaveX(ctx context.Context) []*Inst {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InstCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InstCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Inst.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InstUpsert) {
//			SetInstID(v+v).
//		}).
//		Exec(ctx)
func (icb *InstCreateBulk) OnConflict(opts ...sql.ConflictOption) *InstUpsertBulk {
	icb.conflict = opts
	return &InstUpsertBulk{
		create: icb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Inst.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (icb *InstCreateBulk) OnConflictColumns(columns ...string) *InstUpsertBulk {
	icb.conflict = append(icb.conflict, sql.ConflictColumns(columns...))
	return &InstUpsertBulk{
		create: icb,
	}
}

// InstUpsertBulk is the builder for "upsert"-ing
// a bulk of Inst nodes.
type InstUpsertBulk struct {
	create *InstCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Inst.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(inst.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InstUpsertBulk) UpdateNewValues() *InstUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(inst.FieldID)
			}
			if _, exists := b.mutation.InstID(); exists {
				s.SetIgnore(inst.FieldInstID)
			}
			if _, exists := b.mutation.ProcID(); exists {
				s.SetIgnore(inst.FieldProcID)
			}
			if _, exists := b.mutation.BusiKey(); exists {
				s.SetIgnore(inst.FieldBusiKey)
			}
			if _, exists := b.mutation.BusiType(); exists {
				s.SetIgnore(inst.FieldBusiType)
			}
			if _, exists := b.mutation.Starter(); exists {
				s.SetIgnore(inst.FieldStarter)
			}
			if _, exists := b.mutation.StartTime(); exists {
				s.SetIgnore(inst.FieldStartTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Inst.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *InstUpsertBulk) Ignore() *InstUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InstUpsertBulk) DoNothing() *InstUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InstCreateBulk.OnConflict
// documentation for more info.
func (u *InstUpsertBulk) Update(set func(*InstUpsert)) *InstUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InstUpsert{UpdateSet: update})
	}))
	return u
}

// SetEndTime sets the "end_time" field.
func (u *InstUpsertBulk) SetEndTime(v time.Time) *InstUpsertBulk {
	return u.Update(func(s *InstUpsert) {
		s.SetEndTime(v)
	})
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *InstUpsertBulk) UpdateEndTime() *InstUpsertBulk {
	return u.Update(func(s *InstUpsert) {
		s.UpdateEndTime()
	})
}

// ClearEndTime clears the value of the "end_time" field.
func (u *InstUpsertBulk) ClearEndTime() *InstUpsertBulk {
	return u.Update(func(s *InstUpsert) {
		s.ClearEndTime()
	})
}

// SetInit sets the "init" field.
func (u *InstUpsertBulk) SetInit(v loong.Var) *InstUpsertBulk {
	return u.Update(func(s *InstUpsert) {
		s.SetInit(v)
	})
}

// UpdateInit sets the "init" field to the value that was provided on create.
func (u *InstUpsertBulk) UpdateInit() *InstUpsertBulk {
	return u.Update(func(s *InstUpsert) {
		s.UpdateInit()
	})
}

// SetStatus sets the "status" field.
func (u *InstUpsertBulk) SetStatus(v int) *InstUpsertBulk {
	return u.Update(func(s *InstUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *InstUpsertBulk) AddStatus(v int) *InstUpsertBulk {
	return u.Update(func(s *InstUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *InstUpsertBulk) UpdateStatus() *InstUpsertBulk {
	return u.Update(func(s *InstUpsert) {
		s.UpdateStatus()
	})
}

// SetVersion sets the "version" field.
func (u *InstUpsertBulk) SetVersion(v int) *InstUpsertBulk {
	return u.Update(func(s *InstUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *InstUpsertBulk) AddVersion(v int) *InstUpsertBulk {
	return u.Update(func(s *InstUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *InstUpsertBulk) UpdateVersion() *InstUpsertBulk {
	return u.Update(func(s *InstUpsert) {
		s.UpdateVersion()
	})
}

// Exec executes the query.
func (u *InstUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the InstCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InstCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InstUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
