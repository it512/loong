// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/it512/loong/pgx/internal/ent/exec"
)

// ExecCreate is the builder for creating a Exec entity.
type ExecCreate struct {
	config
	mutation *ExecMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetExecID sets the "exec_id" field.
func (ec *ExecCreate) SetExecID(s string) *ExecCreate {
	ec.mutation.SetExecID(s)
	return ec
}

// SetInstID sets the "inst_id" field.
func (ec *ExecCreate) SetInstID(s string) *ExecCreate {
	ec.mutation.SetInstID(s)
	return ec
}

// SetParentForkID sets the "parent_fork_id" field.
func (ec *ExecCreate) SetParentForkID(s string) *ExecCreate {
	ec.mutation.SetParentForkID(s)
	return ec
}

// SetForkID sets the "fork_id" field.
func (ec *ExecCreate) SetForkID(s string) *ExecCreate {
	ec.mutation.SetForkID(s)
	return ec
}

// SetForkTag sets the "fork_tag" field.
func (ec *ExecCreate) SetForkTag(s string) *ExecCreate {
	ec.mutation.SetForkTag(s)
	return ec
}

// SetOutTag sets the "out_tag" field.
func (ec *ExecCreate) SetOutTag(s string) *ExecCreate {
	ec.mutation.SetOutTag(s)
	return ec
}

// SetJoinTag sets the "join_tag" field.
func (ec *ExecCreate) SetJoinTag(s string) *ExecCreate {
	ec.mutation.SetJoinTag(s)
	return ec
}

// SetNillableJoinTag sets the "join_tag" field if the given value is not nil.
func (ec *ExecCreate) SetNillableJoinTag(s *string) *ExecCreate {
	if s != nil {
		ec.SetJoinTag(*s)
	}
	return ec
}

// SetGwType sets the "gw_type" field.
func (ec *ExecCreate) SetGwType(i int) *ExecCreate {
	ec.mutation.SetGwType(i)
	return ec
}

// SetNillableGwType sets the "gw_type" field if the given value is not nil.
func (ec *ExecCreate) SetNillableGwType(i *int) *ExecCreate {
	if i != nil {
		ec.SetGwType(*i)
	}
	return ec
}

// SetStatus sets the "status" field.
func (ec *ExecCreate) SetStatus(i int) *ExecCreate {
	ec.mutation.SetStatus(i)
	return ec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ec *ExecCreate) SetNillableStatus(i *int) *ExecCreate {
	if i != nil {
		ec.SetStatus(*i)
	}
	return ec
}

// SetVersion sets the "version" field.
func (ec *ExecCreate) SetVersion(i int) *ExecCreate {
	ec.mutation.SetVersion(i)
	return ec
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ec *ExecCreate) SetNillableVersion(i *int) *ExecCreate {
	if i != nil {
		ec.SetVersion(*i)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *ExecCreate) SetID(u uuid.UUID) *ExecCreate {
	ec.mutation.SetID(u)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *ExecCreate) SetNillableID(u *uuid.UUID) *ExecCreate {
	if u != nil {
		ec.SetID(*u)
	}
	return ec
}

// Mutation returns the ExecMutation object of the builder.
func (ec *ExecCreate) Mutation() *ExecMutation {
	return ec.mutation
}

// Save creates the Exec in the database.
func (ec *ExecCreate) Save(ctx context.Context) (*Exec, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ExecCreate) SaveX(ctx context.Context) *Exec {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *ExecCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *ExecCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *ExecCreate) defaults() {
	if _, ok := ec.mutation.GwType(); !ok {
		v := exec.DefaultGwType
		ec.mutation.SetGwType(v)
	}
	if _, ok := ec.mutation.Status(); !ok {
		v := exec.DefaultStatus
		ec.mutation.SetStatus(v)
	}
	if _, ok := ec.mutation.Version(); !ok {
		v := exec.DefaultVersion
		ec.mutation.SetVersion(v)
	}
	if _, ok := ec.mutation.ID(); !ok {
		v := exec.DefaultID()
		ec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *ExecCreate) check() error {
	if _, ok := ec.mutation.ExecID(); !ok {
		return &ValidationError{Name: "exec_id", err: errors.New(`ent: missing required field "Exec.exec_id"`)}
	}
	if v, ok := ec.mutation.ExecID(); ok {
		if err := exec.ExecIDValidator(v); err != nil {
			return &ValidationError{Name: "exec_id", err: fmt.Errorf(`ent: validator failed for field "Exec.exec_id": %w`, err)}
		}
	}
	if _, ok := ec.mutation.InstID(); !ok {
		return &ValidationError{Name: "inst_id", err: errors.New(`ent: missing required field "Exec.inst_id"`)}
	}
	if v, ok := ec.mutation.InstID(); ok {
		if err := exec.InstIDValidator(v); err != nil {
			return &ValidationError{Name: "inst_id", err: fmt.Errorf(`ent: validator failed for field "Exec.inst_id": %w`, err)}
		}
	}
	if _, ok := ec.mutation.ParentForkID(); !ok {
		return &ValidationError{Name: "parent_fork_id", err: errors.New(`ent: missing required field "Exec.parent_fork_id"`)}
	}
	if v, ok := ec.mutation.ParentForkID(); ok {
		if err := exec.ParentForkIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_fork_id", err: fmt.Errorf(`ent: validator failed for field "Exec.parent_fork_id": %w`, err)}
		}
	}
	if _, ok := ec.mutation.ForkID(); !ok {
		return &ValidationError{Name: "fork_id", err: errors.New(`ent: missing required field "Exec.fork_id"`)}
	}
	if v, ok := ec.mutation.ForkID(); ok {
		if err := exec.ForkIDValidator(v); err != nil {
			return &ValidationError{Name: "fork_id", err: fmt.Errorf(`ent: validator failed for field "Exec.fork_id": %w`, err)}
		}
	}
	if _, ok := ec.mutation.ForkTag(); !ok {
		return &ValidationError{Name: "fork_tag", err: errors.New(`ent: missing required field "Exec.fork_tag"`)}
	}
	if v, ok := ec.mutation.ForkTag(); ok {
		if err := exec.ForkTagValidator(v); err != nil {
			return &ValidationError{Name: "fork_tag", err: fmt.Errorf(`ent: validator failed for field "Exec.fork_tag": %w`, err)}
		}
	}
	if _, ok := ec.mutation.OutTag(); !ok {
		return &ValidationError{Name: "out_tag", err: errors.New(`ent: missing required field "Exec.out_tag"`)}
	}
	if v, ok := ec.mutation.OutTag(); ok {
		if err := exec.OutTagValidator(v); err != nil {
			return &ValidationError{Name: "out_tag", err: fmt.Errorf(`ent: validator failed for field "Exec.out_tag": %w`, err)}
		}
	}
	if v, ok := ec.mutation.JoinTag(); ok {
		if err := exec.JoinTagValidator(v); err != nil {
			return &ValidationError{Name: "join_tag", err: fmt.Errorf(`ent: validator failed for field "Exec.join_tag": %w`, err)}
		}
	}
	if _, ok := ec.mutation.GwType(); !ok {
		return &ValidationError{Name: "gw_type", err: errors.New(`ent: missing required field "Exec.gw_type"`)}
	}
	if _, ok := ec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Exec.status"`)}
	}
	if _, ok := ec.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Exec.version"`)}
	}
	return nil
}

func (ec *ExecCreate) sqlSave(ctx context.Context) (*Exec, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *ExecCreate) createSpec() (*Exec, *sqlgraph.CreateSpec) {
	var (
		_node = &Exec{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(exec.Table, sqlgraph.NewFieldSpec(exec.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = ec.conflict
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ec.mutation.ExecID(); ok {
		_spec.SetField(exec.FieldExecID, field.TypeString, value)
		_node.ExecID = value
	}
	if value, ok := ec.mutation.InstID(); ok {
		_spec.SetField(exec.FieldInstID, field.TypeString, value)
		_node.InstID = value
	}
	if value, ok := ec.mutation.ParentForkID(); ok {
		_spec.SetField(exec.FieldParentForkID, field.TypeString, value)
		_node.ParentForkID = value
	}
	if value, ok := ec.mutation.ForkID(); ok {
		_spec.SetField(exec.FieldForkID, field.TypeString, value)
		_node.ForkID = value
	}
	if value, ok := ec.mutation.ForkTag(); ok {
		_spec.SetField(exec.FieldForkTag, field.TypeString, value)
		_node.ForkTag = value
	}
	if value, ok := ec.mutation.OutTag(); ok {
		_spec.SetField(exec.FieldOutTag, field.TypeString, value)
		_node.OutTag = value
	}
	if value, ok := ec.mutation.JoinTag(); ok {
		_spec.SetField(exec.FieldJoinTag, field.TypeString, value)
		_node.JoinTag = value
	}
	if value, ok := ec.mutation.GwType(); ok {
		_spec.SetField(exec.FieldGwType, field.TypeInt, value)
		_node.GwType = value
	}
	if value, ok := ec.mutation.Status(); ok {
		_spec.SetField(exec.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := ec.mutation.Version(); ok {
		_spec.SetField(exec.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Exec.Create().
//		SetExecID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExecUpsert) {
//			SetExecID(v+v).
//		}).
//		Exec(ctx)
func (ec *ExecCreate) OnConflict(opts ...sql.ConflictOption) *ExecUpsertOne {
	ec.conflict = opts
	return &ExecUpsertOne{
		create: ec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Exec.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ec *ExecCreate) OnConflictColumns(columns ...string) *ExecUpsertOne {
	ec.conflict = append(ec.conflict, sql.ConflictColumns(columns...))
	return &ExecUpsertOne{
		create: ec,
	}
}

type (
	// ExecUpsertOne is the builder for "upsert"-ing
	//  one Exec node.
	ExecUpsertOne struct {
		create *ExecCreate
	}

	// ExecUpsert is the "OnConflict" setter.
	ExecUpsert struct {
		*sql.UpdateSet
	}
)

// SetJoinTag sets the "join_tag" field.
func (u *ExecUpsert) SetJoinTag(v string) *ExecUpsert {
	u.Set(exec.FieldJoinTag, v)
	return u
}

// UpdateJoinTag sets the "join_tag" field to the value that was provided on create.
func (u *ExecUpsert) UpdateJoinTag() *ExecUpsert {
	u.SetExcluded(exec.FieldJoinTag)
	return u
}

// ClearJoinTag clears the value of the "join_tag" field.
func (u *ExecUpsert) ClearJoinTag() *ExecUpsert {
	u.SetNull(exec.FieldJoinTag)
	return u
}

// SetGwType sets the "gw_type" field.
func (u *ExecUpsert) SetGwType(v int) *ExecUpsert {
	u.Set(exec.FieldGwType, v)
	return u
}

// UpdateGwType sets the "gw_type" field to the value that was provided on create.
func (u *ExecUpsert) UpdateGwType() *ExecUpsert {
	u.SetExcluded(exec.FieldGwType)
	return u
}

// AddGwType adds v to the "gw_type" field.
func (u *ExecUpsert) AddGwType(v int) *ExecUpsert {
	u.Add(exec.FieldGwType, v)
	return u
}

// SetStatus sets the "status" field.
func (u *ExecUpsert) SetStatus(v int) *ExecUpsert {
	u.Set(exec.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ExecUpsert) UpdateStatus() *ExecUpsert {
	u.SetExcluded(exec.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *ExecUpsert) AddStatus(v int) *ExecUpsert {
	u.Add(exec.FieldStatus, v)
	return u
}

// SetVersion sets the "version" field.
func (u *ExecUpsert) SetVersion(v int) *ExecUpsert {
	u.Set(exec.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ExecUpsert) UpdateVersion() *ExecUpsert {
	u.SetExcluded(exec.FieldVersion)
	return u
}

// AddVersion adds v to the "version" field.
func (u *ExecUpsert) AddVersion(v int) *ExecUpsert {
	u.Add(exec.FieldVersion, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Exec.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(exec.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ExecUpsertOne) UpdateNewValues() *ExecUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(exec.FieldID)
		}
		if _, exists := u.create.mutation.ExecID(); exists {
			s.SetIgnore(exec.FieldExecID)
		}
		if _, exists := u.create.mutation.InstID(); exists {
			s.SetIgnore(exec.FieldInstID)
		}
		if _, exists := u.create.mutation.ParentForkID(); exists {
			s.SetIgnore(exec.FieldParentForkID)
		}
		if _, exists := u.create.mutation.ForkID(); exists {
			s.SetIgnore(exec.FieldForkID)
		}
		if _, exists := u.create.mutation.ForkTag(); exists {
			s.SetIgnore(exec.FieldForkTag)
		}
		if _, exists := u.create.mutation.OutTag(); exists {
			s.SetIgnore(exec.FieldOutTag)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Exec.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ExecUpsertOne) Ignore() *ExecUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExecUpsertOne) DoNothing() *ExecUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExecCreate.OnConflict
// documentation for more info.
func (u *ExecUpsertOne) Update(set func(*ExecUpsert)) *ExecUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExecUpsert{UpdateSet: update})
	}))
	return u
}

// SetJoinTag sets the "join_tag" field.
func (u *ExecUpsertOne) SetJoinTag(v string) *ExecUpsertOne {
	return u.Update(func(s *ExecUpsert) {
		s.SetJoinTag(v)
	})
}

// UpdateJoinTag sets the "join_tag" field to the value that was provided on create.
func (u *ExecUpsertOne) UpdateJoinTag() *ExecUpsertOne {
	return u.Update(func(s *ExecUpsert) {
		s.UpdateJoinTag()
	})
}

// ClearJoinTag clears the value of the "join_tag" field.
func (u *ExecUpsertOne) ClearJoinTag() *ExecUpsertOne {
	return u.Update(func(s *ExecUpsert) {
		s.ClearJoinTag()
	})
}

// SetGwType sets the "gw_type" field.
func (u *ExecUpsertOne) SetGwType(v int) *ExecUpsertOne {
	return u.Update(func(s *ExecUpsert) {
		s.SetGwType(v)
	})
}

// AddGwType adds v to the "gw_type" field.
func (u *ExecUpsertOne) AddGwType(v int) *ExecUpsertOne {
	return u.Update(func(s *ExecUpsert) {
		s.AddGwType(v)
	})
}

// UpdateGwType sets the "gw_type" field to the value that was provided on create.
func (u *ExecUpsertOne) UpdateGwType() *ExecUpsertOne {
	return u.Update(func(s *ExecUpsert) {
		s.UpdateGwType()
	})
}

// SetStatus sets the "status" field.
func (u *ExecUpsertOne) SetStatus(v int) *ExecUpsertOne {
	return u.Update(func(s *ExecUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *ExecUpsertOne) AddStatus(v int) *ExecUpsertOne {
	return u.Update(func(s *ExecUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ExecUpsertOne) UpdateStatus() *ExecUpsertOne {
	return u.Update(func(s *ExecUpsert) {
		s.UpdateStatus()
	})
}

// SetVersion sets the "version" field.
func (u *ExecUpsertOne) SetVersion(v int) *ExecUpsertOne {
	return u.Update(func(s *ExecUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *ExecUpsertOne) AddVersion(v int) *ExecUpsertOne {
	return u.Update(func(s *ExecUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ExecUpsertOne) UpdateVersion() *ExecUpsertOne {
	return u.Update(func(s *ExecUpsert) {
		s.UpdateVersion()
	})
}

// Exec executes the query.
func (u *ExecUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ExecCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExecUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ExecUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ExecUpsertOne.ID is not supported by MySQL driver. Use ExecUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ExecUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ExecCreateBulk is the builder for creating many Exec entities in bulk.
type ExecCreateBulk struct {
	config
	err      error
	builders []*ExecCreate
	conflict []sql.ConflictOption
}

// Save creates the Exec entities in the database.
func (ecb *ExecCreateBulk) Save(ctx context.Context) ([]*Exec, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Exec, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExecMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *ExecCreateBulk) SaveX(ctx context.Context) []*Exec {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *ExecCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *ExecCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Exec.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExecUpsert) {
//			SetExecID(v+v).
//		}).
//		Exec(ctx)
func (ecb *ExecCreateBulk) OnConflict(opts ...sql.ConflictOption) *ExecUpsertBulk {
	ecb.conflict = opts
	return &ExecUpsertBulk{
		create: ecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Exec.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ecb *ExecCreateBulk) OnConflictColumns(columns ...string) *ExecUpsertBulk {
	ecb.conflict = append(ecb.conflict, sql.ConflictColumns(columns...))
	return &ExecUpsertBulk{
		create: ecb,
	}
}

// ExecUpsertBulk is the builder for "upsert"-ing
// a bulk of Exec nodes.
type ExecUpsertBulk struct {
	create *ExecCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Exec.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(exec.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ExecUpsertBulk) UpdateNewValues() *ExecUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(exec.FieldID)
			}
			if _, exists := b.mutation.ExecID(); exists {
				s.SetIgnore(exec.FieldExecID)
			}
			if _, exists := b.mutation.InstID(); exists {
				s.SetIgnore(exec.FieldInstID)
			}
			if _, exists := b.mutation.ParentForkID(); exists {
				s.SetIgnore(exec.FieldParentForkID)
			}
			if _, exists := b.mutation.ForkID(); exists {
				s.SetIgnore(exec.FieldForkID)
			}
			if _, exists := b.mutation.ForkTag(); exists {
				s.SetIgnore(exec.FieldForkTag)
			}
			if _, exists := b.mutation.OutTag(); exists {
				s.SetIgnore(exec.FieldOutTag)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Exec.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ExecUpsertBulk) Ignore() *ExecUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExecUpsertBulk) DoNothing() *ExecUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExecCreateBulk.OnConflict
// documentation for more info.
func (u *ExecUpsertBulk) Update(set func(*ExecUpsert)) *ExecUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExecUpsert{UpdateSet: update})
	}))
	return u
}

// SetJoinTag sets the "join_tag" field.
func (u *ExecUpsertBulk) SetJoinTag(v string) *ExecUpsertBulk {
	return u.Update(func(s *ExecUpsert) {
		s.SetJoinTag(v)
	})
}

// UpdateJoinTag sets the "join_tag" field to the value that was provided on create.
func (u *ExecUpsertBulk) UpdateJoinTag() *ExecUpsertBulk {
	return u.Update(func(s *ExecUpsert) {
		s.UpdateJoinTag()
	})
}

// ClearJoinTag clears the value of the "join_tag" field.
func (u *ExecUpsertBulk) ClearJoinTag() *ExecUpsertBulk {
	return u.Update(func(s *ExecUpsert) {
		s.ClearJoinTag()
	})
}

// SetGwType sets the "gw_type" field.
func (u *ExecUpsertBulk) SetGwType(v int) *ExecUpsertBulk {
	return u.Update(func(s *ExecUpsert) {
		s.SetGwType(v)
	})
}

// AddGwType adds v to the "gw_type" field.
func (u *ExecUpsertBulk) AddGwType(v int) *ExecUpsertBulk {
	return u.Update(func(s *ExecUpsert) {
		s.AddGwType(v)
	})
}

// UpdateGwType sets the "gw_type" field to the value that was provided on create.
func (u *ExecUpsertBulk) UpdateGwType() *ExecUpsertBulk {
	return u.Update(func(s *ExecUpsert) {
		s.UpdateGwType()
	})
}

// SetStatus sets the "status" field.
func (u *ExecUpsertBulk) SetStatus(v int) *ExecUpsertBulk {
	return u.Update(func(s *ExecUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *ExecUpsertBulk) AddStatus(v int) *ExecUpsertBulk {
	return u.Update(func(s *ExecUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ExecUpsertBulk) UpdateStatus() *ExecUpsertBulk {
	return u.Update(func(s *ExecUpsert) {
		s.UpdateStatus()
	})
}

// SetVersion sets the "version" field.
func (u *ExecUpsertBulk) SetVersion(v int) *ExecUpsertBulk {
	return u.Update(func(s *ExecUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *ExecUpsertBulk) AddVersion(v int) *ExecUpsertBulk {
	return u.Update(func(s *ExecUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ExecUpsertBulk) UpdateVersion() *ExecUpsertBulk {
	return u.Update(func(s *ExecUpsert) {
		s.UpdateVersion()
	})
}

// Exec executes the query.
func (u *ExecUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ExecCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ExecCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExecUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
