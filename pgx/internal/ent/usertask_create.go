// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/it512/loong"
	"github.com/it512/loong/pgx/internal/ent/usertask"
)

// UserTaskCreate is the builder for creating a UserTask entity.
type UserTaskCreate struct {
	config
	mutation *UserTaskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTaskID sets the "task_id" field.
func (utc *UserTaskCreate) SetTaskID(s string) *UserTaskCreate {
	utc.mutation.SetTaskID(s)
	return utc
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (utc *UserTaskCreate) SetNillableTaskID(s *string) *UserTaskCreate {
	if s != nil {
		utc.SetTaskID(*s)
	}
	return utc
}

// SetInstID sets the "inst_id" field.
func (utc *UserTaskCreate) SetInstID(s string) *UserTaskCreate {
	utc.mutation.SetInstID(s)
	return utc
}

// SetExecID sets the "exec_id" field.
func (utc *UserTaskCreate) SetExecID(s string) *UserTaskCreate {
	utc.mutation.SetExecID(s)
	return utc
}

// SetNillableExecID sets the "exec_id" field if the given value is not nil.
func (utc *UserTaskCreate) SetNillableExecID(s *string) *UserTaskCreate {
	if s != nil {
		utc.SetExecID(*s)
	}
	return utc
}

// SetBusiKey sets the "busi_key" field.
func (utc *UserTaskCreate) SetBusiKey(s string) *UserTaskCreate {
	utc.mutation.SetBusiKey(s)
	return utc
}

// SetBusiType sets the "busi_type" field.
func (utc *UserTaskCreate) SetBusiType(s string) *UserTaskCreate {
	utc.mutation.SetBusiType(s)
	return utc
}

// SetFormKey sets the "form_key" field.
func (utc *UserTaskCreate) SetFormKey(s string) *UserTaskCreate {
	utc.mutation.SetFormKey(s)
	return utc
}

// SetNillableFormKey sets the "form_key" field if the given value is not nil.
func (utc *UserTaskCreate) SetNillableFormKey(s *string) *UserTaskCreate {
	if s != nil {
		utc.SetFormKey(*s)
	}
	return utc
}

// SetActID sets the "act_id" field.
func (utc *UserTaskCreate) SetActID(s string) *UserTaskCreate {
	utc.mutation.SetActID(s)
	return utc
}

// SetActName sets the "act_name" field.
func (utc *UserTaskCreate) SetActName(s string) *UserTaskCreate {
	utc.mutation.SetActName(s)
	return utc
}

// SetNillableActName sets the "act_name" field if the given value is not nil.
func (utc *UserTaskCreate) SetNillableActName(s *string) *UserTaskCreate {
	if s != nil {
		utc.SetActName(*s)
	}
	return utc
}

// SetOwner sets the "owner" field.
func (utc *UserTaskCreate) SetOwner(s string) *UserTaskCreate {
	utc.mutation.SetOwner(s)
	return utc
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (utc *UserTaskCreate) SetNillableOwner(s *string) *UserTaskCreate {
	if s != nil {
		utc.SetOwner(*s)
	}
	return utc
}

// SetAssignee sets the "assignee" field.
func (utc *UserTaskCreate) SetAssignee(s string) *UserTaskCreate {
	utc.mutation.SetAssignee(s)
	return utc
}

// SetNillableAssignee sets the "assignee" field if the given value is not nil.
func (utc *UserTaskCreate) SetNillableAssignee(s *string) *UserTaskCreate {
	if s != nil {
		utc.SetAssignee(*s)
	}
	return utc
}

// SetCandidateUsers sets the "candidate_users" field.
func (utc *UserTaskCreate) SetCandidateUsers(s string) *UserTaskCreate {
	utc.mutation.SetCandidateUsers(s)
	return utc
}

// SetNillableCandidateUsers sets the "candidate_users" field if the given value is not nil.
func (utc *UserTaskCreate) SetNillableCandidateUsers(s *string) *UserTaskCreate {
	if s != nil {
		utc.SetCandidateUsers(*s)
	}
	return utc
}

// SetCandidateGroups sets the "candidate_groups" field.
func (utc *UserTaskCreate) SetCandidateGroups(s string) *UserTaskCreate {
	utc.mutation.SetCandidateGroups(s)
	return utc
}

// SetNillableCandidateGroups sets the "candidate_groups" field if the given value is not nil.
func (utc *UserTaskCreate) SetNillableCandidateGroups(s *string) *UserTaskCreate {
	if s != nil {
		utc.SetCandidateGroups(*s)
	}
	return utc
}

// SetOperator sets the "operator" field.
func (utc *UserTaskCreate) SetOperator(s string) *UserTaskCreate {
	utc.mutation.SetOperator(s)
	return utc
}

// SetNillableOperator sets the "operator" field if the given value is not nil.
func (utc *UserTaskCreate) SetNillableOperator(s *string) *UserTaskCreate {
	if s != nil {
		utc.SetOperator(*s)
	}
	return utc
}

// SetInput sets the "input" field.
func (utc *UserTaskCreate) SetInput(l loong.Var) *UserTaskCreate {
	utc.mutation.SetInput(l)
	return utc
}

// SetBatchNo sets the "batch_no" field.
func (utc *UserTaskCreate) SetBatchNo(s string) *UserTaskCreate {
	utc.mutation.SetBatchNo(s)
	return utc
}

// SetResult sets the "result" field.
func (utc *UserTaskCreate) SetResult(i int) *UserTaskCreate {
	utc.mutation.SetResult(i)
	return utc
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (utc *UserTaskCreate) SetNillableResult(i *int) *UserTaskCreate {
	if i != nil {
		utc.SetResult(*i)
	}
	return utc
}

// SetStartTime sets the "start_time" field.
func (utc *UserTaskCreate) SetStartTime(t time.Time) *UserTaskCreate {
	utc.mutation.SetStartTime(t)
	return utc
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (utc *UserTaskCreate) SetNillableStartTime(t *time.Time) *UserTaskCreate {
	if t != nil {
		utc.SetStartTime(*t)
	}
	return utc
}

// SetEndTime sets the "end_time" field.
func (utc *UserTaskCreate) SetEndTime(t time.Time) *UserTaskCreate {
	utc.mutation.SetEndTime(t)
	return utc
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (utc *UserTaskCreate) SetNillableEndTime(t *time.Time) *UserTaskCreate {
	if t != nil {
		utc.SetEndTime(*t)
	}
	return utc
}

// SetStatus sets the "status" field.
func (utc *UserTaskCreate) SetStatus(i int) *UserTaskCreate {
	utc.mutation.SetStatus(i)
	return utc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (utc *UserTaskCreate) SetNillableStatus(i *int) *UserTaskCreate {
	if i != nil {
		utc.SetStatus(*i)
	}
	return utc
}

// SetVersion sets the "version" field.
func (utc *UserTaskCreate) SetVersion(i int) *UserTaskCreate {
	utc.mutation.SetVersion(i)
	return utc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (utc *UserTaskCreate) SetNillableVersion(i *int) *UserTaskCreate {
	if i != nil {
		utc.SetVersion(*i)
	}
	return utc
}

// SetID sets the "id" field.
func (utc *UserTaskCreate) SetID(u uuid.UUID) *UserTaskCreate {
	utc.mutation.SetID(u)
	return utc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (utc *UserTaskCreate) SetNillableID(u *uuid.UUID) *UserTaskCreate {
	if u != nil {
		utc.SetID(*u)
	}
	return utc
}

// Mutation returns the UserTaskMutation object of the builder.
func (utc *UserTaskCreate) Mutation() *UserTaskMutation {
	return utc.mutation
}

// Save creates the UserTask in the database.
func (utc *UserTaskCreate) Save(ctx context.Context) (*UserTask, error) {
	utc.defaults()
	return withHooks(ctx, utc.sqlSave, utc.mutation, utc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (utc *UserTaskCreate) SaveX(ctx context.Context) *UserTask {
	v, err := utc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utc *UserTaskCreate) Exec(ctx context.Context) error {
	_, err := utc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utc *UserTaskCreate) ExecX(ctx context.Context) {
	if err := utc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (utc *UserTaskCreate) defaults() {
	if _, ok := utc.mutation.TaskID(); !ok {
		v := usertask.DefaultTaskID()
		utc.mutation.SetTaskID(v)
	}
	if _, ok := utc.mutation.Input(); !ok {
		v := usertask.DefaultInput
		utc.mutation.SetInput(v)
	}
	if _, ok := utc.mutation.Result(); !ok {
		v := usertask.DefaultResult
		utc.mutation.SetResult(v)
	}
	if _, ok := utc.mutation.StartTime(); !ok {
		v := usertask.DefaultStartTime()
		utc.mutation.SetStartTime(v)
	}
	if _, ok := utc.mutation.Status(); !ok {
		v := usertask.DefaultStatus
		utc.mutation.SetStatus(v)
	}
	if _, ok := utc.mutation.Version(); !ok {
		v := usertask.DefaultVersion
		utc.mutation.SetVersion(v)
	}
	if _, ok := utc.mutation.ID(); !ok {
		v := usertask.DefaultID()
		utc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utc *UserTaskCreate) check() error {
	if _, ok := utc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task_id", err: errors.New(`ent: missing required field "UserTask.task_id"`)}
	}
	if v, ok := utc.mutation.TaskID(); ok {
		if err := usertask.TaskIDValidator(v); err != nil {
			return &ValidationError{Name: "task_id", err: fmt.Errorf(`ent: validator failed for field "UserTask.task_id": %w`, err)}
		}
	}
	if _, ok := utc.mutation.InstID(); !ok {
		return &ValidationError{Name: "inst_id", err: errors.New(`ent: missing required field "UserTask.inst_id"`)}
	}
	if v, ok := utc.mutation.InstID(); ok {
		if err := usertask.InstIDValidator(v); err != nil {
			return &ValidationError{Name: "inst_id", err: fmt.Errorf(`ent: validator failed for field "UserTask.inst_id": %w`, err)}
		}
	}
	if v, ok := utc.mutation.ExecID(); ok {
		if err := usertask.ExecIDValidator(v); err != nil {
			return &ValidationError{Name: "exec_id", err: fmt.Errorf(`ent: validator failed for field "UserTask.exec_id": %w`, err)}
		}
	}
	if _, ok := utc.mutation.BusiKey(); !ok {
		return &ValidationError{Name: "busi_key", err: errors.New(`ent: missing required field "UserTask.busi_key"`)}
	}
	if v, ok := utc.mutation.BusiKey(); ok {
		if err := usertask.BusiKeyValidator(v); err != nil {
			return &ValidationError{Name: "busi_key", err: fmt.Errorf(`ent: validator failed for field "UserTask.busi_key": %w`, err)}
		}
	}
	if _, ok := utc.mutation.BusiType(); !ok {
		return &ValidationError{Name: "busi_type", err: errors.New(`ent: missing required field "UserTask.busi_type"`)}
	}
	if v, ok := utc.mutation.BusiType(); ok {
		if err := usertask.BusiTypeValidator(v); err != nil {
			return &ValidationError{Name: "busi_type", err: fmt.Errorf(`ent: validator failed for field "UserTask.busi_type": %w`, err)}
		}
	}
	if v, ok := utc.mutation.FormKey(); ok {
		if err := usertask.FormKeyValidator(v); err != nil {
			return &ValidationError{Name: "form_key", err: fmt.Errorf(`ent: validator failed for field "UserTask.form_key": %w`, err)}
		}
	}
	if _, ok := utc.mutation.ActID(); !ok {
		return &ValidationError{Name: "act_id", err: errors.New(`ent: missing required field "UserTask.act_id"`)}
	}
	if v, ok := utc.mutation.ActID(); ok {
		if err := usertask.ActIDValidator(v); err != nil {
			return &ValidationError{Name: "act_id", err: fmt.Errorf(`ent: validator failed for field "UserTask.act_id": %w`, err)}
		}
	}
	if v, ok := utc.mutation.ActName(); ok {
		if err := usertask.ActNameValidator(v); err != nil {
			return &ValidationError{Name: "act_name", err: fmt.Errorf(`ent: validator failed for field "UserTask.act_name": %w`, err)}
		}
	}
	if v, ok := utc.mutation.Owner(); ok {
		if err := usertask.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf(`ent: validator failed for field "UserTask.owner": %w`, err)}
		}
	}
	if v, ok := utc.mutation.Assignee(); ok {
		if err := usertask.AssigneeValidator(v); err != nil {
			return &ValidationError{Name: "assignee", err: fmt.Errorf(`ent: validator failed for field "UserTask.assignee": %w`, err)}
		}
	}
	if v, ok := utc.mutation.CandidateUsers(); ok {
		if err := usertask.CandidateUsersValidator(v); err != nil {
			return &ValidationError{Name: "candidate_users", err: fmt.Errorf(`ent: validator failed for field "UserTask.candidate_users": %w`, err)}
		}
	}
	if v, ok := utc.mutation.CandidateGroups(); ok {
		if err := usertask.CandidateGroupsValidator(v); err != nil {
			return &ValidationError{Name: "candidate_groups", err: fmt.Errorf(`ent: validator failed for field "UserTask.candidate_groups": %w`, err)}
		}
	}
	if v, ok := utc.mutation.Operator(); ok {
		if err := usertask.OperatorValidator(v); err != nil {
			return &ValidationError{Name: "operator", err: fmt.Errorf(`ent: validator failed for field "UserTask.operator": %w`, err)}
		}
	}
	if _, ok := utc.mutation.Input(); !ok {
		return &ValidationError{Name: "input", err: errors.New(`ent: missing required field "UserTask.input"`)}
	}
	if _, ok := utc.mutation.BatchNo(); !ok {
		return &ValidationError{Name: "batch_no", err: errors.New(`ent: missing required field "UserTask.batch_no"`)}
	}
	if v, ok := utc.mutation.BatchNo(); ok {
		if err := usertask.BatchNoValidator(v); err != nil {
			return &ValidationError{Name: "batch_no", err: fmt.Errorf(`ent: validator failed for field "UserTask.batch_no": %w`, err)}
		}
	}
	if _, ok := utc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "UserTask.start_time"`)}
	}
	if _, ok := utc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "UserTask.status"`)}
	}
	if _, ok := utc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "UserTask.version"`)}
	}
	return nil
}

func (utc *UserTaskCreate) sqlSave(ctx context.Context) (*UserTask, error) {
	if err := utc.check(); err != nil {
		return nil, err
	}
	_node, _spec := utc.createSpec()
	if err := sqlgraph.CreateNode(ctx, utc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	utc.mutation.id = &_node.ID
	utc.mutation.done = true
	return _node, nil
}

func (utc *UserTaskCreate) createSpec() (*UserTask, *sqlgraph.CreateSpec) {
	var (
		_node = &UserTask{config: utc.config}
		_spec = sqlgraph.NewCreateSpec(usertask.Table, sqlgraph.NewFieldSpec(usertask.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = utc.conflict
	if id, ok := utc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := utc.mutation.TaskID(); ok {
		_spec.SetField(usertask.FieldTaskID, field.TypeString, value)
		_node.TaskID = value
	}
	if value, ok := utc.mutation.InstID(); ok {
		_spec.SetField(usertask.FieldInstID, field.TypeString, value)
		_node.InstID = value
	}
	if value, ok := utc.mutation.ExecID(); ok {
		_spec.SetField(usertask.FieldExecID, field.TypeString, value)
		_node.ExecID = value
	}
	if value, ok := utc.mutation.BusiKey(); ok {
		_spec.SetField(usertask.FieldBusiKey, field.TypeString, value)
		_node.BusiKey = value
	}
	if value, ok := utc.mutation.BusiType(); ok {
		_spec.SetField(usertask.FieldBusiType, field.TypeString, value)
		_node.BusiType = value
	}
	if value, ok := utc.mutation.FormKey(); ok {
		_spec.SetField(usertask.FieldFormKey, field.TypeString, value)
		_node.FormKey = value
	}
	if value, ok := utc.mutation.ActID(); ok {
		_spec.SetField(usertask.FieldActID, field.TypeString, value)
		_node.ActID = value
	}
	if value, ok := utc.mutation.ActName(); ok {
		_spec.SetField(usertask.FieldActName, field.TypeString, value)
		_node.ActName = value
	}
	if value, ok := utc.mutation.Owner(); ok {
		_spec.SetField(usertask.FieldOwner, field.TypeString, value)
		_node.Owner = value
	}
	if value, ok := utc.mutation.Assignee(); ok {
		_spec.SetField(usertask.FieldAssignee, field.TypeString, value)
		_node.Assignee = value
	}
	if value, ok := utc.mutation.CandidateUsers(); ok {
		_spec.SetField(usertask.FieldCandidateUsers, field.TypeString, value)
		_node.CandidateUsers = value
	}
	if value, ok := utc.mutation.CandidateGroups(); ok {
		_spec.SetField(usertask.FieldCandidateGroups, field.TypeString, value)
		_node.CandidateGroups = value
	}
	if value, ok := utc.mutation.Operator(); ok {
		_spec.SetField(usertask.FieldOperator, field.TypeString, value)
		_node.Operator = value
	}
	if value, ok := utc.mutation.Input(); ok {
		_spec.SetField(usertask.FieldInput, field.TypeJSON, value)
		_node.Input = value
	}
	if value, ok := utc.mutation.BatchNo(); ok {
		_spec.SetField(usertask.FieldBatchNo, field.TypeString, value)
		_node.BatchNo = value
	}
	if value, ok := utc.mutation.Result(); ok {
		_spec.SetField(usertask.FieldResult, field.TypeInt, value)
		_node.Result = value
	}
	if value, ok := utc.mutation.StartTime(); ok {
		_spec.SetField(usertask.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := utc.mutation.EndTime(); ok {
		_spec.SetField(usertask.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := utc.mutation.Status(); ok {
		_spec.SetField(usertask.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := utc.mutation.Version(); ok {
		_spec.SetField(usertask.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserTask.Create().
//		SetTaskID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserTaskUpsert) {
//			SetTaskID(v+v).
//		}).
//		Exec(ctx)
func (utc *UserTaskCreate) OnConflict(opts ...sql.ConflictOption) *UserTaskUpsertOne {
	utc.conflict = opts
	return &UserTaskUpsertOne{
		create: utc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserTask.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (utc *UserTaskCreate) OnConflictColumns(columns ...string) *UserTaskUpsertOne {
	utc.conflict = append(utc.conflict, sql.ConflictColumns(columns...))
	return &UserTaskUpsertOne{
		create: utc,
	}
}

type (
	// UserTaskUpsertOne is the builder for "upsert"-ing
	//  one UserTask node.
	UserTaskUpsertOne struct {
		create *UserTaskCreate
	}

	// UserTaskUpsert is the "OnConflict" setter.
	UserTaskUpsert struct {
		*sql.UpdateSet
	}
)

// SetOwner sets the "owner" field.
func (u *UserTaskUpsert) SetOwner(v string) *UserTaskUpsert {
	u.Set(usertask.FieldOwner, v)
	return u
}

// UpdateOwner sets the "owner" field to the value that was provided on create.
func (u *UserTaskUpsert) UpdateOwner() *UserTaskUpsert {
	u.SetExcluded(usertask.FieldOwner)
	return u
}

// ClearOwner clears the value of the "owner" field.
func (u *UserTaskUpsert) ClearOwner() *UserTaskUpsert {
	u.SetNull(usertask.FieldOwner)
	return u
}

// SetOperator sets the "operator" field.
func (u *UserTaskUpsert) SetOperator(v string) *UserTaskUpsert {
	u.Set(usertask.FieldOperator, v)
	return u
}

// UpdateOperator sets the "operator" field to the value that was provided on create.
func (u *UserTaskUpsert) UpdateOperator() *UserTaskUpsert {
	u.SetExcluded(usertask.FieldOperator)
	return u
}

// ClearOperator clears the value of the "operator" field.
func (u *UserTaskUpsert) ClearOperator() *UserTaskUpsert {
	u.SetNull(usertask.FieldOperator)
	return u
}

// SetInput sets the "input" field.
func (u *UserTaskUpsert) SetInput(v loong.Var) *UserTaskUpsert {
	u.Set(usertask.FieldInput, v)
	return u
}

// UpdateInput sets the "input" field to the value that was provided on create.
func (u *UserTaskUpsert) UpdateInput() *UserTaskUpsert {
	u.SetExcluded(usertask.FieldInput)
	return u
}

// SetEndTime sets the "end_time" field.
func (u *UserTaskUpsert) SetEndTime(v time.Time) *UserTaskUpsert {
	u.Set(usertask.FieldEndTime, v)
	return u
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *UserTaskUpsert) UpdateEndTime() *UserTaskUpsert {
	u.SetExcluded(usertask.FieldEndTime)
	return u
}

// ClearEndTime clears the value of the "end_time" field.
func (u *UserTaskUpsert) ClearEndTime() *UserTaskUpsert {
	u.SetNull(usertask.FieldEndTime)
	return u
}

// SetStatus sets the "status" field.
func (u *UserTaskUpsert) SetStatus(v int) *UserTaskUpsert {
	u.Set(usertask.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserTaskUpsert) UpdateStatus() *UserTaskUpsert {
	u.SetExcluded(usertask.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *UserTaskUpsert) AddStatus(v int) *UserTaskUpsert {
	u.Add(usertask.FieldStatus, v)
	return u
}

// SetVersion sets the "version" field.
func (u *UserTaskUpsert) SetVersion(v int) *UserTaskUpsert {
	u.Set(usertask.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *UserTaskUpsert) UpdateVersion() *UserTaskUpsert {
	u.SetExcluded(usertask.FieldVersion)
	return u
}

// AddVersion adds v to the "version" field.
func (u *UserTaskUpsert) AddVersion(v int) *UserTaskUpsert {
	u.Add(usertask.FieldVersion, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserTask.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(usertask.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserTaskUpsertOne) UpdateNewValues() *UserTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(usertask.FieldID)
		}
		if _, exists := u.create.mutation.TaskID(); exists {
			s.SetIgnore(usertask.FieldTaskID)
		}
		if _, exists := u.create.mutation.InstID(); exists {
			s.SetIgnore(usertask.FieldInstID)
		}
		if _, exists := u.create.mutation.ExecID(); exists {
			s.SetIgnore(usertask.FieldExecID)
		}
		if _, exists := u.create.mutation.BusiKey(); exists {
			s.SetIgnore(usertask.FieldBusiKey)
		}
		if _, exists := u.create.mutation.BusiType(); exists {
			s.SetIgnore(usertask.FieldBusiType)
		}
		if _, exists := u.create.mutation.FormKey(); exists {
			s.SetIgnore(usertask.FieldFormKey)
		}
		if _, exists := u.create.mutation.ActID(); exists {
			s.SetIgnore(usertask.FieldActID)
		}
		if _, exists := u.create.mutation.ActName(); exists {
			s.SetIgnore(usertask.FieldActName)
		}
		if _, exists := u.create.mutation.Assignee(); exists {
			s.SetIgnore(usertask.FieldAssignee)
		}
		if _, exists := u.create.mutation.CandidateUsers(); exists {
			s.SetIgnore(usertask.FieldCandidateUsers)
		}
		if _, exists := u.create.mutation.CandidateGroups(); exists {
			s.SetIgnore(usertask.FieldCandidateGroups)
		}
		if _, exists := u.create.mutation.BatchNo(); exists {
			s.SetIgnore(usertask.FieldBatchNo)
		}
		if _, exists := u.create.mutation.Result(); exists {
			s.SetIgnore(usertask.FieldResult)
		}
		if _, exists := u.create.mutation.StartTime(); exists {
			s.SetIgnore(usertask.FieldStartTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserTask.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserTaskUpsertOne) Ignore() *UserTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserTaskUpsertOne) DoNothing() *UserTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserTaskCreate.OnConflict
// documentation for more info.
func (u *UserTaskUpsertOne) Update(set func(*UserTaskUpsert)) *UserTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserTaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetOwner sets the "owner" field.
func (u *UserTaskUpsertOne) SetOwner(v string) *UserTaskUpsertOne {
	return u.Update(func(s *UserTaskUpsert) {
		s.SetOwner(v)
	})
}

// UpdateOwner sets the "owner" field to the value that was provided on create.
func (u *UserTaskUpsertOne) UpdateOwner() *UserTaskUpsertOne {
	return u.Update(func(s *UserTaskUpsert) {
		s.UpdateOwner()
	})
}

// ClearOwner clears the value of the "owner" field.
func (u *UserTaskUpsertOne) ClearOwner() *UserTaskUpsertOne {
	return u.Update(func(s *UserTaskUpsert) {
		s.ClearOwner()
	})
}

// SetOperator sets the "operator" field.
func (u *UserTaskUpsertOne) SetOperator(v string) *UserTaskUpsertOne {
	return u.Update(func(s *UserTaskUpsert) {
		s.SetOperator(v)
	})
}

// UpdateOperator sets the "operator" field to the value that was provided on create.
func (u *UserTaskUpsertOne) UpdateOperator() *UserTaskUpsertOne {
	return u.Update(func(s *UserTaskUpsert) {
		s.UpdateOperator()
	})
}

// ClearOperator clears the value of the "operator" field.
func (u *UserTaskUpsertOne) ClearOperator() *UserTaskUpsertOne {
	return u.Update(func(s *UserTaskUpsert) {
		s.ClearOperator()
	})
}

// SetInput sets the "input" field.
func (u *UserTaskUpsertOne) SetInput(v loong.Var) *UserTaskUpsertOne {
	return u.Update(func(s *UserTaskUpsert) {
		s.SetInput(v)
	})
}

// UpdateInput sets the "input" field to the value that was provided on create.
func (u *UserTaskUpsertOne) UpdateInput() *UserTaskUpsertOne {
	return u.Update(func(s *UserTaskUpsert) {
		s.UpdateInput()
	})
}

// SetEndTime sets the "end_time" field.
func (u *UserTaskUpsertOne) SetEndTime(v time.Time) *UserTaskUpsertOne {
	return u.Update(func(s *UserTaskUpsert) {
		s.SetEndTime(v)
	})
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *UserTaskUpsertOne) UpdateEndTime() *UserTaskUpsertOne {
	return u.Update(func(s *UserTaskUpsert) {
		s.UpdateEndTime()
	})
}

// ClearEndTime clears the value of the "end_time" field.
func (u *UserTaskUpsertOne) ClearEndTime() *UserTaskUpsertOne {
	return u.Update(func(s *UserTaskUpsert) {
		s.ClearEndTime()
	})
}

// SetStatus sets the "status" field.
func (u *UserTaskUpsertOne) SetStatus(v int) *UserTaskUpsertOne {
	return u.Update(func(s *UserTaskUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *UserTaskUpsertOne) AddStatus(v int) *UserTaskUpsertOne {
	return u.Update(func(s *UserTaskUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserTaskUpsertOne) UpdateStatus() *UserTaskUpsertOne {
	return u.Update(func(s *UserTaskUpsert) {
		s.UpdateStatus()
	})
}

// SetVersion sets the "version" field.
func (u *UserTaskUpsertOne) SetVersion(v int) *UserTaskUpsertOne {
	return u.Update(func(s *UserTaskUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *UserTaskUpsertOne) AddVersion(v int) *UserTaskUpsertOne {
	return u.Update(func(s *UserTaskUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *UserTaskUpsertOne) UpdateVersion() *UserTaskUpsertOne {
	return u.Update(func(s *UserTaskUpsert) {
		s.UpdateVersion()
	})
}

// Exec executes the query.
func (u *UserTaskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserTaskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserTaskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserTaskUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UserTaskUpsertOne.ID is not supported by MySQL driver. Use UserTaskUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserTaskUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserTaskCreateBulk is the builder for creating many UserTask entities in bulk.
type UserTaskCreateBulk struct {
	config
	err      error
	builders []*UserTaskCreate
	conflict []sql.ConflictOption
}

// Save creates the UserTask entities in the database.
func (utcb *UserTaskCreateBulk) Save(ctx context.Context) ([]*UserTask, error) {
	if utcb.err != nil {
		return nil, utcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(utcb.builders))
	nodes := make([]*UserTask, len(utcb.builders))
	mutators := make([]Mutator, len(utcb.builders))
	for i := range utcb.builders {
		func(i int, root context.Context) {
			builder := utcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, utcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = utcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, utcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, utcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (utcb *UserTaskCreateBulk) SaveX(ctx context.Context) []*UserTask {
	v, err := utcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utcb *UserTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := utcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utcb *UserTaskCreateBulk) ExecX(ctx context.Context) {
	if err := utcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserTask.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserTaskUpsert) {
//			SetTaskID(v+v).
//		}).
//		Exec(ctx)
func (utcb *UserTaskCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserTaskUpsertBulk {
	utcb.conflict = opts
	return &UserTaskUpsertBulk{
		create: utcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserTask.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (utcb *UserTaskCreateBulk) OnConflictColumns(columns ...string) *UserTaskUpsertBulk {
	utcb.conflict = append(utcb.conflict, sql.ConflictColumns(columns...))
	return &UserTaskUpsertBulk{
		create: utcb,
	}
}

// UserTaskUpsertBulk is the builder for "upsert"-ing
// a bulk of UserTask nodes.
type UserTaskUpsertBulk struct {
	create *UserTaskCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserTask.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(usertask.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserTaskUpsertBulk) UpdateNewValues() *UserTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(usertask.FieldID)
			}
			if _, exists := b.mutation.TaskID(); exists {
				s.SetIgnore(usertask.FieldTaskID)
			}
			if _, exists := b.mutation.InstID(); exists {
				s.SetIgnore(usertask.FieldInstID)
			}
			if _, exists := b.mutation.ExecID(); exists {
				s.SetIgnore(usertask.FieldExecID)
			}
			if _, exists := b.mutation.BusiKey(); exists {
				s.SetIgnore(usertask.FieldBusiKey)
			}
			if _, exists := b.mutation.BusiType(); exists {
				s.SetIgnore(usertask.FieldBusiType)
			}
			if _, exists := b.mutation.FormKey(); exists {
				s.SetIgnore(usertask.FieldFormKey)
			}
			if _, exists := b.mutation.ActID(); exists {
				s.SetIgnore(usertask.FieldActID)
			}
			if _, exists := b.mutation.ActName(); exists {
				s.SetIgnore(usertask.FieldActName)
			}
			if _, exists := b.mutation.Assignee(); exists {
				s.SetIgnore(usertask.FieldAssignee)
			}
			if _, exists := b.mutation.CandidateUsers(); exists {
				s.SetIgnore(usertask.FieldCandidateUsers)
			}
			if _, exists := b.mutation.CandidateGroups(); exists {
				s.SetIgnore(usertask.FieldCandidateGroups)
			}
			if _, exists := b.mutation.BatchNo(); exists {
				s.SetIgnore(usertask.FieldBatchNo)
			}
			if _, exists := b.mutation.Result(); exists {
				s.SetIgnore(usertask.FieldResult)
			}
			if _, exists := b.mutation.StartTime(); exists {
				s.SetIgnore(usertask.FieldStartTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserTask.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserTaskUpsertBulk) Ignore() *UserTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserTaskUpsertBulk) DoNothing() *UserTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserTaskCreateBulk.OnConflict
// documentation for more info.
func (u *UserTaskUpsertBulk) Update(set func(*UserTaskUpsert)) *UserTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserTaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetOwner sets the "owner" field.
func (u *UserTaskUpsertBulk) SetOwner(v string) *UserTaskUpsertBulk {
	return u.Update(func(s *UserTaskUpsert) {
		s.SetOwner(v)
	})
}

// UpdateOwner sets the "owner" field to the value that was provided on create.
func (u *UserTaskUpsertBulk) UpdateOwner() *UserTaskUpsertBulk {
	return u.Update(func(s *UserTaskUpsert) {
		s.UpdateOwner()
	})
}

// ClearOwner clears the value of the "owner" field.
func (u *UserTaskUpsertBulk) ClearOwner() *UserTaskUpsertBulk {
	return u.Update(func(s *UserTaskUpsert) {
		s.ClearOwner()
	})
}

// SetOperator sets the "operator" field.
func (u *UserTaskUpsertBulk) SetOperator(v string) *UserTaskUpsertBulk {
	return u.Update(func(s *UserTaskUpsert) {
		s.SetOperator(v)
	})
}

// UpdateOperator sets the "operator" field to the value that was provided on create.
func (u *UserTaskUpsertBulk) UpdateOperator() *UserTaskUpsertBulk {
	return u.Update(func(s *UserTaskUpsert) {
		s.UpdateOperator()
	})
}

// ClearOperator clears the value of the "operator" field.
func (u *UserTaskUpsertBulk) ClearOperator() *UserTaskUpsertBulk {
	return u.Update(func(s *UserTaskUpsert) {
		s.ClearOperator()
	})
}

// SetInput sets the "input" field.
func (u *UserTaskUpsertBulk) SetInput(v loong.Var) *UserTaskUpsertBulk {
	return u.Update(func(s *UserTaskUpsert) {
		s.SetInput(v)
	})
}

// UpdateInput sets the "input" field to the value that was provided on create.
func (u *UserTaskUpsertBulk) UpdateInput() *UserTaskUpsertBulk {
	return u.Update(func(s *UserTaskUpsert) {
		s.UpdateInput()
	})
}

// SetEndTime sets the "end_time" field.
func (u *UserTaskUpsertBulk) SetEndTime(v time.Time) *UserTaskUpsertBulk {
	return u.Update(func(s *UserTaskUpsert) {
		s.SetEndTime(v)
	})
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *UserTaskUpsertBulk) UpdateEndTime() *UserTaskUpsertBulk {
	return u.Update(func(s *UserTaskUpsert) {
		s.UpdateEndTime()
	})
}

// ClearEndTime clears the value of the "end_time" field.
func (u *UserTaskUpsertBulk) ClearEndTime() *UserTaskUpsertBulk {
	return u.Update(func(s *UserTaskUpsert) {
		s.ClearEndTime()
	})
}

// SetStatus sets the "status" field.
func (u *UserTaskUpsertBulk) SetStatus(v int) *UserTaskUpsertBulk {
	return u.Update(func(s *UserTaskUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *UserTaskUpsertBulk) AddStatus(v int) *UserTaskUpsertBulk {
	return u.Update(func(s *UserTaskUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserTaskUpsertBulk) UpdateStatus() *UserTaskUpsertBulk {
	return u.Update(func(s *UserTaskUpsert) {
		s.UpdateStatus()
	})
}

// SetVersion sets the "version" field.
func (u *UserTaskUpsertBulk) SetVersion(v int) *UserTaskUpsertBulk {
	return u.Update(func(s *UserTaskUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *UserTaskUpsertBulk) AddVersion(v int) *UserTaskUpsertBulk {
	return u.Update(func(s *UserTaskUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *UserTaskUpsertBulk) UpdateVersion() *UserTaskUpsertBulk {
	return u.Update(func(s *UserTaskUpsert) {
		s.UpdateVersion()
	})
}

// Exec executes the query.
func (u *UserTaskUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserTaskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserTaskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserTaskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
