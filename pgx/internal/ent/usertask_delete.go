// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/it512/loong/pgx/internal/ent/predicate"
	"github.com/it512/loong/pgx/internal/ent/usertask"
)

// UserTaskDelete is the builder for deleting a UserTask entity.
type UserTaskDelete struct {
	config
	hooks    []Hook
	mutation *UserTaskMutation
}

// Where appends a list predicates to the UserTaskDelete builder.
func (utd *UserTaskDelete) Where(ps ...predicate.UserTask) *UserTaskDelete {
	utd.mutation.Where(ps...)
	return utd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (utd *UserTaskDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, utd.sqlExec, utd.mutation, utd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (utd *UserTaskDelete) ExecX(ctx context.Context) int {
	n, err := utd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (utd *UserTaskDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(usertask.Table, sqlgraph.NewFieldSpec(usertask.FieldID, field.TypeUUID))
	if ps := utd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, utd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	utd.mutation.done = true
	return affected, err
}

// UserTaskDeleteOne is the builder for deleting a single UserTask entity.
type UserTaskDeleteOne struct {
	utd *UserTaskDelete
}

// Where appends a list predicates to the UserTaskDelete builder.
func (utdo *UserTaskDeleteOne) Where(ps ...predicate.UserTask) *UserTaskDeleteOne {
	utdo.utd.mutation.Where(ps...)
	return utdo
}

// Exec executes the deletion query.
func (utdo *UserTaskDeleteOne) Exec(ctx context.Context) error {
	n, err := utdo.utd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{usertask.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (utdo *UserTaskDeleteOne) ExecX(ctx context.Context) {
	if err := utdo.Exec(ctx); err != nil {
		panic(err)
	}
}
