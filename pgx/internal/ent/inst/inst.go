// Code generated by ent, DO NOT EDIT.

package inst

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/it512/loong"
)

const (
	// Label holds the string label denoting the inst type in the database.
	Label = "inst"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldInstID holds the string denoting the inst_id field in the database.
	FieldInstID = "inst_id"
	// FieldProcID holds the string denoting the proc_id field in the database.
	FieldProcID = "proc_id"
	// FieldBusiKey holds the string denoting the busi_key field in the database.
	FieldBusiKey = "busi_key"
	// FieldBusiType holds the string denoting the busi_type field in the database.
	FieldBusiType = "busi_type"
	// FieldStarter holds the string denoting the starter field in the database.
	FieldStarter = "starter"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldInit holds the string denoting the init field in the database.
	FieldInit = "init"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// Table holds the table name of the inst in the database.
	Table = "loong_inst"
)

// Columns holds all SQL columns for inst fields.
var Columns = []string{
	FieldID,
	FieldInstID,
	FieldProcID,
	FieldBusiKey,
	FieldBusiType,
	FieldStarter,
	FieldStartTime,
	FieldEndTime,
	FieldInit,
	FieldStatus,
	FieldVersion,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// InstIDValidator is a validator for the "inst_id" field. It is called by the builders before save.
	InstIDValidator func(string) error
	// ProcIDValidator is a validator for the "proc_id" field. It is called by the builders before save.
	ProcIDValidator func(string) error
	// BusiKeyValidator is a validator for the "busi_key" field. It is called by the builders before save.
	BusiKeyValidator func(string) error
	// BusiTypeValidator is a validator for the "busi_type" field. It is called by the builders before save.
	BusiTypeValidator func(string) error
	// StarterValidator is a validator for the "starter" field. It is called by the builders before save.
	StarterValidator func(string) error
	// DefaultStartTime holds the default value on creation for the "start_time" field.
	DefaultStartTime func() time.Time
	// DefaultInit holds the default value on creation for the "init" field.
	DefaultInit loong.Var
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Inst queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByInstID orders the results by the inst_id field.
func ByInstID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstID, opts...).ToFunc()
}

// ByProcID orders the results by the proc_id field.
func ByProcID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcID, opts...).ToFunc()
}

// ByBusiKey orders the results by the busi_key field.
func ByBusiKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusiKey, opts...).ToFunc()
}

// ByBusiType orders the results by the busi_type field.
func ByBusiType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusiType, opts...).ToFunc()
}

// ByStarter orders the results by the starter field.
func ByStarter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStarter, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}
