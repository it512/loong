// Code generated by ent, DO NOT EDIT.

package inst

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/it512/loong/pgx/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Inst {
	return predicate.Inst(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Inst {
	return predicate.Inst(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Inst {
	return predicate.Inst(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Inst {
	return predicate.Inst(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Inst {
	return predicate.Inst(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Inst {
	return predicate.Inst(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Inst {
	return predicate.Inst(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Inst {
	return predicate.Inst(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Inst {
	return predicate.Inst(sql.FieldLTE(FieldID, id))
}

// InstID applies equality check predicate on the "inst_id" field. It's identical to InstIDEQ.
func InstID(v string) predicate.Inst {
	return predicate.Inst(sql.FieldEQ(FieldInstID, v))
}

// ProcID applies equality check predicate on the "proc_id" field. It's identical to ProcIDEQ.
func ProcID(v string) predicate.Inst {
	return predicate.Inst(sql.FieldEQ(FieldProcID, v))
}

// BusiKey applies equality check predicate on the "busi_key" field. It's identical to BusiKeyEQ.
func BusiKey(v string) predicate.Inst {
	return predicate.Inst(sql.FieldEQ(FieldBusiKey, v))
}

// BusiType applies equality check predicate on the "busi_type" field. It's identical to BusiTypeEQ.
func BusiType(v string) predicate.Inst {
	return predicate.Inst(sql.FieldEQ(FieldBusiType, v))
}

// Starter applies equality check predicate on the "starter" field. It's identical to StarterEQ.
func Starter(v string) predicate.Inst {
	return predicate.Inst(sql.FieldEQ(FieldStarter, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.Inst {
	return predicate.Inst(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.Inst {
	return predicate.Inst(sql.FieldEQ(FieldEndTime, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.Inst {
	return predicate.Inst(sql.FieldEQ(FieldStatus, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.Inst {
	return predicate.Inst(sql.FieldEQ(FieldVersion, v))
}

// InstIDEQ applies the EQ predicate on the "inst_id" field.
func InstIDEQ(v string) predicate.Inst {
	return predicate.Inst(sql.FieldEQ(FieldInstID, v))
}

// InstIDNEQ applies the NEQ predicate on the "inst_id" field.
func InstIDNEQ(v string) predicate.Inst {
	return predicate.Inst(sql.FieldNEQ(FieldInstID, v))
}

// InstIDIn applies the In predicate on the "inst_id" field.
func InstIDIn(vs ...string) predicate.Inst {
	return predicate.Inst(sql.FieldIn(FieldInstID, vs...))
}

// InstIDNotIn applies the NotIn predicate on the "inst_id" field.
func InstIDNotIn(vs ...string) predicate.Inst {
	return predicate.Inst(sql.FieldNotIn(FieldInstID, vs...))
}

// InstIDGT applies the GT predicate on the "inst_id" field.
func InstIDGT(v string) predicate.Inst {
	return predicate.Inst(sql.FieldGT(FieldInstID, v))
}

// InstIDGTE applies the GTE predicate on the "inst_id" field.
func InstIDGTE(v string) predicate.Inst {
	return predicate.Inst(sql.FieldGTE(FieldInstID, v))
}

// InstIDLT applies the LT predicate on the "inst_id" field.
func InstIDLT(v string) predicate.Inst {
	return predicate.Inst(sql.FieldLT(FieldInstID, v))
}

// InstIDLTE applies the LTE predicate on the "inst_id" field.
func InstIDLTE(v string) predicate.Inst {
	return predicate.Inst(sql.FieldLTE(FieldInstID, v))
}

// InstIDContains applies the Contains predicate on the "inst_id" field.
func InstIDContains(v string) predicate.Inst {
	return predicate.Inst(sql.FieldContains(FieldInstID, v))
}

// InstIDHasPrefix applies the HasPrefix predicate on the "inst_id" field.
func InstIDHasPrefix(v string) predicate.Inst {
	return predicate.Inst(sql.FieldHasPrefix(FieldInstID, v))
}

// InstIDHasSuffix applies the HasSuffix predicate on the "inst_id" field.
func InstIDHasSuffix(v string) predicate.Inst {
	return predicate.Inst(sql.FieldHasSuffix(FieldInstID, v))
}

// InstIDEqualFold applies the EqualFold predicate on the "inst_id" field.
func InstIDEqualFold(v string) predicate.Inst {
	return predicate.Inst(sql.FieldEqualFold(FieldInstID, v))
}

// InstIDContainsFold applies the ContainsFold predicate on the "inst_id" field.
func InstIDContainsFold(v string) predicate.Inst {
	return predicate.Inst(sql.FieldContainsFold(FieldInstID, v))
}

// ProcIDEQ applies the EQ predicate on the "proc_id" field.
func ProcIDEQ(v string) predicate.Inst {
	return predicate.Inst(sql.FieldEQ(FieldProcID, v))
}

// ProcIDNEQ applies the NEQ predicate on the "proc_id" field.
func ProcIDNEQ(v string) predicate.Inst {
	return predicate.Inst(sql.FieldNEQ(FieldProcID, v))
}

// ProcIDIn applies the In predicate on the "proc_id" field.
func ProcIDIn(vs ...string) predicate.Inst {
	return predicate.Inst(sql.FieldIn(FieldProcID, vs...))
}

// ProcIDNotIn applies the NotIn predicate on the "proc_id" field.
func ProcIDNotIn(vs ...string) predicate.Inst {
	return predicate.Inst(sql.FieldNotIn(FieldProcID, vs...))
}

// ProcIDGT applies the GT predicate on the "proc_id" field.
func ProcIDGT(v string) predicate.Inst {
	return predicate.Inst(sql.FieldGT(FieldProcID, v))
}

// ProcIDGTE applies the GTE predicate on the "proc_id" field.
func ProcIDGTE(v string) predicate.Inst {
	return predicate.Inst(sql.FieldGTE(FieldProcID, v))
}

// ProcIDLT applies the LT predicate on the "proc_id" field.
func ProcIDLT(v string) predicate.Inst {
	return predicate.Inst(sql.FieldLT(FieldProcID, v))
}

// ProcIDLTE applies the LTE predicate on the "proc_id" field.
func ProcIDLTE(v string) predicate.Inst {
	return predicate.Inst(sql.FieldLTE(FieldProcID, v))
}

// ProcIDContains applies the Contains predicate on the "proc_id" field.
func ProcIDContains(v string) predicate.Inst {
	return predicate.Inst(sql.FieldContains(FieldProcID, v))
}

// ProcIDHasPrefix applies the HasPrefix predicate on the "proc_id" field.
func ProcIDHasPrefix(v string) predicate.Inst {
	return predicate.Inst(sql.FieldHasPrefix(FieldProcID, v))
}

// ProcIDHasSuffix applies the HasSuffix predicate on the "proc_id" field.
func ProcIDHasSuffix(v string) predicate.Inst {
	return predicate.Inst(sql.FieldHasSuffix(FieldProcID, v))
}

// ProcIDEqualFold applies the EqualFold predicate on the "proc_id" field.
func ProcIDEqualFold(v string) predicate.Inst {
	return predicate.Inst(sql.FieldEqualFold(FieldProcID, v))
}

// ProcIDContainsFold applies the ContainsFold predicate on the "proc_id" field.
func ProcIDContainsFold(v string) predicate.Inst {
	return predicate.Inst(sql.FieldContainsFold(FieldProcID, v))
}

// BusiKeyEQ applies the EQ predicate on the "busi_key" field.
func BusiKeyEQ(v string) predicate.Inst {
	return predicate.Inst(sql.FieldEQ(FieldBusiKey, v))
}

// BusiKeyNEQ applies the NEQ predicate on the "busi_key" field.
func BusiKeyNEQ(v string) predicate.Inst {
	return predicate.Inst(sql.FieldNEQ(FieldBusiKey, v))
}

// BusiKeyIn applies the In predicate on the "busi_key" field.
func BusiKeyIn(vs ...string) predicate.Inst {
	return predicate.Inst(sql.FieldIn(FieldBusiKey, vs...))
}

// BusiKeyNotIn applies the NotIn predicate on the "busi_key" field.
func BusiKeyNotIn(vs ...string) predicate.Inst {
	return predicate.Inst(sql.FieldNotIn(FieldBusiKey, vs...))
}

// BusiKeyGT applies the GT predicate on the "busi_key" field.
func BusiKeyGT(v string) predicate.Inst {
	return predicate.Inst(sql.FieldGT(FieldBusiKey, v))
}

// BusiKeyGTE applies the GTE predicate on the "busi_key" field.
func BusiKeyGTE(v string) predicate.Inst {
	return predicate.Inst(sql.FieldGTE(FieldBusiKey, v))
}

// BusiKeyLT applies the LT predicate on the "busi_key" field.
func BusiKeyLT(v string) predicate.Inst {
	return predicate.Inst(sql.FieldLT(FieldBusiKey, v))
}

// BusiKeyLTE applies the LTE predicate on the "busi_key" field.
func BusiKeyLTE(v string) predicate.Inst {
	return predicate.Inst(sql.FieldLTE(FieldBusiKey, v))
}

// BusiKeyContains applies the Contains predicate on the "busi_key" field.
func BusiKeyContains(v string) predicate.Inst {
	return predicate.Inst(sql.FieldContains(FieldBusiKey, v))
}

// BusiKeyHasPrefix applies the HasPrefix predicate on the "busi_key" field.
func BusiKeyHasPrefix(v string) predicate.Inst {
	return predicate.Inst(sql.FieldHasPrefix(FieldBusiKey, v))
}

// BusiKeyHasSuffix applies the HasSuffix predicate on the "busi_key" field.
func BusiKeyHasSuffix(v string) predicate.Inst {
	return predicate.Inst(sql.FieldHasSuffix(FieldBusiKey, v))
}

// BusiKeyEqualFold applies the EqualFold predicate on the "busi_key" field.
func BusiKeyEqualFold(v string) predicate.Inst {
	return predicate.Inst(sql.FieldEqualFold(FieldBusiKey, v))
}

// BusiKeyContainsFold applies the ContainsFold predicate on the "busi_key" field.
func BusiKeyContainsFold(v string) predicate.Inst {
	return predicate.Inst(sql.FieldContainsFold(FieldBusiKey, v))
}

// BusiTypeEQ applies the EQ predicate on the "busi_type" field.
func BusiTypeEQ(v string) predicate.Inst {
	return predicate.Inst(sql.FieldEQ(FieldBusiType, v))
}

// BusiTypeNEQ applies the NEQ predicate on the "busi_type" field.
func BusiTypeNEQ(v string) predicate.Inst {
	return predicate.Inst(sql.FieldNEQ(FieldBusiType, v))
}

// BusiTypeIn applies the In predicate on the "busi_type" field.
func BusiTypeIn(vs ...string) predicate.Inst {
	return predicate.Inst(sql.FieldIn(FieldBusiType, vs...))
}

// BusiTypeNotIn applies the NotIn predicate on the "busi_type" field.
func BusiTypeNotIn(vs ...string) predicate.Inst {
	return predicate.Inst(sql.FieldNotIn(FieldBusiType, vs...))
}

// BusiTypeGT applies the GT predicate on the "busi_type" field.
func BusiTypeGT(v string) predicate.Inst {
	return predicate.Inst(sql.FieldGT(FieldBusiType, v))
}

// BusiTypeGTE applies the GTE predicate on the "busi_type" field.
func BusiTypeGTE(v string) predicate.Inst {
	return predicate.Inst(sql.FieldGTE(FieldBusiType, v))
}

// BusiTypeLT applies the LT predicate on the "busi_type" field.
func BusiTypeLT(v string) predicate.Inst {
	return predicate.Inst(sql.FieldLT(FieldBusiType, v))
}

// BusiTypeLTE applies the LTE predicate on the "busi_type" field.
func BusiTypeLTE(v string) predicate.Inst {
	return predicate.Inst(sql.FieldLTE(FieldBusiType, v))
}

// BusiTypeContains applies the Contains predicate on the "busi_type" field.
func BusiTypeContains(v string) predicate.Inst {
	return predicate.Inst(sql.FieldContains(FieldBusiType, v))
}

// BusiTypeHasPrefix applies the HasPrefix predicate on the "busi_type" field.
func BusiTypeHasPrefix(v string) predicate.Inst {
	return predicate.Inst(sql.FieldHasPrefix(FieldBusiType, v))
}

// BusiTypeHasSuffix applies the HasSuffix predicate on the "busi_type" field.
func BusiTypeHasSuffix(v string) predicate.Inst {
	return predicate.Inst(sql.FieldHasSuffix(FieldBusiType, v))
}

// BusiTypeEqualFold applies the EqualFold predicate on the "busi_type" field.
func BusiTypeEqualFold(v string) predicate.Inst {
	return predicate.Inst(sql.FieldEqualFold(FieldBusiType, v))
}

// BusiTypeContainsFold applies the ContainsFold predicate on the "busi_type" field.
func BusiTypeContainsFold(v string) predicate.Inst {
	return predicate.Inst(sql.FieldContainsFold(FieldBusiType, v))
}

// StarterEQ applies the EQ predicate on the "starter" field.
func StarterEQ(v string) predicate.Inst {
	return predicate.Inst(sql.FieldEQ(FieldStarter, v))
}

// StarterNEQ applies the NEQ predicate on the "starter" field.
func StarterNEQ(v string) predicate.Inst {
	return predicate.Inst(sql.FieldNEQ(FieldStarter, v))
}

// StarterIn applies the In predicate on the "starter" field.
func StarterIn(vs ...string) predicate.Inst {
	return predicate.Inst(sql.FieldIn(FieldStarter, vs...))
}

// StarterNotIn applies the NotIn predicate on the "starter" field.
func StarterNotIn(vs ...string) predicate.Inst {
	return predicate.Inst(sql.FieldNotIn(FieldStarter, vs...))
}

// StarterGT applies the GT predicate on the "starter" field.
func StarterGT(v string) predicate.Inst {
	return predicate.Inst(sql.FieldGT(FieldStarter, v))
}

// StarterGTE applies the GTE predicate on the "starter" field.
func StarterGTE(v string) predicate.Inst {
	return predicate.Inst(sql.FieldGTE(FieldStarter, v))
}

// StarterLT applies the LT predicate on the "starter" field.
func StarterLT(v string) predicate.Inst {
	return predicate.Inst(sql.FieldLT(FieldStarter, v))
}

// StarterLTE applies the LTE predicate on the "starter" field.
func StarterLTE(v string) predicate.Inst {
	return predicate.Inst(sql.FieldLTE(FieldStarter, v))
}

// StarterContains applies the Contains predicate on the "starter" field.
func StarterContains(v string) predicate.Inst {
	return predicate.Inst(sql.FieldContains(FieldStarter, v))
}

// StarterHasPrefix applies the HasPrefix predicate on the "starter" field.
func StarterHasPrefix(v string) predicate.Inst {
	return predicate.Inst(sql.FieldHasPrefix(FieldStarter, v))
}

// StarterHasSuffix applies the HasSuffix predicate on the "starter" field.
func StarterHasSuffix(v string) predicate.Inst {
	return predicate.Inst(sql.FieldHasSuffix(FieldStarter, v))
}

// StarterEqualFold applies the EqualFold predicate on the "starter" field.
func StarterEqualFold(v string) predicate.Inst {
	return predicate.Inst(sql.FieldEqualFold(FieldStarter, v))
}

// StarterContainsFold applies the ContainsFold predicate on the "starter" field.
func StarterContainsFold(v string) predicate.Inst {
	return predicate.Inst(sql.FieldContainsFold(FieldStarter, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.Inst {
	return predicate.Inst(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.Inst {
	return predicate.Inst(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.Inst {
	return predicate.Inst(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.Inst {
	return predicate.Inst(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.Inst {
	return predicate.Inst(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.Inst {
	return predicate.Inst(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.Inst {
	return predicate.Inst(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.Inst {
	return predicate.Inst(sql.FieldLTE(FieldStartTime, v))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.Inst {
	return predicate.Inst(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.Inst {
	return predicate.Inst(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.Inst {
	return predicate.Inst(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.Inst {
	return predicate.Inst(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.Inst {
	return predicate.Inst(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.Inst {
	return predicate.Inst(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.Inst {
	return predicate.Inst(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.Inst {
	return predicate.Inst(sql.FieldLTE(FieldEndTime, v))
}

// EndTimeIsNil applies the IsNil predicate on the "end_time" field.
func EndTimeIsNil() predicate.Inst {
	return predicate.Inst(sql.FieldIsNull(FieldEndTime))
}

// EndTimeNotNil applies the NotNil predicate on the "end_time" field.
func EndTimeNotNil() predicate.Inst {
	return predicate.Inst(sql.FieldNotNull(FieldEndTime))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.Inst {
	return predicate.Inst(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.Inst {
	return predicate.Inst(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.Inst {
	return predicate.Inst(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.Inst {
	return predicate.Inst(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.Inst {
	return predicate.Inst(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.Inst {
	return predicate.Inst(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.Inst {
	return predicate.Inst(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.Inst {
	return predicate.Inst(sql.FieldLTE(FieldStatus, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.Inst {
	return predicate.Inst(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.Inst {
	return predicate.Inst(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.Inst {
	return predicate.Inst(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.Inst {
	return predicate.Inst(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.Inst {
	return predicate.Inst(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.Inst {
	return predicate.Inst(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.Inst {
	return predicate.Inst(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.Inst {
	return predicate.Inst(sql.FieldLTE(FieldVersion, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Inst) predicate.Inst {
	return predicate.Inst(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Inst) predicate.Inst {
	return predicate.Inst(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Inst) predicate.Inst {
	return predicate.Inst(sql.NotPredicates(p))
}
