// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/it512/loong"
	"github.com/it512/loong/pgx/internal/ent/usertask"
)

// UserTask is the model entity for the UserTask schema.
type UserTask struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TaskID holds the value of the "task_id" field.
	TaskID string `json:"task_id,omitempty"`
	// InstID holds the value of the "inst_id" field.
	InstID string `json:"inst_id,omitempty"`
	// ExecID holds the value of the "exec_id" field.
	ExecID string `json:"exec_id,omitempty"`
	// BusiKey holds the value of the "busi_key" field.
	BusiKey string `json:"busi_key,omitempty"`
	// BusiType holds the value of the "busi_type" field.
	BusiType string `json:"busi_type,omitempty"`
	// FormKey holds the value of the "form_key" field.
	FormKey string `json:"form_key,omitempty"`
	// ActID holds the value of the "act_id" field.
	ActID string `json:"act_id,omitempty"`
	// ActName holds the value of the "act_name" field.
	ActName string `json:"act_name,omitempty"`
	// Owner holds the value of the "owner" field.
	Owner string `json:"owner,omitempty"`
	// Assignee holds the value of the "assignee" field.
	Assignee string `json:"assignee,omitempty"`
	// CandidateUsers holds the value of the "candidate_users" field.
	CandidateUsers string `json:"candidate_users,omitempty"`
	// CandidateGroups holds the value of the "candidate_groups" field.
	CandidateGroups string `json:"candidate_groups,omitempty"`
	// Operator holds the value of the "operator" field.
	Operator string `json:"operator,omitempty"`
	// Input holds the value of the "input" field.
	Input loong.Var `json:"input,omitempty"`
	// BatchNo holds the value of the "batch_no" field.
	BatchNo string `json:"batch_no,omitempty"`
	// Result holds the value of the "result" field.
	Result int `json:"result,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// Version holds the value of the "version" field.
	Version      int `json:"version,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserTask) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usertask.FieldInput:
			values[i] = new([]byte)
		case usertask.FieldResult, usertask.FieldStatus, usertask.FieldVersion:
			values[i] = new(sql.NullInt64)
		case usertask.FieldTaskID, usertask.FieldInstID, usertask.FieldExecID, usertask.FieldBusiKey, usertask.FieldBusiType, usertask.FieldFormKey, usertask.FieldActID, usertask.FieldActName, usertask.FieldOwner, usertask.FieldAssignee, usertask.FieldCandidateUsers, usertask.FieldCandidateGroups, usertask.FieldOperator, usertask.FieldBatchNo:
			values[i] = new(sql.NullString)
		case usertask.FieldStartTime, usertask.FieldEndTime:
			values[i] = new(sql.NullTime)
		case usertask.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserTask fields.
func (ut *UserTask) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usertask.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ut.ID = *value
			}
		case usertask.FieldTaskID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value.Valid {
				ut.TaskID = value.String
			}
		case usertask.FieldInstID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inst_id", values[i])
			} else if value.Valid {
				ut.InstID = value.String
			}
		case usertask.FieldExecID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field exec_id", values[i])
			} else if value.Valid {
				ut.ExecID = value.String
			}
		case usertask.FieldBusiKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field busi_key", values[i])
			} else if value.Valid {
				ut.BusiKey = value.String
			}
		case usertask.FieldBusiType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field busi_type", values[i])
			} else if value.Valid {
				ut.BusiType = value.String
			}
		case usertask.FieldFormKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field form_key", values[i])
			} else if value.Valid {
				ut.FormKey = value.String
			}
		case usertask.FieldActID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field act_id", values[i])
			} else if value.Valid {
				ut.ActID = value.String
			}
		case usertask.FieldActName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field act_name", values[i])
			} else if value.Valid {
				ut.ActName = value.String
			}
		case usertask.FieldOwner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[i])
			} else if value.Valid {
				ut.Owner = value.String
			}
		case usertask.FieldAssignee:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assignee", values[i])
			} else if value.Valid {
				ut.Assignee = value.String
			}
		case usertask.FieldCandidateUsers:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field candidate_users", values[i])
			} else if value.Valid {
				ut.CandidateUsers = value.String
			}
		case usertask.FieldCandidateGroups:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field candidate_groups", values[i])
			} else if value.Valid {
				ut.CandidateGroups = value.String
			}
		case usertask.FieldOperator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operator", values[i])
			} else if value.Valid {
				ut.Operator = value.String
			}
		case usertask.FieldInput:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field input", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ut.Input); err != nil {
					return fmt.Errorf("unmarshal field input: %w", err)
				}
			}
		case usertask.FieldBatchNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field batch_no", values[i])
			} else if value.Valid {
				ut.BatchNo = value.String
			}
		case usertask.FieldResult:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value.Valid {
				ut.Result = int(value.Int64)
			}
		case usertask.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				ut.StartTime = value.Time
			}
		case usertask.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				ut.EndTime = value.Time
			}
		case usertask.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ut.Status = int(value.Int64)
			}
		case usertask.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				ut.Version = int(value.Int64)
			}
		default:
			ut.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserTask.
// This includes values selected through modifiers, order, etc.
func (ut *UserTask) Value(name string) (ent.Value, error) {
	return ut.selectValues.Get(name)
}

// Update returns a builder for updating this UserTask.
// Note that you need to call UserTask.Unwrap() before calling this method if this UserTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (ut *UserTask) Update() *UserTaskUpdateOne {
	return NewUserTaskClient(ut.config).UpdateOne(ut)
}

// Unwrap unwraps the UserTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ut *UserTask) Unwrap() *UserTask {
	_tx, ok := ut.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserTask is not a transactional entity")
	}
	ut.config.driver = _tx.drv
	return ut
}

// String implements the fmt.Stringer.
func (ut *UserTask) String() string {
	var builder strings.Builder
	builder.WriteString("UserTask(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ut.ID))
	builder.WriteString("task_id=")
	builder.WriteString(ut.TaskID)
	builder.WriteString(", ")
	builder.WriteString("inst_id=")
	builder.WriteString(ut.InstID)
	builder.WriteString(", ")
	builder.WriteString("exec_id=")
	builder.WriteString(ut.ExecID)
	builder.WriteString(", ")
	builder.WriteString("busi_key=")
	builder.WriteString(ut.BusiKey)
	builder.WriteString(", ")
	builder.WriteString("busi_type=")
	builder.WriteString(ut.BusiType)
	builder.WriteString(", ")
	builder.WriteString("form_key=")
	builder.WriteString(ut.FormKey)
	builder.WriteString(", ")
	builder.WriteString("act_id=")
	builder.WriteString(ut.ActID)
	builder.WriteString(", ")
	builder.WriteString("act_name=")
	builder.WriteString(ut.ActName)
	builder.WriteString(", ")
	builder.WriteString("owner=")
	builder.WriteString(ut.Owner)
	builder.WriteString(", ")
	builder.WriteString("assignee=")
	builder.WriteString(ut.Assignee)
	builder.WriteString(", ")
	builder.WriteString("candidate_users=")
	builder.WriteString(ut.CandidateUsers)
	builder.WriteString(", ")
	builder.WriteString("candidate_groups=")
	builder.WriteString(ut.CandidateGroups)
	builder.WriteString(", ")
	builder.WriteString("operator=")
	builder.WriteString(ut.Operator)
	builder.WriteString(", ")
	builder.WriteString("input=")
	builder.WriteString(fmt.Sprintf("%v", ut.Input))
	builder.WriteString(", ")
	builder.WriteString("batch_no=")
	builder.WriteString(ut.BatchNo)
	builder.WriteString(", ")
	builder.WriteString("result=")
	builder.WriteString(fmt.Sprintf("%v", ut.Result))
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(ut.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(ut.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ut.Status))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", ut.Version))
	builder.WriteByte(')')
	return builder.String()
}

// UserTasks is a parsable slice of UserTask.
type UserTasks []*UserTask
