// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/it512/loong/pgx/internal/ent/exec"
	"github.com/it512/loong/pgx/internal/ent/predicate"
)

// ExecUpdate is the builder for updating Exec entities.
type ExecUpdate struct {
	config
	hooks    []Hook
	mutation *ExecMutation
}

// Where appends a list predicates to the ExecUpdate builder.
func (eu *ExecUpdate) Where(ps ...predicate.Exec) *ExecUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetJoinTag sets the "join_tag" field.
func (eu *ExecUpdate) SetJoinTag(s string) *ExecUpdate {
	eu.mutation.SetJoinTag(s)
	return eu
}

// SetNillableJoinTag sets the "join_tag" field if the given value is not nil.
func (eu *ExecUpdate) SetNillableJoinTag(s *string) *ExecUpdate {
	if s != nil {
		eu.SetJoinTag(*s)
	}
	return eu
}

// ClearJoinTag clears the value of the "join_tag" field.
func (eu *ExecUpdate) ClearJoinTag() *ExecUpdate {
	eu.mutation.ClearJoinTag()
	return eu
}

// SetGwType sets the "gw_type" field.
func (eu *ExecUpdate) SetGwType(i int) *ExecUpdate {
	eu.mutation.ResetGwType()
	eu.mutation.SetGwType(i)
	return eu
}

// SetNillableGwType sets the "gw_type" field if the given value is not nil.
func (eu *ExecUpdate) SetNillableGwType(i *int) *ExecUpdate {
	if i != nil {
		eu.SetGwType(*i)
	}
	return eu
}

// AddGwType adds i to the "gw_type" field.
func (eu *ExecUpdate) AddGwType(i int) *ExecUpdate {
	eu.mutation.AddGwType(i)
	return eu
}

// SetStatus sets the "status" field.
func (eu *ExecUpdate) SetStatus(i int) *ExecUpdate {
	eu.mutation.ResetStatus()
	eu.mutation.SetStatus(i)
	return eu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (eu *ExecUpdate) SetNillableStatus(i *int) *ExecUpdate {
	if i != nil {
		eu.SetStatus(*i)
	}
	return eu
}

// AddStatus adds i to the "status" field.
func (eu *ExecUpdate) AddStatus(i int) *ExecUpdate {
	eu.mutation.AddStatus(i)
	return eu
}

// SetVersion sets the "version" field.
func (eu *ExecUpdate) SetVersion(i int) *ExecUpdate {
	eu.mutation.ResetVersion()
	eu.mutation.SetVersion(i)
	return eu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (eu *ExecUpdate) SetNillableVersion(i *int) *ExecUpdate {
	if i != nil {
		eu.SetVersion(*i)
	}
	return eu
}

// AddVersion adds i to the "version" field.
func (eu *ExecUpdate) AddVersion(i int) *ExecUpdate {
	eu.mutation.AddVersion(i)
	return eu
}

// Mutation returns the ExecMutation object of the builder.
func (eu *ExecUpdate) Mutation() *ExecMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExecUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExecUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExecUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExecUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *ExecUpdate) check() error {
	if v, ok := eu.mutation.JoinTag(); ok {
		if err := exec.JoinTagValidator(v); err != nil {
			return &ValidationError{Name: "join_tag", err: fmt.Errorf(`ent: validator failed for field "Exec.join_tag": %w`, err)}
		}
	}
	return nil
}

func (eu *ExecUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(exec.Table, exec.Columns, sqlgraph.NewFieldSpec(exec.FieldID, field.TypeUUID))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.JoinTag(); ok {
		_spec.SetField(exec.FieldJoinTag, field.TypeString, value)
	}
	if eu.mutation.JoinTagCleared() {
		_spec.ClearField(exec.FieldJoinTag, field.TypeString)
	}
	if value, ok := eu.mutation.GwType(); ok {
		_spec.SetField(exec.FieldGwType, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedGwType(); ok {
		_spec.AddField(exec.FieldGwType, field.TypeInt, value)
	}
	if value, ok := eu.mutation.Status(); ok {
		_spec.SetField(exec.FieldStatus, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedStatus(); ok {
		_spec.AddField(exec.FieldStatus, field.TypeInt, value)
	}
	if value, ok := eu.mutation.Version(); ok {
		_spec.SetField(exec.FieldVersion, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedVersion(); ok {
		_spec.AddField(exec.FieldVersion, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exec.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// ExecUpdateOne is the builder for updating a single Exec entity.
type ExecUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExecMutation
}

// SetJoinTag sets the "join_tag" field.
func (euo *ExecUpdateOne) SetJoinTag(s string) *ExecUpdateOne {
	euo.mutation.SetJoinTag(s)
	return euo
}

// SetNillableJoinTag sets the "join_tag" field if the given value is not nil.
func (euo *ExecUpdateOne) SetNillableJoinTag(s *string) *ExecUpdateOne {
	if s != nil {
		euo.SetJoinTag(*s)
	}
	return euo
}

// ClearJoinTag clears the value of the "join_tag" field.
func (euo *ExecUpdateOne) ClearJoinTag() *ExecUpdateOne {
	euo.mutation.ClearJoinTag()
	return euo
}

// SetGwType sets the "gw_type" field.
func (euo *ExecUpdateOne) SetGwType(i int) *ExecUpdateOne {
	euo.mutation.ResetGwType()
	euo.mutation.SetGwType(i)
	return euo
}

// SetNillableGwType sets the "gw_type" field if the given value is not nil.
func (euo *ExecUpdateOne) SetNillableGwType(i *int) *ExecUpdateOne {
	if i != nil {
		euo.SetGwType(*i)
	}
	return euo
}

// AddGwType adds i to the "gw_type" field.
func (euo *ExecUpdateOne) AddGwType(i int) *ExecUpdateOne {
	euo.mutation.AddGwType(i)
	return euo
}

// SetStatus sets the "status" field.
func (euo *ExecUpdateOne) SetStatus(i int) *ExecUpdateOne {
	euo.mutation.ResetStatus()
	euo.mutation.SetStatus(i)
	return euo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (euo *ExecUpdateOne) SetNillableStatus(i *int) *ExecUpdateOne {
	if i != nil {
		euo.SetStatus(*i)
	}
	return euo
}

// AddStatus adds i to the "status" field.
func (euo *ExecUpdateOne) AddStatus(i int) *ExecUpdateOne {
	euo.mutation.AddStatus(i)
	return euo
}

// SetVersion sets the "version" field.
func (euo *ExecUpdateOne) SetVersion(i int) *ExecUpdateOne {
	euo.mutation.ResetVersion()
	euo.mutation.SetVersion(i)
	return euo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (euo *ExecUpdateOne) SetNillableVersion(i *int) *ExecUpdateOne {
	if i != nil {
		euo.SetVersion(*i)
	}
	return euo
}

// AddVersion adds i to the "version" field.
func (euo *ExecUpdateOne) AddVersion(i int) *ExecUpdateOne {
	euo.mutation.AddVersion(i)
	return euo
}

// Mutation returns the ExecMutation object of the builder.
func (euo *ExecUpdateOne) Mutation() *ExecMutation {
	return euo.mutation
}

// Where appends a list predicates to the ExecUpdate builder.
func (euo *ExecUpdateOne) Where(ps ...predicate.Exec) *ExecUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExecUpdateOne) Select(field string, fields ...string) *ExecUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Exec entity.
func (euo *ExecUpdateOne) Save(ctx context.Context) (*Exec, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExecUpdateOne) SaveX(ctx context.Context) *Exec {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExecUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExecUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *ExecUpdateOne) check() error {
	if v, ok := euo.mutation.JoinTag(); ok {
		if err := exec.JoinTagValidator(v); err != nil {
			return &ValidationError{Name: "join_tag", err: fmt.Errorf(`ent: validator failed for field "Exec.join_tag": %w`, err)}
		}
	}
	return nil
}

func (euo *ExecUpdateOne) sqlSave(ctx context.Context) (_node *Exec, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(exec.Table, exec.Columns, sqlgraph.NewFieldSpec(exec.FieldID, field.TypeUUID))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Exec.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exec.FieldID)
		for _, f := range fields {
			if !exec.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exec.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.JoinTag(); ok {
		_spec.SetField(exec.FieldJoinTag, field.TypeString, value)
	}
	if euo.mutation.JoinTagCleared() {
		_spec.ClearField(exec.FieldJoinTag, field.TypeString)
	}
	if value, ok := euo.mutation.GwType(); ok {
		_spec.SetField(exec.FieldGwType, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedGwType(); ok {
		_spec.AddField(exec.FieldGwType, field.TypeInt, value)
	}
	if value, ok := euo.mutation.Status(); ok {
		_spec.SetField(exec.FieldStatus, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedStatus(); ok {
		_spec.AddField(exec.FieldStatus, field.TypeInt, value)
	}
	if value, ok := euo.mutation.Version(); ok {
		_spec.SetField(exec.FieldVersion, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedVersion(); ok {
		_spec.AddField(exec.FieldVersion, field.TypeInt, value)
	}
	_node = &Exec{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exec.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
