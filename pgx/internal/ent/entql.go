// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/it512/loong/pgx/internal/ent/exec"
	"github.com/it512/loong/pgx/internal/ent/inst"
	"github.com/it512/loong/pgx/internal/ent/usertask"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 3)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   exec.Table,
			Columns: exec.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: exec.FieldID,
			},
		},
		Type: "Exec",
		Fields: map[string]*sqlgraph.FieldSpec{
			exec.FieldExecID:       {Type: field.TypeString, Column: exec.FieldExecID},
			exec.FieldInstID:       {Type: field.TypeString, Column: exec.FieldInstID},
			exec.FieldParentForkID: {Type: field.TypeString, Column: exec.FieldParentForkID},
			exec.FieldForkID:       {Type: field.TypeString, Column: exec.FieldForkID},
			exec.FieldForkTag:      {Type: field.TypeString, Column: exec.FieldForkTag},
			exec.FieldOutTag:       {Type: field.TypeString, Column: exec.FieldOutTag},
			exec.FieldJoinTag:      {Type: field.TypeString, Column: exec.FieldJoinTag},
			exec.FieldGwType:       {Type: field.TypeInt, Column: exec.FieldGwType},
			exec.FieldStatus:       {Type: field.TypeInt, Column: exec.FieldStatus},
			exec.FieldVersion:      {Type: field.TypeInt, Column: exec.FieldVersion},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   inst.Table,
			Columns: inst.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: inst.FieldID,
			},
		},
		Type: "Inst",
		Fields: map[string]*sqlgraph.FieldSpec{
			inst.FieldInstID:    {Type: field.TypeString, Column: inst.FieldInstID},
			inst.FieldProcID:    {Type: field.TypeString, Column: inst.FieldProcID},
			inst.FieldBusiKey:   {Type: field.TypeString, Column: inst.FieldBusiKey},
			inst.FieldBusiType:  {Type: field.TypeString, Column: inst.FieldBusiType},
			inst.FieldStarter:   {Type: field.TypeString, Column: inst.FieldStarter},
			inst.FieldStartTime: {Type: field.TypeTime, Column: inst.FieldStartTime},
			inst.FieldEndTime:   {Type: field.TypeTime, Column: inst.FieldEndTime},
			inst.FieldInit:      {Type: field.TypeJSON, Column: inst.FieldInit},
			inst.FieldStatus:    {Type: field.TypeInt, Column: inst.FieldStatus},
			inst.FieldVersion:   {Type: field.TypeInt, Column: inst.FieldVersion},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   usertask.Table,
			Columns: usertask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: usertask.FieldID,
			},
		},
		Type: "UserTask",
		Fields: map[string]*sqlgraph.FieldSpec{
			usertask.FieldTaskID:          {Type: field.TypeString, Column: usertask.FieldTaskID},
			usertask.FieldInstID:          {Type: field.TypeString, Column: usertask.FieldInstID},
			usertask.FieldExecID:          {Type: field.TypeString, Column: usertask.FieldExecID},
			usertask.FieldBusiKey:         {Type: field.TypeString, Column: usertask.FieldBusiKey},
			usertask.FieldBusiType:        {Type: field.TypeString, Column: usertask.FieldBusiType},
			usertask.FieldFormKey:         {Type: field.TypeString, Column: usertask.FieldFormKey},
			usertask.FieldActID:           {Type: field.TypeString, Column: usertask.FieldActID},
			usertask.FieldActName:         {Type: field.TypeString, Column: usertask.FieldActName},
			usertask.FieldOwner:           {Type: field.TypeString, Column: usertask.FieldOwner},
			usertask.FieldAssignee:        {Type: field.TypeString, Column: usertask.FieldAssignee},
			usertask.FieldCandidateUsers:  {Type: field.TypeString, Column: usertask.FieldCandidateUsers},
			usertask.FieldCandidateGroups: {Type: field.TypeString, Column: usertask.FieldCandidateGroups},
			usertask.FieldOperator:        {Type: field.TypeString, Column: usertask.FieldOperator},
			usertask.FieldInput:           {Type: field.TypeJSON, Column: usertask.FieldInput},
			usertask.FieldBatchNo:         {Type: field.TypeString, Column: usertask.FieldBatchNo},
			usertask.FieldResult:          {Type: field.TypeInt, Column: usertask.FieldResult},
			usertask.FieldStartTime:       {Type: field.TypeTime, Column: usertask.FieldStartTime},
			usertask.FieldEndTime:         {Type: field.TypeTime, Column: usertask.FieldEndTime},
			usertask.FieldStatus:          {Type: field.TypeInt, Column: usertask.FieldStatus},
			usertask.FieldVersion:         {Type: field.TypeInt, Column: usertask.FieldVersion},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (eq *ExecQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ExecQuery builder.
func (eq *ExecQuery) Filter() *ExecFilter {
	return &ExecFilter{config: eq.config, predicateAdder: eq}
}

// addPredicate implements the predicateAdder interface.
func (m *ExecMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ExecMutation builder.
func (m *ExecMutation) Filter() *ExecFilter {
	return &ExecFilter{config: m.config, predicateAdder: m}
}

// ExecFilter provides a generic filtering capability at runtime for ExecQuery.
type ExecFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ExecFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *ExecFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(exec.FieldID))
}

// WhereExecID applies the entql string predicate on the exec_id field.
func (f *ExecFilter) WhereExecID(p entql.StringP) {
	f.Where(p.Field(exec.FieldExecID))
}

// WhereInstID applies the entql string predicate on the inst_id field.
func (f *ExecFilter) WhereInstID(p entql.StringP) {
	f.Where(p.Field(exec.FieldInstID))
}

// WhereParentForkID applies the entql string predicate on the parent_fork_id field.
func (f *ExecFilter) WhereParentForkID(p entql.StringP) {
	f.Where(p.Field(exec.FieldParentForkID))
}

// WhereForkID applies the entql string predicate on the fork_id field.
func (f *ExecFilter) WhereForkID(p entql.StringP) {
	f.Where(p.Field(exec.FieldForkID))
}

// WhereForkTag applies the entql string predicate on the fork_tag field.
func (f *ExecFilter) WhereForkTag(p entql.StringP) {
	f.Where(p.Field(exec.FieldForkTag))
}

// WhereOutTag applies the entql string predicate on the out_tag field.
func (f *ExecFilter) WhereOutTag(p entql.StringP) {
	f.Where(p.Field(exec.FieldOutTag))
}

// WhereJoinTag applies the entql string predicate on the join_tag field.
func (f *ExecFilter) WhereJoinTag(p entql.StringP) {
	f.Where(p.Field(exec.FieldJoinTag))
}

// WhereGwType applies the entql int predicate on the gw_type field.
func (f *ExecFilter) WhereGwType(p entql.IntP) {
	f.Where(p.Field(exec.FieldGwType))
}

// WhereStatus applies the entql int predicate on the status field.
func (f *ExecFilter) WhereStatus(p entql.IntP) {
	f.Where(p.Field(exec.FieldStatus))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *ExecFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(exec.FieldVersion))
}

// addPredicate implements the predicateAdder interface.
func (iq *InstQuery) addPredicate(pred func(s *sql.Selector)) {
	iq.predicates = append(iq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the InstQuery builder.
func (iq *InstQuery) Filter() *InstFilter {
	return &InstFilter{config: iq.config, predicateAdder: iq}
}

// addPredicate implements the predicateAdder interface.
func (m *InstMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the InstMutation builder.
func (m *InstMutation) Filter() *InstFilter {
	return &InstFilter{config: m.config, predicateAdder: m}
}

// InstFilter provides a generic filtering capability at runtime for InstQuery.
type InstFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *InstFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *InstFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(inst.FieldID))
}

// WhereInstID applies the entql string predicate on the inst_id field.
func (f *InstFilter) WhereInstID(p entql.StringP) {
	f.Where(p.Field(inst.FieldInstID))
}

// WhereProcID applies the entql string predicate on the proc_id field.
func (f *InstFilter) WhereProcID(p entql.StringP) {
	f.Where(p.Field(inst.FieldProcID))
}

// WhereBusiKey applies the entql string predicate on the busi_key field.
func (f *InstFilter) WhereBusiKey(p entql.StringP) {
	f.Where(p.Field(inst.FieldBusiKey))
}

// WhereBusiType applies the entql string predicate on the busi_type field.
func (f *InstFilter) WhereBusiType(p entql.StringP) {
	f.Where(p.Field(inst.FieldBusiType))
}

// WhereStarter applies the entql string predicate on the starter field.
func (f *InstFilter) WhereStarter(p entql.StringP) {
	f.Where(p.Field(inst.FieldStarter))
}

// WhereStartTime applies the entql time.Time predicate on the start_time field.
func (f *InstFilter) WhereStartTime(p entql.TimeP) {
	f.Where(p.Field(inst.FieldStartTime))
}

// WhereEndTime applies the entql time.Time predicate on the end_time field.
func (f *InstFilter) WhereEndTime(p entql.TimeP) {
	f.Where(p.Field(inst.FieldEndTime))
}

// WhereInit applies the entql json.RawMessage predicate on the init field.
func (f *InstFilter) WhereInit(p entql.BytesP) {
	f.Where(p.Field(inst.FieldInit))
}

// WhereStatus applies the entql int predicate on the status field.
func (f *InstFilter) WhereStatus(p entql.IntP) {
	f.Where(p.Field(inst.FieldStatus))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *InstFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(inst.FieldVersion))
}

// addPredicate implements the predicateAdder interface.
func (utq *UserTaskQuery) addPredicate(pred func(s *sql.Selector)) {
	utq.predicates = append(utq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserTaskQuery builder.
func (utq *UserTaskQuery) Filter() *UserTaskFilter {
	return &UserTaskFilter{config: utq.config, predicateAdder: utq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserTaskMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserTaskMutation builder.
func (m *UserTaskMutation) Filter() *UserTaskFilter {
	return &UserTaskFilter{config: m.config, predicateAdder: m}
}

// UserTaskFilter provides a generic filtering capability at runtime for UserTaskQuery.
type UserTaskFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserTaskFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *UserTaskFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(usertask.FieldID))
}

// WhereTaskID applies the entql string predicate on the task_id field.
func (f *UserTaskFilter) WhereTaskID(p entql.StringP) {
	f.Where(p.Field(usertask.FieldTaskID))
}

// WhereInstID applies the entql string predicate on the inst_id field.
func (f *UserTaskFilter) WhereInstID(p entql.StringP) {
	f.Where(p.Field(usertask.FieldInstID))
}

// WhereExecID applies the entql string predicate on the exec_id field.
func (f *UserTaskFilter) WhereExecID(p entql.StringP) {
	f.Where(p.Field(usertask.FieldExecID))
}

// WhereBusiKey applies the entql string predicate on the busi_key field.
func (f *UserTaskFilter) WhereBusiKey(p entql.StringP) {
	f.Where(p.Field(usertask.FieldBusiKey))
}

// WhereBusiType applies the entql string predicate on the busi_type field.
func (f *UserTaskFilter) WhereBusiType(p entql.StringP) {
	f.Where(p.Field(usertask.FieldBusiType))
}

// WhereFormKey applies the entql string predicate on the form_key field.
func (f *UserTaskFilter) WhereFormKey(p entql.StringP) {
	f.Where(p.Field(usertask.FieldFormKey))
}

// WhereActID applies the entql string predicate on the act_id field.
func (f *UserTaskFilter) WhereActID(p entql.StringP) {
	f.Where(p.Field(usertask.FieldActID))
}

// WhereActName applies the entql string predicate on the act_name field.
func (f *UserTaskFilter) WhereActName(p entql.StringP) {
	f.Where(p.Field(usertask.FieldActName))
}

// WhereOwner applies the entql string predicate on the owner field.
func (f *UserTaskFilter) WhereOwner(p entql.StringP) {
	f.Where(p.Field(usertask.FieldOwner))
}

// WhereAssignee applies the entql string predicate on the assignee field.
func (f *UserTaskFilter) WhereAssignee(p entql.StringP) {
	f.Where(p.Field(usertask.FieldAssignee))
}

// WhereCandidateUsers applies the entql string predicate on the candidate_users field.
func (f *UserTaskFilter) WhereCandidateUsers(p entql.StringP) {
	f.Where(p.Field(usertask.FieldCandidateUsers))
}

// WhereCandidateGroups applies the entql string predicate on the candidate_groups field.
func (f *UserTaskFilter) WhereCandidateGroups(p entql.StringP) {
	f.Where(p.Field(usertask.FieldCandidateGroups))
}

// WhereOperator applies the entql string predicate on the operator field.
func (f *UserTaskFilter) WhereOperator(p entql.StringP) {
	f.Where(p.Field(usertask.FieldOperator))
}

// WhereInput applies the entql json.RawMessage predicate on the input field.
func (f *UserTaskFilter) WhereInput(p entql.BytesP) {
	f.Where(p.Field(usertask.FieldInput))
}

// WhereBatchNo applies the entql string predicate on the batch_no field.
func (f *UserTaskFilter) WhereBatchNo(p entql.StringP) {
	f.Where(p.Field(usertask.FieldBatchNo))
}

// WhereResult applies the entql int predicate on the result field.
func (f *UserTaskFilter) WhereResult(p entql.IntP) {
	f.Where(p.Field(usertask.FieldResult))
}

// WhereStartTime applies the entql time.Time predicate on the start_time field.
func (f *UserTaskFilter) WhereStartTime(p entql.TimeP) {
	f.Where(p.Field(usertask.FieldStartTime))
}

// WhereEndTime applies the entql time.Time predicate on the end_time field.
func (f *UserTaskFilter) WhereEndTime(p entql.TimeP) {
	f.Where(p.Field(usertask.FieldEndTime))
}

// WhereStatus applies the entql int predicate on the status field.
func (f *UserTaskFilter) WhereStatus(p entql.IntP) {
	f.Where(p.Field(usertask.FieldStatus))
}

// WhereVersion applies the entql int predicate on the version field.
func (f *UserTaskFilter) WhereVersion(p entql.IntP) {
	f.Where(p.Field(usertask.FieldVersion))
}
