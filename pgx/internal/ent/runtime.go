// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
	"github.com/it512/loong"
	"github.com/it512/loong/pgx/internal/ent/exec"
	"github.com/it512/loong/pgx/internal/ent/inst"
	"github.com/it512/loong/pgx/internal/ent/schema"
	"github.com/it512/loong/pgx/internal/ent/usertask"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	execFields := schema.Exec{}.Fields()
	_ = execFields
	// execDescExecID is the schema descriptor for exec_id field.
	execDescExecID := execFields[1].Descriptor()
	// exec.ExecIDValidator is a validator for the "exec_id" field. It is called by the builders before save.
	exec.ExecIDValidator = func() func(string) error {
		validators := execDescExecID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(exec_id string) error {
			for _, fn := range fns {
				if err := fn(exec_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// execDescInstID is the schema descriptor for inst_id field.
	execDescInstID := execFields[2].Descriptor()
	// exec.InstIDValidator is a validator for the "inst_id" field. It is called by the builders before save.
	exec.InstIDValidator = func() func(string) error {
		validators := execDescInstID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(inst_id string) error {
			for _, fn := range fns {
				if err := fn(inst_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// execDescParentForkID is the schema descriptor for parent_fork_id field.
	execDescParentForkID := execFields[3].Descriptor()
	// exec.ParentForkIDValidator is a validator for the "parent_fork_id" field. It is called by the builders before save.
	exec.ParentForkIDValidator = execDescParentForkID.Validators[0].(func(string) error)
	// execDescForkID is the schema descriptor for fork_id field.
	execDescForkID := execFields[4].Descriptor()
	// exec.ForkIDValidator is a validator for the "fork_id" field. It is called by the builders before save.
	exec.ForkIDValidator = func() func(string) error {
		validators := execDescForkID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(fork_id string) error {
			for _, fn := range fns {
				if err := fn(fork_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// execDescForkTag is the schema descriptor for fork_tag field.
	execDescForkTag := execFields[5].Descriptor()
	// exec.ForkTagValidator is a validator for the "fork_tag" field. It is called by the builders before save.
	exec.ForkTagValidator = func() func(string) error {
		validators := execDescForkTag.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(fork_tag string) error {
			for _, fn := range fns {
				if err := fn(fork_tag); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// execDescOutTag is the schema descriptor for out_tag field.
	execDescOutTag := execFields[6].Descriptor()
	// exec.OutTagValidator is a validator for the "out_tag" field. It is called by the builders before save.
	exec.OutTagValidator = func() func(string) error {
		validators := execDescOutTag.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(out_tag string) error {
			for _, fn := range fns {
				if err := fn(out_tag); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// execDescJoinTag is the schema descriptor for join_tag field.
	execDescJoinTag := execFields[7].Descriptor()
	// exec.JoinTagValidator is a validator for the "join_tag" field. It is called by the builders before save.
	exec.JoinTagValidator = execDescJoinTag.Validators[0].(func(string) error)
	// execDescGwType is the schema descriptor for gw_type field.
	execDescGwType := execFields[8].Descriptor()
	// exec.DefaultGwType holds the default value on creation for the gw_type field.
	exec.DefaultGwType = execDescGwType.Default.(int)
	// execDescStatus is the schema descriptor for status field.
	execDescStatus := execFields[9].Descriptor()
	// exec.DefaultStatus holds the default value on creation for the status field.
	exec.DefaultStatus = execDescStatus.Default.(int)
	// execDescVersion is the schema descriptor for version field.
	execDescVersion := execFields[10].Descriptor()
	// exec.DefaultVersion holds the default value on creation for the version field.
	exec.DefaultVersion = execDescVersion.Default.(int)
	// execDescID is the schema descriptor for id field.
	execDescID := execFields[0].Descriptor()
	// exec.DefaultID holds the default value on creation for the id field.
	exec.DefaultID = execDescID.Default.(func() uuid.UUID)
	instFields := schema.Inst{}.Fields()
	_ = instFields
	// instDescInstID is the schema descriptor for inst_id field.
	instDescInstID := instFields[1].Descriptor()
	// inst.InstIDValidator is a validator for the "inst_id" field. It is called by the builders before save.
	inst.InstIDValidator = func() func(string) error {
		validators := instDescInstID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(inst_id string) error {
			for _, fn := range fns {
				if err := fn(inst_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// instDescProcID is the schema descriptor for proc_id field.
	instDescProcID := instFields[2].Descriptor()
	// inst.ProcIDValidator is a validator for the "proc_id" field. It is called by the builders before save.
	inst.ProcIDValidator = func() func(string) error {
		validators := instDescProcID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(proc_id string) error {
			for _, fn := range fns {
				if err := fn(proc_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// instDescBusiKey is the schema descriptor for busi_key field.
	instDescBusiKey := instFields[3].Descriptor()
	// inst.BusiKeyValidator is a validator for the "busi_key" field. It is called by the builders before save.
	inst.BusiKeyValidator = func() func(string) error {
		validators := instDescBusiKey.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(busi_key string) error {
			for _, fn := range fns {
				if err := fn(busi_key); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// instDescBusiType is the schema descriptor for busi_type field.
	instDescBusiType := instFields[4].Descriptor()
	// inst.BusiTypeValidator is a validator for the "busi_type" field. It is called by the builders before save.
	inst.BusiTypeValidator = func() func(string) error {
		validators := instDescBusiType.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(busi_type string) error {
			for _, fn := range fns {
				if err := fn(busi_type); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// instDescStarter is the schema descriptor for starter field.
	instDescStarter := instFields[5].Descriptor()
	// inst.StarterValidator is a validator for the "starter" field. It is called by the builders before save.
	inst.StarterValidator = func() func(string) error {
		validators := instDescStarter.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(starter string) error {
			for _, fn := range fns {
				if err := fn(starter); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// instDescStartTime is the schema descriptor for start_time field.
	instDescStartTime := instFields[6].Descriptor()
	// inst.DefaultStartTime holds the default value on creation for the start_time field.
	inst.DefaultStartTime = instDescStartTime.Default.(func() time.Time)
	// instDescInit is the schema descriptor for init field.
	instDescInit := instFields[8].Descriptor()
	// inst.DefaultInit holds the default value on creation for the init field.
	inst.DefaultInit = instDescInit.Default.(loong.Var)
	// instDescStatus is the schema descriptor for status field.
	instDescStatus := instFields[9].Descriptor()
	// inst.DefaultStatus holds the default value on creation for the status field.
	inst.DefaultStatus = instDescStatus.Default.(int)
	// instDescVersion is the schema descriptor for version field.
	instDescVersion := instFields[10].Descriptor()
	// inst.DefaultVersion holds the default value on creation for the version field.
	inst.DefaultVersion = instDescVersion.Default.(int)
	// instDescID is the schema descriptor for id field.
	instDescID := instFields[0].Descriptor()
	// inst.DefaultID holds the default value on creation for the id field.
	inst.DefaultID = instDescID.Default.(func() uuid.UUID)
	usertaskFields := schema.UserTask{}.Fields()
	_ = usertaskFields
	// usertaskDescTaskID is the schema descriptor for task_id field.
	usertaskDescTaskID := usertaskFields[1].Descriptor()
	// usertask.DefaultTaskID holds the default value on creation for the task_id field.
	usertask.DefaultTaskID = usertaskDescTaskID.Default.(func() string)
	// usertask.TaskIDValidator is a validator for the "task_id" field. It is called by the builders before save.
	usertask.TaskIDValidator = func() func(string) error {
		validators := usertaskDescTaskID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(task_id string) error {
			for _, fn := range fns {
				if err := fn(task_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// usertaskDescInstID is the schema descriptor for inst_id field.
	usertaskDescInstID := usertaskFields[2].Descriptor()
	// usertask.InstIDValidator is a validator for the "inst_id" field. It is called by the builders before save.
	usertask.InstIDValidator = func() func(string) error {
		validators := usertaskDescInstID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(inst_id string) error {
			for _, fn := range fns {
				if err := fn(inst_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// usertaskDescExecID is the schema descriptor for exec_id field.
	usertaskDescExecID := usertaskFields[3].Descriptor()
	// usertask.ExecIDValidator is a validator for the "exec_id" field. It is called by the builders before save.
	usertask.ExecIDValidator = usertaskDescExecID.Validators[0].(func(string) error)
	// usertaskDescBusiKey is the schema descriptor for busi_key field.
	usertaskDescBusiKey := usertaskFields[4].Descriptor()
	// usertask.BusiKeyValidator is a validator for the "busi_key" field. It is called by the builders before save.
	usertask.BusiKeyValidator = func() func(string) error {
		validators := usertaskDescBusiKey.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(busi_key string) error {
			for _, fn := range fns {
				if err := fn(busi_key); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// usertaskDescBusiType is the schema descriptor for busi_type field.
	usertaskDescBusiType := usertaskFields[5].Descriptor()
	// usertask.BusiTypeValidator is a validator for the "busi_type" field. It is called by the builders before save.
	usertask.BusiTypeValidator = func() func(string) error {
		validators := usertaskDescBusiType.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(busi_type string) error {
			for _, fn := range fns {
				if err := fn(busi_type); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// usertaskDescFormKey is the schema descriptor for form_key field.
	usertaskDescFormKey := usertaskFields[6].Descriptor()
	// usertask.FormKeyValidator is a validator for the "form_key" field. It is called by the builders before save.
	usertask.FormKeyValidator = usertaskDescFormKey.Validators[0].(func(string) error)
	// usertaskDescActID is the schema descriptor for act_id field.
	usertaskDescActID := usertaskFields[7].Descriptor()
	// usertask.ActIDValidator is a validator for the "act_id" field. It is called by the builders before save.
	usertask.ActIDValidator = func() func(string) error {
		validators := usertaskDescActID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(act_id string) error {
			for _, fn := range fns {
				if err := fn(act_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// usertaskDescActName is the schema descriptor for act_name field.
	usertaskDescActName := usertaskFields[8].Descriptor()
	// usertask.ActNameValidator is a validator for the "act_name" field. It is called by the builders before save.
	usertask.ActNameValidator = usertaskDescActName.Validators[0].(func(string) error)
	// usertaskDescOwner is the schema descriptor for owner field.
	usertaskDescOwner := usertaskFields[9].Descriptor()
	// usertask.OwnerValidator is a validator for the "owner" field. It is called by the builders before save.
	usertask.OwnerValidator = usertaskDescOwner.Validators[0].(func(string) error)
	// usertaskDescAssignee is the schema descriptor for assignee field.
	usertaskDescAssignee := usertaskFields[10].Descriptor()
	// usertask.AssigneeValidator is a validator for the "assignee" field. It is called by the builders before save.
	usertask.AssigneeValidator = usertaskDescAssignee.Validators[0].(func(string) error)
	// usertaskDescCandidateUsers is the schema descriptor for candidate_users field.
	usertaskDescCandidateUsers := usertaskFields[11].Descriptor()
	// usertask.CandidateUsersValidator is a validator for the "candidate_users" field. It is called by the builders before save.
	usertask.CandidateUsersValidator = usertaskDescCandidateUsers.Validators[0].(func(string) error)
	// usertaskDescCandidateGroups is the schema descriptor for candidate_groups field.
	usertaskDescCandidateGroups := usertaskFields[12].Descriptor()
	// usertask.CandidateGroupsValidator is a validator for the "candidate_groups" field. It is called by the builders before save.
	usertask.CandidateGroupsValidator = usertaskDescCandidateGroups.Validators[0].(func(string) error)
	// usertaskDescOperator is the schema descriptor for operator field.
	usertaskDescOperator := usertaskFields[13].Descriptor()
	// usertask.OperatorValidator is a validator for the "operator" field. It is called by the builders before save.
	usertask.OperatorValidator = usertaskDescOperator.Validators[0].(func(string) error)
	// usertaskDescInput is the schema descriptor for input field.
	usertaskDescInput := usertaskFields[14].Descriptor()
	// usertask.DefaultInput holds the default value on creation for the input field.
	usertask.DefaultInput = usertaskDescInput.Default.(loong.Var)
	// usertaskDescBatchNo is the schema descriptor for batch_no field.
	usertaskDescBatchNo := usertaskFields[15].Descriptor()
	// usertask.BatchNoValidator is a validator for the "batch_no" field. It is called by the builders before save.
	usertask.BatchNoValidator = func() func(string) error {
		validators := usertaskDescBatchNo.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(batch_no string) error {
			for _, fn := range fns {
				if err := fn(batch_no); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// usertaskDescResult is the schema descriptor for result field.
	usertaskDescResult := usertaskFields[16].Descriptor()
	// usertask.DefaultResult holds the default value on creation for the result field.
	usertask.DefaultResult = usertaskDescResult.Default.(int)
	// usertaskDescStartTime is the schema descriptor for start_time field.
	usertaskDescStartTime := usertaskFields[17].Descriptor()
	// usertask.DefaultStartTime holds the default value on creation for the start_time field.
	usertask.DefaultStartTime = usertaskDescStartTime.Default.(func() time.Time)
	// usertaskDescStatus is the schema descriptor for status field.
	usertaskDescStatus := usertaskFields[19].Descriptor()
	// usertask.DefaultStatus holds the default value on creation for the status field.
	usertask.DefaultStatus = usertaskDescStatus.Default.(int)
	// usertaskDescVersion is the schema descriptor for version field.
	usertaskDescVersion := usertaskFields[20].Descriptor()
	// usertask.DefaultVersion holds the default value on creation for the version field.
	usertask.DefaultVersion = usertaskDescVersion.Default.(int)
	// usertaskDescID is the schema descriptor for id field.
	usertaskDescID := usertaskFields[0].Descriptor()
	// usertask.DefaultID holds the default value on creation for the id field.
	usertask.DefaultID = usertaskDescID.Default.(func() uuid.UUID)
}
