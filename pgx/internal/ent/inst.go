// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/it512/loong"
	"github.com/it512/loong/pgx/internal/ent/inst"
)

// Inst is the model entity for the Inst schema.
type Inst struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// InstID holds the value of the "inst_id" field.
	InstID string `json:"inst_id,omitempty"`
	// ProcID holds the value of the "proc_id" field.
	ProcID string `json:"proc_id,omitempty"`
	// BusiKey holds the value of the "busi_key" field.
	BusiKey string `json:"busi_key,omitempty"`
	// BusiType holds the value of the "busi_type" field.
	BusiType string `json:"busi_type,omitempty"`
	// Starter holds the value of the "starter" field.
	Starter string `json:"starter,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// Init holds the value of the "init" field.
	Init loong.Var `json:"init,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// Version holds the value of the "version" field.
	Version      int `json:"version,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Inst) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case inst.FieldInit:
			values[i] = new([]byte)
		case inst.FieldStatus, inst.FieldVersion:
			values[i] = new(sql.NullInt64)
		case inst.FieldInstID, inst.FieldProcID, inst.FieldBusiKey, inst.FieldBusiType, inst.FieldStarter:
			values[i] = new(sql.NullString)
		case inst.FieldStartTime, inst.FieldEndTime:
			values[i] = new(sql.NullTime)
		case inst.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Inst fields.
func (i *Inst) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case inst.FieldID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case inst.FieldInstID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inst_id", values[j])
			} else if value.Valid {
				i.InstID = value.String
			}
		case inst.FieldProcID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field proc_id", values[j])
			} else if value.Valid {
				i.ProcID = value.String
			}
		case inst.FieldBusiKey:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field busi_key", values[j])
			} else if value.Valid {
				i.BusiKey = value.String
			}
		case inst.FieldBusiType:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field busi_type", values[j])
			} else if value.Valid {
				i.BusiType = value.String
			}
		case inst.FieldStarter:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field starter", values[j])
			} else if value.Valid {
				i.Starter = value.String
			}
		case inst.FieldStartTime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[j])
			} else if value.Valid {
				i.StartTime = value.Time
			}
		case inst.FieldEndTime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[j])
			} else if value.Valid {
				i.EndTime = value.Time
			}
		case inst.FieldInit:
			if value, ok := values[j].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field init", values[j])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &i.Init); err != nil {
					return fmt.Errorf("unmarshal field init: %w", err)
				}
			}
		case inst.FieldStatus:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[j])
			} else if value.Valid {
				i.Status = int(value.Int64)
			}
		case inst.FieldVersion:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[j])
			} else if value.Valid {
				i.Version = int(value.Int64)
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Inst.
// This includes values selected through modifiers, order, etc.
func (i *Inst) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// Update returns a builder for updating this Inst.
// Note that you need to call Inst.Unwrap() before calling this method if this Inst
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Inst) Update() *InstUpdateOne {
	return NewInstClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Inst entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Inst) Unwrap() *Inst {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Inst is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Inst) String() string {
	var builder strings.Builder
	builder.WriteString("Inst(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("inst_id=")
	builder.WriteString(i.InstID)
	builder.WriteString(", ")
	builder.WriteString("proc_id=")
	builder.WriteString(i.ProcID)
	builder.WriteString(", ")
	builder.WriteString("busi_key=")
	builder.WriteString(i.BusiKey)
	builder.WriteString(", ")
	builder.WriteString("busi_type=")
	builder.WriteString(i.BusiType)
	builder.WriteString(", ")
	builder.WriteString("starter=")
	builder.WriteString(i.Starter)
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(i.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(i.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("init=")
	builder.WriteString(fmt.Sprintf("%v", i.Init))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", i.Status))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", i.Version))
	builder.WriteByte(')')
	return builder.String()
}

// Insts is a parsable slice of Inst.
type Insts []*Inst
