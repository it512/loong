// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/it512/loong"
	"github.com/it512/loong/pgx/internal/ent/inst"
	"github.com/it512/loong/pgx/internal/ent/predicate"
)

// InstUpdate is the builder for updating Inst entities.
type InstUpdate struct {
	config
	hooks    []Hook
	mutation *InstMutation
}

// Where appends a list predicates to the InstUpdate builder.
func (iu *InstUpdate) Where(ps ...predicate.Inst) *InstUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetEndTime sets the "end_time" field.
func (iu *InstUpdate) SetEndTime(t time.Time) *InstUpdate {
	iu.mutation.SetEndTime(t)
	return iu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (iu *InstUpdate) SetNillableEndTime(t *time.Time) *InstUpdate {
	if t != nil {
		iu.SetEndTime(*t)
	}
	return iu
}

// ClearEndTime clears the value of the "end_time" field.
func (iu *InstUpdate) ClearEndTime() *InstUpdate {
	iu.mutation.ClearEndTime()
	return iu
}

// SetInit sets the "init" field.
func (iu *InstUpdate) SetInit(l loong.Var) *InstUpdate {
	iu.mutation.SetInit(l)
	return iu
}

// SetStatus sets the "status" field.
func (iu *InstUpdate) SetStatus(i int) *InstUpdate {
	iu.mutation.ResetStatus()
	iu.mutation.SetStatus(i)
	return iu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iu *InstUpdate) SetNillableStatus(i *int) *InstUpdate {
	if i != nil {
		iu.SetStatus(*i)
	}
	return iu
}

// AddStatus adds i to the "status" field.
func (iu *InstUpdate) AddStatus(i int) *InstUpdate {
	iu.mutation.AddStatus(i)
	return iu
}

// SetVersion sets the "version" field.
func (iu *InstUpdate) SetVersion(i int) *InstUpdate {
	iu.mutation.ResetVersion()
	iu.mutation.SetVersion(i)
	return iu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (iu *InstUpdate) SetNillableVersion(i *int) *InstUpdate {
	if i != nil {
		iu.SetVersion(*i)
	}
	return iu
}

// AddVersion adds i to the "version" field.
func (iu *InstUpdate) AddVersion(i int) *InstUpdate {
	iu.mutation.AddVersion(i)
	return iu
}

// Mutation returns the InstMutation object of the builder.
func (iu *InstUpdate) Mutation() *InstMutation {
	return iu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InstUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InstUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InstUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InstUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *InstUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(inst.Table, inst.Columns, sqlgraph.NewFieldSpec(inst.FieldID, field.TypeUUID))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.EndTime(); ok {
		_spec.SetField(inst.FieldEndTime, field.TypeTime, value)
	}
	if iu.mutation.EndTimeCleared() {
		_spec.ClearField(inst.FieldEndTime, field.TypeTime)
	}
	if value, ok := iu.mutation.Init(); ok {
		_spec.SetField(inst.FieldInit, field.TypeJSON, value)
	}
	if value, ok := iu.mutation.Status(); ok {
		_spec.SetField(inst.FieldStatus, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedStatus(); ok {
		_spec.AddField(inst.FieldStatus, field.TypeInt, value)
	}
	if value, ok := iu.mutation.Version(); ok {
		_spec.SetField(inst.FieldVersion, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedVersion(); ok {
		_spec.AddField(inst.FieldVersion, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inst.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InstUpdateOne is the builder for updating a single Inst entity.
type InstUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InstMutation
}

// SetEndTime sets the "end_time" field.
func (iuo *InstUpdateOne) SetEndTime(t time.Time) *InstUpdateOne {
	iuo.mutation.SetEndTime(t)
	return iuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (iuo *InstUpdateOne) SetNillableEndTime(t *time.Time) *InstUpdateOne {
	if t != nil {
		iuo.SetEndTime(*t)
	}
	return iuo
}

// ClearEndTime clears the value of the "end_time" field.
func (iuo *InstUpdateOne) ClearEndTime() *InstUpdateOne {
	iuo.mutation.ClearEndTime()
	return iuo
}

// SetInit sets the "init" field.
func (iuo *InstUpdateOne) SetInit(l loong.Var) *InstUpdateOne {
	iuo.mutation.SetInit(l)
	return iuo
}

// SetStatus sets the "status" field.
func (iuo *InstUpdateOne) SetStatus(i int) *InstUpdateOne {
	iuo.mutation.ResetStatus()
	iuo.mutation.SetStatus(i)
	return iuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iuo *InstUpdateOne) SetNillableStatus(i *int) *InstUpdateOne {
	if i != nil {
		iuo.SetStatus(*i)
	}
	return iuo
}

// AddStatus adds i to the "status" field.
func (iuo *InstUpdateOne) AddStatus(i int) *InstUpdateOne {
	iuo.mutation.AddStatus(i)
	return iuo
}

// SetVersion sets the "version" field.
func (iuo *InstUpdateOne) SetVersion(i int) *InstUpdateOne {
	iuo.mutation.ResetVersion()
	iuo.mutation.SetVersion(i)
	return iuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (iuo *InstUpdateOne) SetNillableVersion(i *int) *InstUpdateOne {
	if i != nil {
		iuo.SetVersion(*i)
	}
	return iuo
}

// AddVersion adds i to the "version" field.
func (iuo *InstUpdateOne) AddVersion(i int) *InstUpdateOne {
	iuo.mutation.AddVersion(i)
	return iuo
}

// Mutation returns the InstMutation object of the builder.
func (iuo *InstUpdateOne) Mutation() *InstMutation {
	return iuo.mutation
}

// Where appends a list predicates to the InstUpdate builder.
func (iuo *InstUpdateOne) Where(ps ...predicate.Inst) *InstUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InstUpdateOne) Select(field string, fields ...string) *InstUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Inst entity.
func (iuo *InstUpdateOne) Save(ctx context.Context) (*Inst, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InstUpdateOne) SaveX(ctx context.Context) *Inst {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InstUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InstUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *InstUpdateOne) sqlSave(ctx context.Context) (_node *Inst, err error) {
	_spec := sqlgraph.NewUpdateSpec(inst.Table, inst.Columns, sqlgraph.NewFieldSpec(inst.FieldID, field.TypeUUID))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Inst.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, inst.FieldID)
		for _, f := range fields {
			if !inst.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != inst.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.EndTime(); ok {
		_spec.SetField(inst.FieldEndTime, field.TypeTime, value)
	}
	if iuo.mutation.EndTimeCleared() {
		_spec.ClearField(inst.FieldEndTime, field.TypeTime)
	}
	if value, ok := iuo.mutation.Init(); ok {
		_spec.SetField(inst.FieldInit, field.TypeJSON, value)
	}
	if value, ok := iuo.mutation.Status(); ok {
		_spec.SetField(inst.FieldStatus, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedStatus(); ok {
		_spec.AddField(inst.FieldStatus, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.Version(); ok {
		_spec.SetField(inst.FieldVersion, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedVersion(); ok {
		_spec.AddField(inst.FieldVersion, field.TypeInt, value)
	}
	_node = &Inst{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inst.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
