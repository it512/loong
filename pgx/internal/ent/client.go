// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/google/uuid"
	"github.com/it512/loong/pgx/internal/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/it512/loong/pgx/internal/ent/exec"
	"github.com/it512/loong/pgx/internal/ent/inst"
	"github.com/it512/loong/pgx/internal/ent/usertask"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Exec is the client for interacting with the Exec builders.
	Exec *ExecClient
	// Inst is the client for interacting with the Inst builders.
	Inst *InstClient
	// UserTask is the client for interacting with the UserTask builders.
	UserTask *UserTaskClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Exec = NewExecClient(c.config)
	c.Inst = NewInstClient(c.config)
	c.UserTask = NewUserTaskClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Exec:     NewExecClient(cfg),
		Inst:     NewInstClient(cfg),
		UserTask: NewUserTaskClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Exec:     NewExecClient(cfg),
		Inst:     NewInstClient(cfg),
		UserTask: NewUserTaskClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Exec.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Exec.Use(hooks...)
	c.Inst.Use(hooks...)
	c.UserTask.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Exec.Intercept(interceptors...)
	c.Inst.Intercept(interceptors...)
	c.UserTask.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ExecMutation:
		return c.Exec.mutate(ctx, m)
	case *InstMutation:
		return c.Inst.mutate(ctx, m)
	case *UserTaskMutation:
		return c.UserTask.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ExecClient is a client for the Exec schema.
type ExecClient struct {
	config
}

// NewExecClient returns a client for the Exec from the given config.
func NewExecClient(c config) *ExecClient {
	return &ExecClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exec.Hooks(f(g(h())))`.
func (c *ExecClient) Use(hooks ...Hook) {
	c.hooks.Exec = append(c.hooks.Exec, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exec.Intercept(f(g(h())))`.
func (c *ExecClient) Intercept(interceptors ...Interceptor) {
	c.inters.Exec = append(c.inters.Exec, interceptors...)
}

// Create returns a builder for creating a Exec entity.
func (c *ExecClient) Create() *ExecCreate {
	mutation := newExecMutation(c.config, OpCreate)
	return &ExecCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Exec entities.
func (c *ExecClient) CreateBulk(builders ...*ExecCreate) *ExecCreateBulk {
	return &ExecCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ExecClient) MapCreateBulk(slice any, setFunc func(*ExecCreate, int)) *ExecCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ExecCreateBulk{err: fmt.Errorf("calling to ExecClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ExecCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ExecCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Exec.
func (c *ExecClient) Update() *ExecUpdate {
	mutation := newExecMutation(c.config, OpUpdate)
	return &ExecUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExecClient) UpdateOne(e *Exec) *ExecUpdateOne {
	mutation := newExecMutation(c.config, OpUpdateOne, withExec(e))
	return &ExecUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExecClient) UpdateOneID(id uuid.UUID) *ExecUpdateOne {
	mutation := newExecMutation(c.config, OpUpdateOne, withExecID(id))
	return &ExecUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Exec.
func (c *ExecClient) Delete() *ExecDelete {
	mutation := newExecMutation(c.config, OpDelete)
	return &ExecDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExecClient) DeleteOne(e *Exec) *ExecDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExecClient) DeleteOneID(id uuid.UUID) *ExecDeleteOne {
	builder := c.Delete().Where(exec.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExecDeleteOne{builder}
}

// Query returns a query builder for Exec.
func (c *ExecClient) Query() *ExecQuery {
	return &ExecQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExec},
		inters: c.Interceptors(),
	}
}

// Get returns a Exec entity by its id.
func (c *ExecClient) Get(ctx context.Context, id uuid.UUID) (*Exec, error) {
	return c.Query().Where(exec.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExecClient) GetX(ctx context.Context, id uuid.UUID) *Exec {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ExecClient) Hooks() []Hook {
	return c.hooks.Exec
}

// Interceptors returns the client interceptors.
func (c *ExecClient) Interceptors() []Interceptor {
	return c.inters.Exec
}

func (c *ExecClient) mutate(ctx context.Context, m *ExecMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExecCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExecUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExecUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExecDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Exec mutation op: %q", m.Op())
	}
}

// InstClient is a client for the Inst schema.
type InstClient struct {
	config
}

// NewInstClient returns a client for the Inst from the given config.
func NewInstClient(c config) *InstClient {
	return &InstClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `inst.Hooks(f(g(h())))`.
func (c *InstClient) Use(hooks ...Hook) {
	c.hooks.Inst = append(c.hooks.Inst, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `inst.Intercept(f(g(h())))`.
func (c *InstClient) Intercept(interceptors ...Interceptor) {
	c.inters.Inst = append(c.inters.Inst, interceptors...)
}

// Create returns a builder for creating a Inst entity.
func (c *InstClient) Create() *InstCreate {
	mutation := newInstMutation(c.config, OpCreate)
	return &InstCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Inst entities.
func (c *InstClient) CreateBulk(builders ...*InstCreate) *InstCreateBulk {
	return &InstCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *InstClient) MapCreateBulk(slice any, setFunc func(*InstCreate, int)) *InstCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &InstCreateBulk{err: fmt.Errorf("calling to InstClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*InstCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &InstCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Inst.
func (c *InstClient) Update() *InstUpdate {
	mutation := newInstMutation(c.config, OpUpdate)
	return &InstUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InstClient) UpdateOne(i *Inst) *InstUpdateOne {
	mutation := newInstMutation(c.config, OpUpdateOne, withInst(i))
	return &InstUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InstClient) UpdateOneID(id uuid.UUID) *InstUpdateOne {
	mutation := newInstMutation(c.config, OpUpdateOne, withInstID(id))
	return &InstUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Inst.
func (c *InstClient) Delete() *InstDelete {
	mutation := newInstMutation(c.config, OpDelete)
	return &InstDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InstClient) DeleteOne(i *Inst) *InstDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InstClient) DeleteOneID(id uuid.UUID) *InstDeleteOne {
	builder := c.Delete().Where(inst.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InstDeleteOne{builder}
}

// Query returns a query builder for Inst.
func (c *InstClient) Query() *InstQuery {
	return &InstQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInst},
		inters: c.Interceptors(),
	}
}

// Get returns a Inst entity by its id.
func (c *InstClient) Get(ctx context.Context, id uuid.UUID) (*Inst, error) {
	return c.Query().Where(inst.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InstClient) GetX(ctx context.Context, id uuid.UUID) *Inst {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *InstClient) Hooks() []Hook {
	return c.hooks.Inst
}

// Interceptors returns the client interceptors.
func (c *InstClient) Interceptors() []Interceptor {
	return c.inters.Inst
}

func (c *InstClient) mutate(ctx context.Context, m *InstMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InstCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InstUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InstUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InstDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Inst mutation op: %q", m.Op())
	}
}

// UserTaskClient is a client for the UserTask schema.
type UserTaskClient struct {
	config
}

// NewUserTaskClient returns a client for the UserTask from the given config.
func NewUserTaskClient(c config) *UserTaskClient {
	return &UserTaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usertask.Hooks(f(g(h())))`.
func (c *UserTaskClient) Use(hooks ...Hook) {
	c.hooks.UserTask = append(c.hooks.UserTask, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usertask.Intercept(f(g(h())))`.
func (c *UserTaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserTask = append(c.inters.UserTask, interceptors...)
}

// Create returns a builder for creating a UserTask entity.
func (c *UserTaskClient) Create() *UserTaskCreate {
	mutation := newUserTaskMutation(c.config, OpCreate)
	return &UserTaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserTask entities.
func (c *UserTaskClient) CreateBulk(builders ...*UserTaskCreate) *UserTaskCreateBulk {
	return &UserTaskCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserTaskClient) MapCreateBulk(slice any, setFunc func(*UserTaskCreate, int)) *UserTaskCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserTaskCreateBulk{err: fmt.Errorf("calling to UserTaskClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserTaskCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserTaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserTask.
func (c *UserTaskClient) Update() *UserTaskUpdate {
	mutation := newUserTaskMutation(c.config, OpUpdate)
	return &UserTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserTaskClient) UpdateOne(ut *UserTask) *UserTaskUpdateOne {
	mutation := newUserTaskMutation(c.config, OpUpdateOne, withUserTask(ut))
	return &UserTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserTaskClient) UpdateOneID(id uuid.UUID) *UserTaskUpdateOne {
	mutation := newUserTaskMutation(c.config, OpUpdateOne, withUserTaskID(id))
	return &UserTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserTask.
func (c *UserTaskClient) Delete() *UserTaskDelete {
	mutation := newUserTaskMutation(c.config, OpDelete)
	return &UserTaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserTaskClient) DeleteOne(ut *UserTask) *UserTaskDeleteOne {
	return c.DeleteOneID(ut.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserTaskClient) DeleteOneID(id uuid.UUID) *UserTaskDeleteOne {
	builder := c.Delete().Where(usertask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserTaskDeleteOne{builder}
}

// Query returns a query builder for UserTask.
func (c *UserTaskClient) Query() *UserTaskQuery {
	return &UserTaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserTask},
		inters: c.Interceptors(),
	}
}

// Get returns a UserTask entity by its id.
func (c *UserTaskClient) Get(ctx context.Context, id uuid.UUID) (*UserTask, error) {
	return c.Query().Where(usertask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserTaskClient) GetX(ctx context.Context, id uuid.UUID) *UserTask {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserTaskClient) Hooks() []Hook {
	return c.hooks.UserTask
}

// Interceptors returns the client interceptors.
func (c *UserTaskClient) Interceptors() []Interceptor {
	return c.inters.UserTask
}

func (c *UserTaskClient) mutate(ctx context.Context, m *UserTaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserTaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserTaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserTask mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Exec, Inst, UserTask []ent.Hook
	}
	inters struct {
		Exec, Inst, UserTask []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
