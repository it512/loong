// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/it512/loong/hg/internal/ent/hg"
)

// Hg is the model entity for the Hg schema.
type Hg struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// HumanCode holds the value of the "human_code" field.
	HumanCode string `json:"human_code,omitempty"`
	// HumanName holds the value of the "human_name" field.
	HumanName string `json:"human_name,omitempty"`
	// GroupCode holds the value of the "group_code" field.
	GroupCode string `json:"group_code,omitempty"`
	// GroupName holds the value of the "group_name" field.
	GroupName string `json:"group_name,omitempty"`
	// Status holds the value of the "status" field.
	Status       int `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Hg) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hg.FieldStatus:
			values[i] = new(sql.NullInt64)
		case hg.FieldHumanCode, hg.FieldHumanName, hg.FieldGroupCode, hg.FieldGroupName:
			values[i] = new(sql.NullString)
		case hg.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Hg fields.
func (h *Hg) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hg.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				h.ID = *value
			}
		case hg.FieldHumanCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field human_code", values[i])
			} else if value.Valid {
				h.HumanCode = value.String
			}
		case hg.FieldHumanName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field human_name", values[i])
			} else if value.Valid {
				h.HumanName = value.String
			}
		case hg.FieldGroupCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field group_code", values[i])
			} else if value.Valid {
				h.GroupCode = value.String
			}
		case hg.FieldGroupName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field group_name", values[i])
			} else if value.Valid {
				h.GroupName = value.String
			}
		case hg.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				h.Status = int(value.Int64)
			}
		default:
			h.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Hg.
// This includes values selected through modifiers, order, etc.
func (h *Hg) Value(name string) (ent.Value, error) {
	return h.selectValues.Get(name)
}

// Update returns a builder for updating this Hg.
// Note that you need to call Hg.Unwrap() before calling this method if this Hg
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Hg) Update() *HgUpdateOne {
	return NewHgClient(h.config).UpdateOne(h)
}

// Unwrap unwraps the Hg entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Hg) Unwrap() *Hg {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Hg is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Hg) String() string {
	var builder strings.Builder
	builder.WriteString("Hg(")
	builder.WriteString(fmt.Sprintf("id=%v, ", h.ID))
	builder.WriteString("human_code=")
	builder.WriteString(h.HumanCode)
	builder.WriteString(", ")
	builder.WriteString("human_name=")
	builder.WriteString(h.HumanName)
	builder.WriteString(", ")
	builder.WriteString("group_code=")
	builder.WriteString(h.GroupCode)
	builder.WriteString(", ")
	builder.WriteString("group_name=")
	builder.WriteString(h.GroupName)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", h.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Hgs is a parsable slice of Hg.
type Hgs []*Hg
