// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/it512/loong/hg/internal/ent/hg"
)

// HgCreate is the builder for creating a Hg entity.
type HgCreate struct {
	config
	mutation *HgMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetHumanCode sets the "human_code" field.
func (hc *HgCreate) SetHumanCode(s string) *HgCreate {
	hc.mutation.SetHumanCode(s)
	return hc
}

// SetHumanName sets the "human_name" field.
func (hc *HgCreate) SetHumanName(s string) *HgCreate {
	hc.mutation.SetHumanName(s)
	return hc
}

// SetGroupCode sets the "group_code" field.
func (hc *HgCreate) SetGroupCode(s string) *HgCreate {
	hc.mutation.SetGroupCode(s)
	return hc
}

// SetGroupName sets the "group_name" field.
func (hc *HgCreate) SetGroupName(s string) *HgCreate {
	hc.mutation.SetGroupName(s)
	return hc
}

// SetStatus sets the "status" field.
func (hc *HgCreate) SetStatus(i int) *HgCreate {
	hc.mutation.SetStatus(i)
	return hc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (hc *HgCreate) SetNillableStatus(i *int) *HgCreate {
	if i != nil {
		hc.SetStatus(*i)
	}
	return hc
}

// SetID sets the "id" field.
func (hc *HgCreate) SetID(u uuid.UUID) *HgCreate {
	hc.mutation.SetID(u)
	return hc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (hc *HgCreate) SetNillableID(u *uuid.UUID) *HgCreate {
	if u != nil {
		hc.SetID(*u)
	}
	return hc
}

// Mutation returns the HgMutation object of the builder.
func (hc *HgCreate) Mutation() *HgMutation {
	return hc.mutation
}

// Save creates the Hg in the database.
func (hc *HgCreate) Save(ctx context.Context) (*Hg, error) {
	hc.defaults()
	return withHooks(ctx, hc.sqlSave, hc.mutation, hc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HgCreate) SaveX(ctx context.Context) *Hg {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HgCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HgCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hc *HgCreate) defaults() {
	if _, ok := hc.mutation.Status(); !ok {
		v := hg.DefaultStatus
		hc.mutation.SetStatus(v)
	}
	if _, ok := hc.mutation.ID(); !ok {
		v := hg.DefaultID()
		hc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hc *HgCreate) check() error {
	if _, ok := hc.mutation.HumanCode(); !ok {
		return &ValidationError{Name: "human_code", err: errors.New(`ent: missing required field "Hg.human_code"`)}
	}
	if v, ok := hc.mutation.HumanCode(); ok {
		if err := hg.HumanCodeValidator(v); err != nil {
			return &ValidationError{Name: "human_code", err: fmt.Errorf(`ent: validator failed for field "Hg.human_code": %w`, err)}
		}
	}
	if _, ok := hc.mutation.HumanName(); !ok {
		return &ValidationError{Name: "human_name", err: errors.New(`ent: missing required field "Hg.human_name"`)}
	}
	if v, ok := hc.mutation.HumanName(); ok {
		if err := hg.HumanNameValidator(v); err != nil {
			return &ValidationError{Name: "human_name", err: fmt.Errorf(`ent: validator failed for field "Hg.human_name": %w`, err)}
		}
	}
	if _, ok := hc.mutation.GroupCode(); !ok {
		return &ValidationError{Name: "group_code", err: errors.New(`ent: missing required field "Hg.group_code"`)}
	}
	if v, ok := hc.mutation.GroupCode(); ok {
		if err := hg.GroupCodeValidator(v); err != nil {
			return &ValidationError{Name: "group_code", err: fmt.Errorf(`ent: validator failed for field "Hg.group_code": %w`, err)}
		}
	}
	if _, ok := hc.mutation.GroupName(); !ok {
		return &ValidationError{Name: "group_name", err: errors.New(`ent: missing required field "Hg.group_name"`)}
	}
	if v, ok := hc.mutation.GroupName(); ok {
		if err := hg.GroupNameValidator(v); err != nil {
			return &ValidationError{Name: "group_name", err: fmt.Errorf(`ent: validator failed for field "Hg.group_name": %w`, err)}
		}
	}
	if _, ok := hc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Hg.status"`)}
	}
	return nil
}

func (hc *HgCreate) sqlSave(ctx context.Context) (*Hg, error) {
	if err := hc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	hc.mutation.id = &_node.ID
	hc.mutation.done = true
	return _node, nil
}

func (hc *HgCreate) createSpec() (*Hg, *sqlgraph.CreateSpec) {
	var (
		_node = &Hg{config: hc.config}
		_spec = sqlgraph.NewCreateSpec(hg.Table, sqlgraph.NewFieldSpec(hg.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = hc.conflict
	if id, ok := hc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := hc.mutation.HumanCode(); ok {
		_spec.SetField(hg.FieldHumanCode, field.TypeString, value)
		_node.HumanCode = value
	}
	if value, ok := hc.mutation.HumanName(); ok {
		_spec.SetField(hg.FieldHumanName, field.TypeString, value)
		_node.HumanName = value
	}
	if value, ok := hc.mutation.GroupCode(); ok {
		_spec.SetField(hg.FieldGroupCode, field.TypeString, value)
		_node.GroupCode = value
	}
	if value, ok := hc.mutation.GroupName(); ok {
		_spec.SetField(hg.FieldGroupName, field.TypeString, value)
		_node.GroupName = value
	}
	if value, ok := hc.mutation.Status(); ok {
		_spec.SetField(hg.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Hg.Create().
//		SetHumanCode(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HgUpsert) {
//			SetHumanCode(v+v).
//		}).
//		Exec(ctx)
func (hc *HgCreate) OnConflict(opts ...sql.ConflictOption) *HgUpsertOne {
	hc.conflict = opts
	return &HgUpsertOne{
		create: hc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Hg.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hc *HgCreate) OnConflictColumns(columns ...string) *HgUpsertOne {
	hc.conflict = append(hc.conflict, sql.ConflictColumns(columns...))
	return &HgUpsertOne{
		create: hc,
	}
}

type (
	// HgUpsertOne is the builder for "upsert"-ing
	//  one Hg node.
	HgUpsertOne struct {
		create *HgCreate
	}

	// HgUpsert is the "OnConflict" setter.
	HgUpsert struct {
		*sql.UpdateSet
	}
)

// SetStatus sets the "status" field.
func (u *HgUpsert) SetStatus(v int) *HgUpsert {
	u.Set(hg.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *HgUpsert) UpdateStatus() *HgUpsert {
	u.SetExcluded(hg.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *HgUpsert) AddStatus(v int) *HgUpsert {
	u.Add(hg.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Hg.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(hg.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *HgUpsertOne) UpdateNewValues() *HgUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(hg.FieldID)
		}
		if _, exists := u.create.mutation.HumanCode(); exists {
			s.SetIgnore(hg.FieldHumanCode)
		}
		if _, exists := u.create.mutation.HumanName(); exists {
			s.SetIgnore(hg.FieldHumanName)
		}
		if _, exists := u.create.mutation.GroupCode(); exists {
			s.SetIgnore(hg.FieldGroupCode)
		}
		if _, exists := u.create.mutation.GroupName(); exists {
			s.SetIgnore(hg.FieldGroupName)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Hg.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HgUpsertOne) Ignore() *HgUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HgUpsertOne) DoNothing() *HgUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HgCreate.OnConflict
// documentation for more info.
func (u *HgUpsertOne) Update(set func(*HgUpsert)) *HgUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HgUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *HgUpsertOne) SetStatus(v int) *HgUpsertOne {
	return u.Update(func(s *HgUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *HgUpsertOne) AddStatus(v int) *HgUpsertOne {
	return u.Update(func(s *HgUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *HgUpsertOne) UpdateStatus() *HgUpsertOne {
	return u.Update(func(s *HgUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *HgUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HgCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HgUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HgUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: HgUpsertOne.ID is not supported by MySQL driver. Use HgUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HgUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HgCreateBulk is the builder for creating many Hg entities in bulk.
type HgCreateBulk struct {
	config
	err      error
	builders []*HgCreate
	conflict []sql.ConflictOption
}

// Save creates the Hg entities in the database.
func (hcb *HgCreateBulk) Save(ctx context.Context) ([]*Hg, error) {
	if hcb.err != nil {
		return nil, hcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*Hg, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HgMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = hcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HgCreateBulk) SaveX(ctx context.Context) []*Hg {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HgCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HgCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Hg.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HgUpsert) {
//			SetHumanCode(v+v).
//		}).
//		Exec(ctx)
func (hcb *HgCreateBulk) OnConflict(opts ...sql.ConflictOption) *HgUpsertBulk {
	hcb.conflict = opts
	return &HgUpsertBulk{
		create: hcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Hg.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hcb *HgCreateBulk) OnConflictColumns(columns ...string) *HgUpsertBulk {
	hcb.conflict = append(hcb.conflict, sql.ConflictColumns(columns...))
	return &HgUpsertBulk{
		create: hcb,
	}
}

// HgUpsertBulk is the builder for "upsert"-ing
// a bulk of Hg nodes.
type HgUpsertBulk struct {
	create *HgCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Hg.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(hg.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *HgUpsertBulk) UpdateNewValues() *HgUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(hg.FieldID)
			}
			if _, exists := b.mutation.HumanCode(); exists {
				s.SetIgnore(hg.FieldHumanCode)
			}
			if _, exists := b.mutation.HumanName(); exists {
				s.SetIgnore(hg.FieldHumanName)
			}
			if _, exists := b.mutation.GroupCode(); exists {
				s.SetIgnore(hg.FieldGroupCode)
			}
			if _, exists := b.mutation.GroupName(); exists {
				s.SetIgnore(hg.FieldGroupName)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Hg.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HgUpsertBulk) Ignore() *HgUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HgUpsertBulk) DoNothing() *HgUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HgCreateBulk.OnConflict
// documentation for more info.
func (u *HgUpsertBulk) Update(set func(*HgUpsert)) *HgUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HgUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *HgUpsertBulk) SetStatus(v int) *HgUpsertBulk {
	return u.Update(func(s *HgUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *HgUpsertBulk) AddStatus(v int) *HgUpsertBulk {
	return u.Update(func(s *HgUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *HgUpsertBulk) UpdateStatus() *HgUpsertBulk {
	return u.Update(func(s *HgUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *HgUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HgCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HgCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HgUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
