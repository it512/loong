// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/it512/loong/hg/internal/ent/hg"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   hg.Table,
			Columns: hg.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: hg.FieldID,
			},
		},
		Type: "Hg",
		Fields: map[string]*sqlgraph.FieldSpec{
			hg.FieldHumanCode: {Type: field.TypeString, Column: hg.FieldHumanCode},
			hg.FieldHumanName: {Type: field.TypeString, Column: hg.FieldHumanName},
			hg.FieldGroupCode: {Type: field.TypeString, Column: hg.FieldGroupCode},
			hg.FieldGroupName: {Type: field.TypeString, Column: hg.FieldGroupName},
			hg.FieldStatus:    {Type: field.TypeInt, Column: hg.FieldStatus},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (hq *HgQuery) addPredicate(pred func(s *sql.Selector)) {
	hq.predicates = append(hq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the HgQuery builder.
func (hq *HgQuery) Filter() *HgFilter {
	return &HgFilter{config: hq.config, predicateAdder: hq}
}

// addPredicate implements the predicateAdder interface.
func (m *HgMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the HgMutation builder.
func (m *HgMutation) Filter() *HgFilter {
	return &HgFilter{config: m.config, predicateAdder: m}
}

// HgFilter provides a generic filtering capability at runtime for HgQuery.
type HgFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *HgFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *HgFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(hg.FieldID))
}

// WhereHumanCode applies the entql string predicate on the human_code field.
func (f *HgFilter) WhereHumanCode(p entql.StringP) {
	f.Where(p.Field(hg.FieldHumanCode))
}

// WhereHumanName applies the entql string predicate on the human_name field.
func (f *HgFilter) WhereHumanName(p entql.StringP) {
	f.Where(p.Field(hg.FieldHumanName))
}

// WhereGroupCode applies the entql string predicate on the group_code field.
func (f *HgFilter) WhereGroupCode(p entql.StringP) {
	f.Where(p.Field(hg.FieldGroupCode))
}

// WhereGroupName applies the entql string predicate on the group_name field.
func (f *HgFilter) WhereGroupName(p entql.StringP) {
	f.Where(p.Field(hg.FieldGroupName))
}

// WhereStatus applies the entql int predicate on the status field.
func (f *HgFilter) WhereStatus(p entql.IntP) {
	f.Where(p.Field(hg.FieldStatus))
}
