// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/it512/loong/hg/internal/ent/hg"
	"github.com/it512/loong/hg/internal/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeHg = "Hg"
)

// HgMutation represents an operation that mutates the Hg nodes in the graph.
type HgMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	human_code    *string
	human_name    *string
	group_code    *string
	group_name    *string
	status        *int
	addstatus     *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Hg, error)
	predicates    []predicate.Hg
}

var _ ent.Mutation = (*HgMutation)(nil)

// hgOption allows management of the mutation configuration using functional options.
type hgOption func(*HgMutation)

// newHgMutation creates new mutation for the Hg entity.
func newHgMutation(c config, op Op, opts ...hgOption) *HgMutation {
	m := &HgMutation{
		config:        c,
		op:            op,
		typ:           TypeHg,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHgID sets the ID field of the mutation.
func withHgID(id uuid.UUID) hgOption {
	return func(m *HgMutation) {
		var (
			err   error
			once  sync.Once
			value *Hg
		)
		m.oldValue = func(ctx context.Context) (*Hg, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Hg.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHg sets the old Hg of the mutation.
func withHg(node *Hg) hgOption {
	return func(m *HgMutation) {
		m.oldValue = func(context.Context) (*Hg, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HgMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HgMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Hg entities.
func (m *HgMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HgMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HgMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Hg.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetHumanCode sets the "human_code" field.
func (m *HgMutation) SetHumanCode(s string) {
	m.human_code = &s
}

// HumanCode returns the value of the "human_code" field in the mutation.
func (m *HgMutation) HumanCode() (r string, exists bool) {
	v := m.human_code
	if v == nil {
		return
	}
	return *v, true
}

// OldHumanCode returns the old "human_code" field's value of the Hg entity.
// If the Hg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HgMutation) OldHumanCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHumanCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHumanCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHumanCode: %w", err)
	}
	return oldValue.HumanCode, nil
}

// ResetHumanCode resets all changes to the "human_code" field.
func (m *HgMutation) ResetHumanCode() {
	m.human_code = nil
}

// SetHumanName sets the "human_name" field.
func (m *HgMutation) SetHumanName(s string) {
	m.human_name = &s
}

// HumanName returns the value of the "human_name" field in the mutation.
func (m *HgMutation) HumanName() (r string, exists bool) {
	v := m.human_name
	if v == nil {
		return
	}
	return *v, true
}

// OldHumanName returns the old "human_name" field's value of the Hg entity.
// If the Hg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HgMutation) OldHumanName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHumanName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHumanName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHumanName: %w", err)
	}
	return oldValue.HumanName, nil
}

// ResetHumanName resets all changes to the "human_name" field.
func (m *HgMutation) ResetHumanName() {
	m.human_name = nil
}

// SetGroupCode sets the "group_code" field.
func (m *HgMutation) SetGroupCode(s string) {
	m.group_code = &s
}

// GroupCode returns the value of the "group_code" field in the mutation.
func (m *HgMutation) GroupCode() (r string, exists bool) {
	v := m.group_code
	if v == nil {
		return
	}
	return *v, true
}

// OldGroupCode returns the old "group_code" field's value of the Hg entity.
// If the Hg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HgMutation) OldGroupCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGroupCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGroupCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroupCode: %w", err)
	}
	return oldValue.GroupCode, nil
}

// ResetGroupCode resets all changes to the "group_code" field.
func (m *HgMutation) ResetGroupCode() {
	m.group_code = nil
}

// SetGroupName sets the "group_name" field.
func (m *HgMutation) SetGroupName(s string) {
	m.group_name = &s
}

// GroupName returns the value of the "group_name" field in the mutation.
func (m *HgMutation) GroupName() (r string, exists bool) {
	v := m.group_name
	if v == nil {
		return
	}
	return *v, true
}

// OldGroupName returns the old "group_name" field's value of the Hg entity.
// If the Hg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HgMutation) OldGroupName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGroupName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGroupName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroupName: %w", err)
	}
	return oldValue.GroupName, nil
}

// ResetGroupName resets all changes to the "group_name" field.
func (m *HgMutation) ResetGroupName() {
	m.group_name = nil
}

// SetStatus sets the "status" field.
func (m *HgMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *HgMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Hg entity.
// If the Hg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HgMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *HgMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *HgMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *HgMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// Where appends a list predicates to the HgMutation builder.
func (m *HgMutation) Where(ps ...predicate.Hg) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HgMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HgMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Hg, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HgMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HgMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Hg).
func (m *HgMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HgMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.human_code != nil {
		fields = append(fields, hg.FieldHumanCode)
	}
	if m.human_name != nil {
		fields = append(fields, hg.FieldHumanName)
	}
	if m.group_code != nil {
		fields = append(fields, hg.FieldGroupCode)
	}
	if m.group_name != nil {
		fields = append(fields, hg.FieldGroupName)
	}
	if m.status != nil {
		fields = append(fields, hg.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HgMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case hg.FieldHumanCode:
		return m.HumanCode()
	case hg.FieldHumanName:
		return m.HumanName()
	case hg.FieldGroupCode:
		return m.GroupCode()
	case hg.FieldGroupName:
		return m.GroupName()
	case hg.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HgMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case hg.FieldHumanCode:
		return m.OldHumanCode(ctx)
	case hg.FieldHumanName:
		return m.OldHumanName(ctx)
	case hg.FieldGroupCode:
		return m.OldGroupCode(ctx)
	case hg.FieldGroupName:
		return m.OldGroupName(ctx)
	case hg.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown Hg field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HgMutation) SetField(name string, value ent.Value) error {
	switch name {
	case hg.FieldHumanCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHumanCode(v)
		return nil
	case hg.FieldHumanName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHumanName(v)
		return nil
	case hg.FieldGroupCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroupCode(v)
		return nil
	case hg.FieldGroupName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroupName(v)
		return nil
	case hg.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Hg field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HgMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, hg.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HgMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case hg.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HgMutation) AddField(name string, value ent.Value) error {
	switch name {
	case hg.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Hg numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HgMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HgMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HgMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Hg nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HgMutation) ResetField(name string) error {
	switch name {
	case hg.FieldHumanCode:
		m.ResetHumanCode()
		return nil
	case hg.FieldHumanName:
		m.ResetHumanName()
		return nil
	case hg.FieldGroupCode:
		m.ResetGroupCode()
		return nil
	case hg.FieldGroupName:
		m.ResetGroupName()
		return nil
	case hg.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown Hg field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HgMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HgMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HgMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HgMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HgMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HgMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HgMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Hg unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HgMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Hg edge %s", name)
}
